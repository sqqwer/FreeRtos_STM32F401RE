
F401RE_LedTimer_FreeRtos.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000194  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00004a4c  080001a0  080001a0  000101a0  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000244  08004bec  08004bec  00014bec  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08004e30  08004e30  00020074  2**0
                  CONTENTS
  4 .ARM          00000008  08004e30  08004e30  00014e30  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  08004e38  08004e38  00020074  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08004e38  08004e38  00014e38  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08004e3c  08004e3c  00014e3c  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000074  20000000  08004e40  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00004090  20000074  08004eb4  00020074  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  20004104  08004eb4  00024104  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  00020074  2**0
                  CONTENTS, READONLY
 12 .debug_info   0000d22a  00000000  00000000  000200a4  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 00002142  00000000  00000000  0002d2ce  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00000a08  00000000  00000000  0002f410  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_ranges 00000940  00000000  00000000  0002fe18  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  00016f52  00000000  00000000  00030758  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   0000cefa  00000000  00000000  000476aa  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    0008ce00  00000000  00000000  000545a4  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000050  00000000  00000000  000e13a4  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00002c44  00000000  00000000  000e13f4  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080001a0 <__do_global_dtors_aux>:
 80001a0:	b510      	push	{r4, lr}
 80001a2:	4c05      	ldr	r4, [pc, #20]	; (80001b8 <__do_global_dtors_aux+0x18>)
 80001a4:	7823      	ldrb	r3, [r4, #0]
 80001a6:	b933      	cbnz	r3, 80001b6 <__do_global_dtors_aux+0x16>
 80001a8:	4b04      	ldr	r3, [pc, #16]	; (80001bc <__do_global_dtors_aux+0x1c>)
 80001aa:	b113      	cbz	r3, 80001b2 <__do_global_dtors_aux+0x12>
 80001ac:	4804      	ldr	r0, [pc, #16]	; (80001c0 <__do_global_dtors_aux+0x20>)
 80001ae:	f3af 8000 	nop.w
 80001b2:	2301      	movs	r3, #1
 80001b4:	7023      	strb	r3, [r4, #0]
 80001b6:	bd10      	pop	{r4, pc}
 80001b8:	20000074 	.word	0x20000074
 80001bc:	00000000 	.word	0x00000000
 80001c0:	08004bd4 	.word	0x08004bd4

080001c4 <frame_dummy>:
 80001c4:	b508      	push	{r3, lr}
 80001c6:	4b03      	ldr	r3, [pc, #12]	; (80001d4 <frame_dummy+0x10>)
 80001c8:	b11b      	cbz	r3, 80001d2 <frame_dummy+0xe>
 80001ca:	4903      	ldr	r1, [pc, #12]	; (80001d8 <frame_dummy+0x14>)
 80001cc:	4803      	ldr	r0, [pc, #12]	; (80001dc <frame_dummy+0x18>)
 80001ce:	f3af 8000 	nop.w
 80001d2:	bd08      	pop	{r3, pc}
 80001d4:	00000000 	.word	0x00000000
 80001d8:	20000078 	.word	0x20000078
 80001dc:	08004bd4 	.word	0x08004bd4

080001e0 <strcmp>:
 80001e0:	f810 2b01 	ldrb.w	r2, [r0], #1
 80001e4:	f811 3b01 	ldrb.w	r3, [r1], #1
 80001e8:	2a01      	cmp	r2, #1
 80001ea:	bf28      	it	cs
 80001ec:	429a      	cmpcs	r2, r3
 80001ee:	d0f7      	beq.n	80001e0 <strcmp>
 80001f0:	1ad0      	subs	r0, r2, r3
 80001f2:	4770      	bx	lr

080001f4 <strlen>:
 80001f4:	4603      	mov	r3, r0
 80001f6:	f813 2b01 	ldrb.w	r2, [r3], #1
 80001fa:	2a00      	cmp	r2, #0
 80001fc:	d1fb      	bne.n	80001f6 <strlen+0x2>
 80001fe:	1a18      	subs	r0, r3, r0
 8000200:	3801      	subs	r0, #1
 8000202:	4770      	bx	lr

08000204 <__aeabi_uldivmod>:
 8000204:	b953      	cbnz	r3, 800021c <__aeabi_uldivmod+0x18>
 8000206:	b94a      	cbnz	r2, 800021c <__aeabi_uldivmod+0x18>
 8000208:	2900      	cmp	r1, #0
 800020a:	bf08      	it	eq
 800020c:	2800      	cmpeq	r0, #0
 800020e:	bf1c      	itt	ne
 8000210:	f04f 31ff 	movne.w	r1, #4294967295
 8000214:	f04f 30ff 	movne.w	r0, #4294967295
 8000218:	f000 b974 	b.w	8000504 <__aeabi_idiv0>
 800021c:	f1ad 0c08 	sub.w	ip, sp, #8
 8000220:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000224:	f000 f806 	bl	8000234 <__udivmoddi4>
 8000228:	f8dd e004 	ldr.w	lr, [sp, #4]
 800022c:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000230:	b004      	add	sp, #16
 8000232:	4770      	bx	lr

08000234 <__udivmoddi4>:
 8000234:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000238:	9d08      	ldr	r5, [sp, #32]
 800023a:	4604      	mov	r4, r0
 800023c:	468e      	mov	lr, r1
 800023e:	2b00      	cmp	r3, #0
 8000240:	d14d      	bne.n	80002de <__udivmoddi4+0xaa>
 8000242:	428a      	cmp	r2, r1
 8000244:	4694      	mov	ip, r2
 8000246:	d969      	bls.n	800031c <__udivmoddi4+0xe8>
 8000248:	fab2 f282 	clz	r2, r2
 800024c:	b152      	cbz	r2, 8000264 <__udivmoddi4+0x30>
 800024e:	fa01 f302 	lsl.w	r3, r1, r2
 8000252:	f1c2 0120 	rsb	r1, r2, #32
 8000256:	fa20 f101 	lsr.w	r1, r0, r1
 800025a:	fa0c fc02 	lsl.w	ip, ip, r2
 800025e:	ea41 0e03 	orr.w	lr, r1, r3
 8000262:	4094      	lsls	r4, r2
 8000264:	ea4f 481c 	mov.w	r8, ip, lsr #16
 8000268:	0c21      	lsrs	r1, r4, #16
 800026a:	fbbe f6f8 	udiv	r6, lr, r8
 800026e:	fa1f f78c 	uxth.w	r7, ip
 8000272:	fb08 e316 	mls	r3, r8, r6, lr
 8000276:	ea41 4303 	orr.w	r3, r1, r3, lsl #16
 800027a:	fb06 f107 	mul.w	r1, r6, r7
 800027e:	4299      	cmp	r1, r3
 8000280:	d90a      	bls.n	8000298 <__udivmoddi4+0x64>
 8000282:	eb1c 0303 	adds.w	r3, ip, r3
 8000286:	f106 30ff 	add.w	r0, r6, #4294967295
 800028a:	f080 811f 	bcs.w	80004cc <__udivmoddi4+0x298>
 800028e:	4299      	cmp	r1, r3
 8000290:	f240 811c 	bls.w	80004cc <__udivmoddi4+0x298>
 8000294:	3e02      	subs	r6, #2
 8000296:	4463      	add	r3, ip
 8000298:	1a5b      	subs	r3, r3, r1
 800029a:	b2a4      	uxth	r4, r4
 800029c:	fbb3 f0f8 	udiv	r0, r3, r8
 80002a0:	fb08 3310 	mls	r3, r8, r0, r3
 80002a4:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 80002a8:	fb00 f707 	mul.w	r7, r0, r7
 80002ac:	42a7      	cmp	r7, r4
 80002ae:	d90a      	bls.n	80002c6 <__udivmoddi4+0x92>
 80002b0:	eb1c 0404 	adds.w	r4, ip, r4
 80002b4:	f100 33ff 	add.w	r3, r0, #4294967295
 80002b8:	f080 810a 	bcs.w	80004d0 <__udivmoddi4+0x29c>
 80002bc:	42a7      	cmp	r7, r4
 80002be:	f240 8107 	bls.w	80004d0 <__udivmoddi4+0x29c>
 80002c2:	4464      	add	r4, ip
 80002c4:	3802      	subs	r0, #2
 80002c6:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 80002ca:	1be4      	subs	r4, r4, r7
 80002cc:	2600      	movs	r6, #0
 80002ce:	b11d      	cbz	r5, 80002d8 <__udivmoddi4+0xa4>
 80002d0:	40d4      	lsrs	r4, r2
 80002d2:	2300      	movs	r3, #0
 80002d4:	e9c5 4300 	strd	r4, r3, [r5]
 80002d8:	4631      	mov	r1, r6
 80002da:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80002de:	428b      	cmp	r3, r1
 80002e0:	d909      	bls.n	80002f6 <__udivmoddi4+0xc2>
 80002e2:	2d00      	cmp	r5, #0
 80002e4:	f000 80ef 	beq.w	80004c6 <__udivmoddi4+0x292>
 80002e8:	2600      	movs	r6, #0
 80002ea:	e9c5 0100 	strd	r0, r1, [r5]
 80002ee:	4630      	mov	r0, r6
 80002f0:	4631      	mov	r1, r6
 80002f2:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80002f6:	fab3 f683 	clz	r6, r3
 80002fa:	2e00      	cmp	r6, #0
 80002fc:	d14a      	bne.n	8000394 <__udivmoddi4+0x160>
 80002fe:	428b      	cmp	r3, r1
 8000300:	d302      	bcc.n	8000308 <__udivmoddi4+0xd4>
 8000302:	4282      	cmp	r2, r0
 8000304:	f200 80f9 	bhi.w	80004fa <__udivmoddi4+0x2c6>
 8000308:	1a84      	subs	r4, r0, r2
 800030a:	eb61 0303 	sbc.w	r3, r1, r3
 800030e:	2001      	movs	r0, #1
 8000310:	469e      	mov	lr, r3
 8000312:	2d00      	cmp	r5, #0
 8000314:	d0e0      	beq.n	80002d8 <__udivmoddi4+0xa4>
 8000316:	e9c5 4e00 	strd	r4, lr, [r5]
 800031a:	e7dd      	b.n	80002d8 <__udivmoddi4+0xa4>
 800031c:	b902      	cbnz	r2, 8000320 <__udivmoddi4+0xec>
 800031e:	deff      	udf	#255	; 0xff
 8000320:	fab2 f282 	clz	r2, r2
 8000324:	2a00      	cmp	r2, #0
 8000326:	f040 8092 	bne.w	800044e <__udivmoddi4+0x21a>
 800032a:	eba1 010c 	sub.w	r1, r1, ip
 800032e:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000332:	fa1f fe8c 	uxth.w	lr, ip
 8000336:	2601      	movs	r6, #1
 8000338:	0c20      	lsrs	r0, r4, #16
 800033a:	fbb1 f3f7 	udiv	r3, r1, r7
 800033e:	fb07 1113 	mls	r1, r7, r3, r1
 8000342:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
 8000346:	fb0e f003 	mul.w	r0, lr, r3
 800034a:	4288      	cmp	r0, r1
 800034c:	d908      	bls.n	8000360 <__udivmoddi4+0x12c>
 800034e:	eb1c 0101 	adds.w	r1, ip, r1
 8000352:	f103 38ff 	add.w	r8, r3, #4294967295
 8000356:	d202      	bcs.n	800035e <__udivmoddi4+0x12a>
 8000358:	4288      	cmp	r0, r1
 800035a:	f200 80cb 	bhi.w	80004f4 <__udivmoddi4+0x2c0>
 800035e:	4643      	mov	r3, r8
 8000360:	1a09      	subs	r1, r1, r0
 8000362:	b2a4      	uxth	r4, r4
 8000364:	fbb1 f0f7 	udiv	r0, r1, r7
 8000368:	fb07 1110 	mls	r1, r7, r0, r1
 800036c:	ea44 4401 	orr.w	r4, r4, r1, lsl #16
 8000370:	fb0e fe00 	mul.w	lr, lr, r0
 8000374:	45a6      	cmp	lr, r4
 8000376:	d908      	bls.n	800038a <__udivmoddi4+0x156>
 8000378:	eb1c 0404 	adds.w	r4, ip, r4
 800037c:	f100 31ff 	add.w	r1, r0, #4294967295
 8000380:	d202      	bcs.n	8000388 <__udivmoddi4+0x154>
 8000382:	45a6      	cmp	lr, r4
 8000384:	f200 80bb 	bhi.w	80004fe <__udivmoddi4+0x2ca>
 8000388:	4608      	mov	r0, r1
 800038a:	eba4 040e 	sub.w	r4, r4, lr
 800038e:	ea40 4003 	orr.w	r0, r0, r3, lsl #16
 8000392:	e79c      	b.n	80002ce <__udivmoddi4+0x9a>
 8000394:	f1c6 0720 	rsb	r7, r6, #32
 8000398:	40b3      	lsls	r3, r6
 800039a:	fa22 fc07 	lsr.w	ip, r2, r7
 800039e:	ea4c 0c03 	orr.w	ip, ip, r3
 80003a2:	fa20 f407 	lsr.w	r4, r0, r7
 80003a6:	fa01 f306 	lsl.w	r3, r1, r6
 80003aa:	431c      	orrs	r4, r3
 80003ac:	40f9      	lsrs	r1, r7
 80003ae:	ea4f 491c 	mov.w	r9, ip, lsr #16
 80003b2:	fa00 f306 	lsl.w	r3, r0, r6
 80003b6:	fbb1 f8f9 	udiv	r8, r1, r9
 80003ba:	0c20      	lsrs	r0, r4, #16
 80003bc:	fa1f fe8c 	uxth.w	lr, ip
 80003c0:	fb09 1118 	mls	r1, r9, r8, r1
 80003c4:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
 80003c8:	fb08 f00e 	mul.w	r0, r8, lr
 80003cc:	4288      	cmp	r0, r1
 80003ce:	fa02 f206 	lsl.w	r2, r2, r6
 80003d2:	d90b      	bls.n	80003ec <__udivmoddi4+0x1b8>
 80003d4:	eb1c 0101 	adds.w	r1, ip, r1
 80003d8:	f108 3aff 	add.w	sl, r8, #4294967295
 80003dc:	f080 8088 	bcs.w	80004f0 <__udivmoddi4+0x2bc>
 80003e0:	4288      	cmp	r0, r1
 80003e2:	f240 8085 	bls.w	80004f0 <__udivmoddi4+0x2bc>
 80003e6:	f1a8 0802 	sub.w	r8, r8, #2
 80003ea:	4461      	add	r1, ip
 80003ec:	1a09      	subs	r1, r1, r0
 80003ee:	b2a4      	uxth	r4, r4
 80003f0:	fbb1 f0f9 	udiv	r0, r1, r9
 80003f4:	fb09 1110 	mls	r1, r9, r0, r1
 80003f8:	ea44 4101 	orr.w	r1, r4, r1, lsl #16
 80003fc:	fb00 fe0e 	mul.w	lr, r0, lr
 8000400:	458e      	cmp	lr, r1
 8000402:	d908      	bls.n	8000416 <__udivmoddi4+0x1e2>
 8000404:	eb1c 0101 	adds.w	r1, ip, r1
 8000408:	f100 34ff 	add.w	r4, r0, #4294967295
 800040c:	d26c      	bcs.n	80004e8 <__udivmoddi4+0x2b4>
 800040e:	458e      	cmp	lr, r1
 8000410:	d96a      	bls.n	80004e8 <__udivmoddi4+0x2b4>
 8000412:	3802      	subs	r0, #2
 8000414:	4461      	add	r1, ip
 8000416:	ea40 4008 	orr.w	r0, r0, r8, lsl #16
 800041a:	fba0 9402 	umull	r9, r4, r0, r2
 800041e:	eba1 010e 	sub.w	r1, r1, lr
 8000422:	42a1      	cmp	r1, r4
 8000424:	46c8      	mov	r8, r9
 8000426:	46a6      	mov	lr, r4
 8000428:	d356      	bcc.n	80004d8 <__udivmoddi4+0x2a4>
 800042a:	d053      	beq.n	80004d4 <__udivmoddi4+0x2a0>
 800042c:	b15d      	cbz	r5, 8000446 <__udivmoddi4+0x212>
 800042e:	ebb3 0208 	subs.w	r2, r3, r8
 8000432:	eb61 010e 	sbc.w	r1, r1, lr
 8000436:	fa01 f707 	lsl.w	r7, r1, r7
 800043a:	fa22 f306 	lsr.w	r3, r2, r6
 800043e:	40f1      	lsrs	r1, r6
 8000440:	431f      	orrs	r7, r3
 8000442:	e9c5 7100 	strd	r7, r1, [r5]
 8000446:	2600      	movs	r6, #0
 8000448:	4631      	mov	r1, r6
 800044a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800044e:	f1c2 0320 	rsb	r3, r2, #32
 8000452:	40d8      	lsrs	r0, r3
 8000454:	fa0c fc02 	lsl.w	ip, ip, r2
 8000458:	fa21 f303 	lsr.w	r3, r1, r3
 800045c:	4091      	lsls	r1, r2
 800045e:	4301      	orrs	r1, r0
 8000460:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000464:	fa1f fe8c 	uxth.w	lr, ip
 8000468:	fbb3 f0f7 	udiv	r0, r3, r7
 800046c:	fb07 3610 	mls	r6, r7, r0, r3
 8000470:	0c0b      	lsrs	r3, r1, #16
 8000472:	ea43 4306 	orr.w	r3, r3, r6, lsl #16
 8000476:	fb00 f60e 	mul.w	r6, r0, lr
 800047a:	429e      	cmp	r6, r3
 800047c:	fa04 f402 	lsl.w	r4, r4, r2
 8000480:	d908      	bls.n	8000494 <__udivmoddi4+0x260>
 8000482:	eb1c 0303 	adds.w	r3, ip, r3
 8000486:	f100 38ff 	add.w	r8, r0, #4294967295
 800048a:	d22f      	bcs.n	80004ec <__udivmoddi4+0x2b8>
 800048c:	429e      	cmp	r6, r3
 800048e:	d92d      	bls.n	80004ec <__udivmoddi4+0x2b8>
 8000490:	3802      	subs	r0, #2
 8000492:	4463      	add	r3, ip
 8000494:	1b9b      	subs	r3, r3, r6
 8000496:	b289      	uxth	r1, r1
 8000498:	fbb3 f6f7 	udiv	r6, r3, r7
 800049c:	fb07 3316 	mls	r3, r7, r6, r3
 80004a0:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 80004a4:	fb06 f30e 	mul.w	r3, r6, lr
 80004a8:	428b      	cmp	r3, r1
 80004aa:	d908      	bls.n	80004be <__udivmoddi4+0x28a>
 80004ac:	eb1c 0101 	adds.w	r1, ip, r1
 80004b0:	f106 38ff 	add.w	r8, r6, #4294967295
 80004b4:	d216      	bcs.n	80004e4 <__udivmoddi4+0x2b0>
 80004b6:	428b      	cmp	r3, r1
 80004b8:	d914      	bls.n	80004e4 <__udivmoddi4+0x2b0>
 80004ba:	3e02      	subs	r6, #2
 80004bc:	4461      	add	r1, ip
 80004be:	1ac9      	subs	r1, r1, r3
 80004c0:	ea46 4600 	orr.w	r6, r6, r0, lsl #16
 80004c4:	e738      	b.n	8000338 <__udivmoddi4+0x104>
 80004c6:	462e      	mov	r6, r5
 80004c8:	4628      	mov	r0, r5
 80004ca:	e705      	b.n	80002d8 <__udivmoddi4+0xa4>
 80004cc:	4606      	mov	r6, r0
 80004ce:	e6e3      	b.n	8000298 <__udivmoddi4+0x64>
 80004d0:	4618      	mov	r0, r3
 80004d2:	e6f8      	b.n	80002c6 <__udivmoddi4+0x92>
 80004d4:	454b      	cmp	r3, r9
 80004d6:	d2a9      	bcs.n	800042c <__udivmoddi4+0x1f8>
 80004d8:	ebb9 0802 	subs.w	r8, r9, r2
 80004dc:	eb64 0e0c 	sbc.w	lr, r4, ip
 80004e0:	3801      	subs	r0, #1
 80004e2:	e7a3      	b.n	800042c <__udivmoddi4+0x1f8>
 80004e4:	4646      	mov	r6, r8
 80004e6:	e7ea      	b.n	80004be <__udivmoddi4+0x28a>
 80004e8:	4620      	mov	r0, r4
 80004ea:	e794      	b.n	8000416 <__udivmoddi4+0x1e2>
 80004ec:	4640      	mov	r0, r8
 80004ee:	e7d1      	b.n	8000494 <__udivmoddi4+0x260>
 80004f0:	46d0      	mov	r8, sl
 80004f2:	e77b      	b.n	80003ec <__udivmoddi4+0x1b8>
 80004f4:	3b02      	subs	r3, #2
 80004f6:	4461      	add	r1, ip
 80004f8:	e732      	b.n	8000360 <__udivmoddi4+0x12c>
 80004fa:	4630      	mov	r0, r6
 80004fc:	e709      	b.n	8000312 <__udivmoddi4+0xde>
 80004fe:	4464      	add	r4, ip
 8000500:	3802      	subs	r0, #2
 8000502:	e742      	b.n	800038a <__udivmoddi4+0x156>

08000504 <__aeabi_idiv0>:
 8000504:	4770      	bx	lr
 8000506:	bf00      	nop

08000508 <vApplicationGetIdleTaskMemory>:
/* USER CODE BEGIN GET_IDLE_TASK_MEMORY */
static StaticTask_t xIdleTaskTCBBuffer;
static StackType_t xIdleStack[configMINIMAL_STACK_SIZE];

void vApplicationGetIdleTaskMemory( StaticTask_t **ppxIdleTaskTCBBuffer, StackType_t **ppxIdleTaskStackBuffer, uint32_t *pulIdleTaskStackSize )
{
 8000508:	b480      	push	{r7}
 800050a:	b085      	sub	sp, #20
 800050c:	af00      	add	r7, sp, #0
 800050e:	60f8      	str	r0, [r7, #12]
 8000510:	60b9      	str	r1, [r7, #8]
 8000512:	607a      	str	r2, [r7, #4]
  *ppxIdleTaskTCBBuffer = &xIdleTaskTCBBuffer;
 8000514:	68fb      	ldr	r3, [r7, #12]
 8000516:	4a07      	ldr	r2, [pc, #28]	; (8000534 <vApplicationGetIdleTaskMemory+0x2c>)
 8000518:	601a      	str	r2, [r3, #0]
  *ppxIdleTaskStackBuffer = &xIdleStack[0];
 800051a:	68bb      	ldr	r3, [r7, #8]
 800051c:	4a06      	ldr	r2, [pc, #24]	; (8000538 <vApplicationGetIdleTaskMemory+0x30>)
 800051e:	601a      	str	r2, [r3, #0]
  *pulIdleTaskStackSize = configMINIMAL_STACK_SIZE;
 8000520:	687b      	ldr	r3, [r7, #4]
 8000522:	2280      	movs	r2, #128	; 0x80
 8000524:	601a      	str	r2, [r3, #0]
  /* place for user code */
}
 8000526:	bf00      	nop
 8000528:	3714      	adds	r7, #20
 800052a:	46bd      	mov	sp, r7
 800052c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000530:	4770      	bx	lr
 8000532:	bf00      	nop
 8000534:	20000090 	.word	0x20000090
 8000538:	20000144 	.word	0x20000144

0800053c <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 800053c:	b580      	push	{r7, lr}
 800053e:	b082      	sub	sp, #8
 8000540:	af02      	add	r7, sp, #8
  /* USER CODE BEGIN 1 */
  ledStatus.isOn		= 0;
 8000542:	4b1e      	ldr	r3, [pc, #120]	; (80005bc <main+0x80>)
 8000544:	2200      	movs	r2, #0
 8000546:	701a      	strb	r2, [r3, #0]
  ledStatus.blinkInt	= 250;
 8000548:	4b1c      	ldr	r3, [pc, #112]	; (80005bc <main+0x80>)
 800054a:	22fa      	movs	r2, #250	; 0xfa
 800054c:	605a      	str	r2, [r3, #4]
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 800054e:	f000 fba9 	bl	8000ca4 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8000552:	f000 f84b 	bl	80005ec <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8000556:	f000 f8d3 	bl	8000700 <MX_GPIO_Init>
  MX_USART2_UART_Init();
 800055a:	f000 f8a7 	bl	80006ac <MX_USART2_UART_Init>
  /* USER CODE BEGIN 2 */
  /*		Queue create 		*/
  rxQueueHandler = xQueueCreate(QUEUE_SIZE, sizeof(queueItem_t));
 800055e:	2200      	movs	r2, #0
 8000560:	211a      	movs	r1, #26
 8000562:	2003      	movs	r0, #3
 8000564:	f002 f886 	bl	8002674 <xQueueGenericCreate>
 8000568:	4603      	mov	r3, r0
 800056a:	4a15      	ldr	r2, [pc, #84]	; (80005c0 <main+0x84>)
 800056c:	6013      	str	r3, [r2, #0]

  /*		Task create 		*/
  xTaskCreate(rxUartDataTask, "rxUart", 128, NULL, 2, &rxUartData);
 800056e:	4b15      	ldr	r3, [pc, #84]	; (80005c4 <main+0x88>)
 8000570:	9301      	str	r3, [sp, #4]
 8000572:	2302      	movs	r3, #2
 8000574:	9300      	str	r3, [sp, #0]
 8000576:	2300      	movs	r3, #0
 8000578:	2280      	movs	r2, #128	; 0x80
 800057a:	4913      	ldr	r1, [pc, #76]	; (80005c8 <main+0x8c>)
 800057c:	4813      	ldr	r0, [pc, #76]	; (80005cc <main+0x90>)
 800057e:	f002 fd74 	bl	800306a <xTaskCreate>
  xTaskCreate(ledControlTask, "ledCtr", 128, NULL, 1, &ledControl);
 8000582:	4b13      	ldr	r3, [pc, #76]	; (80005d0 <main+0x94>)
 8000584:	9301      	str	r3, [sp, #4]
 8000586:	2301      	movs	r3, #1
 8000588:	9300      	str	r3, [sp, #0]
 800058a:	2300      	movs	r3, #0
 800058c:	2280      	movs	r2, #128	; 0x80
 800058e:	4911      	ldr	r1, [pc, #68]	; (80005d4 <main+0x98>)
 8000590:	4811      	ldr	r0, [pc, #68]	; (80005d8 <main+0x9c>)
 8000592:	f002 fd6a 	bl	800306a <xTaskCreate>
  xTaskCreate(parseDataTask, "parseData", 128, NULL, 1, &parseData);
 8000596:	4b11      	ldr	r3, [pc, #68]	; (80005dc <main+0xa0>)
 8000598:	9301      	str	r3, [sp, #4]
 800059a:	2301      	movs	r3, #1
 800059c:	9300      	str	r3, [sp, #0]
 800059e:	2300      	movs	r3, #0
 80005a0:	2280      	movs	r2, #128	; 0x80
 80005a2:	490f      	ldr	r1, [pc, #60]	; (80005e0 <main+0xa4>)
 80005a4:	480f      	ldr	r0, [pc, #60]	; (80005e4 <main+0xa8>)
 80005a6:	f002 fd60 	bl	800306a <xTaskCreate>

  /*		Mutex create		*/
  xMutex = xSemaphoreCreateMutex();
 80005aa:	2001      	movs	r0, #1
 80005ac:	f002 f8d5 	bl	800275a <xQueueCreateMutex>
 80005b0:	4603      	mov	r3, r0
 80005b2:	4a0d      	ldr	r2, [pc, #52]	; (80005e8 <main+0xac>)
 80005b4:	6013      	str	r3, [r2, #0]

//  HAL_UART_Receive_IT(&huart2, &rxData, 1);
  /*		Task scheduler start 		*/
  vTaskStartScheduler();
 80005b6:	f002 fed9 	bl	800336c <vTaskStartScheduler>
  /* USER CODE END 2 */

  /* We should never get here as control is now taken by the scheduler */
  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
 80005ba:	e7fe      	b.n	80005ba <main+0x7e>
 80005bc:	2000039c 	.word	0x2000039c
 80005c0:	20000388 	.word	0x20000388
 80005c4:	20000390 	.word	0x20000390
 80005c8:	08004bec 	.word	0x08004bec
 80005cc:	080009cd 	.word	0x080009cd
 80005d0:	20000394 	.word	0x20000394
 80005d4:	08004bf4 	.word	0x08004bf4
 80005d8:	080007a5 	.word	0x080007a5
 80005dc:	20000398 	.word	0x20000398
 80005e0:	08004bfc 	.word	0x08004bfc
 80005e4:	08000801 	.word	0x08000801
 80005e8:	2000038c 	.word	0x2000038c

080005ec <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 80005ec:	b580      	push	{r7, lr}
 80005ee:	b094      	sub	sp, #80	; 0x50
 80005f0:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 80005f2:	f107 0320 	add.w	r3, r7, #32
 80005f6:	2230      	movs	r2, #48	; 0x30
 80005f8:	2100      	movs	r1, #0
 80005fa:	4618      	mov	r0, r3
 80005fc:	f004 f93e 	bl	800487c <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8000600:	f107 030c 	add.w	r3, r7, #12
 8000604:	2200      	movs	r2, #0
 8000606:	601a      	str	r2, [r3, #0]
 8000608:	605a      	str	r2, [r3, #4]
 800060a:	609a      	str	r2, [r3, #8]
 800060c:	60da      	str	r2, [r3, #12]
 800060e:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 8000610:	2300      	movs	r3, #0
 8000612:	60bb      	str	r3, [r7, #8]
 8000614:	4b23      	ldr	r3, [pc, #140]	; (80006a4 <SystemClock_Config+0xb8>)
 8000616:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000618:	4a22      	ldr	r2, [pc, #136]	; (80006a4 <SystemClock_Config+0xb8>)
 800061a:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800061e:	6413      	str	r3, [r2, #64]	; 0x40
 8000620:	4b20      	ldr	r3, [pc, #128]	; (80006a4 <SystemClock_Config+0xb8>)
 8000622:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000624:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8000628:	60bb      	str	r3, [r7, #8]
 800062a:	68bb      	ldr	r3, [r7, #8]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE2);
 800062c:	2300      	movs	r3, #0
 800062e:	607b      	str	r3, [r7, #4]
 8000630:	4b1d      	ldr	r3, [pc, #116]	; (80006a8 <SystemClock_Config+0xbc>)
 8000632:	681b      	ldr	r3, [r3, #0]
 8000634:	f423 4340 	bic.w	r3, r3, #49152	; 0xc000
 8000638:	4a1b      	ldr	r2, [pc, #108]	; (80006a8 <SystemClock_Config+0xbc>)
 800063a:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 800063e:	6013      	str	r3, [r2, #0]
 8000640:	4b19      	ldr	r3, [pc, #100]	; (80006a8 <SystemClock_Config+0xbc>)
 8000642:	681b      	ldr	r3, [r3, #0]
 8000644:	f403 4340 	and.w	r3, r3, #49152	; 0xc000
 8000648:	607b      	str	r3, [r7, #4]
 800064a:	687b      	ldr	r3, [r7, #4]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 800064c:	2302      	movs	r3, #2
 800064e:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 8000650:	2301      	movs	r3, #1
 8000652:	62fb      	str	r3, [r7, #44]	; 0x2c
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 8000654:	2310      	movs	r3, #16
 8000656:	633b      	str	r3, [r7, #48]	; 0x30
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_NONE;
 8000658:	2300      	movs	r3, #0
 800065a:	63bb      	str	r3, [r7, #56]	; 0x38
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 800065c:	f107 0320 	add.w	r3, r7, #32
 8000660:	4618      	mov	r0, r3
 8000662:	f000 fe2f 	bl	80012c4 <HAL_RCC_OscConfig>
 8000666:	4603      	mov	r3, r0
 8000668:	2b00      	cmp	r3, #0
 800066a:	d001      	beq.n	8000670 <SystemClock_Config+0x84>
  {
    Error_Handler();
 800066c:	f000 fa40 	bl	8000af0 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8000670:	230f      	movs	r3, #15
 8000672:	60fb      	str	r3, [r7, #12]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_HSI;
 8000674:	2300      	movs	r3, #0
 8000676:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8000678:	2300      	movs	r3, #0
 800067a:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 800067c:	2300      	movs	r3, #0
 800067e:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8000680:	2300      	movs	r3, #0
 8000682:	61fb      	str	r3, [r7, #28]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_0) != HAL_OK)
 8000684:	f107 030c 	add.w	r3, r7, #12
 8000688:	2100      	movs	r1, #0
 800068a:	4618      	mov	r0, r3
 800068c:	f001 f892 	bl	80017b4 <HAL_RCC_ClockConfig>
 8000690:	4603      	mov	r3, r0
 8000692:	2b00      	cmp	r3, #0
 8000694:	d001      	beq.n	800069a <SystemClock_Config+0xae>
  {
    Error_Handler();
 8000696:	f000 fa2b 	bl	8000af0 <Error_Handler>
  }
}
 800069a:	bf00      	nop
 800069c:	3750      	adds	r7, #80	; 0x50
 800069e:	46bd      	mov	sp, r7
 80006a0:	bd80      	pop	{r7, pc}
 80006a2:	bf00      	nop
 80006a4:	40023800 	.word	0x40023800
 80006a8:	40007000 	.word	0x40007000

080006ac <MX_USART2_UART_Init>:
  * @brief USART2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART2_UART_Init(void)
{
 80006ac:	b580      	push	{r7, lr}
 80006ae:	af00      	add	r7, sp, #0
  /* USER CODE END USART2_Init 0 */

  /* USER CODE BEGIN USART2_Init 1 */

  /* USER CODE END USART2_Init 1 */
  huart2.Instance = USART2;
 80006b0:	4b11      	ldr	r3, [pc, #68]	; (80006f8 <MX_USART2_UART_Init+0x4c>)
 80006b2:	4a12      	ldr	r2, [pc, #72]	; (80006fc <MX_USART2_UART_Init+0x50>)
 80006b4:	601a      	str	r2, [r3, #0]
  huart2.Init.BaudRate = 115200;
 80006b6:	4b10      	ldr	r3, [pc, #64]	; (80006f8 <MX_USART2_UART_Init+0x4c>)
 80006b8:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 80006bc:	605a      	str	r2, [r3, #4]
  huart2.Init.WordLength = UART_WORDLENGTH_8B;
 80006be:	4b0e      	ldr	r3, [pc, #56]	; (80006f8 <MX_USART2_UART_Init+0x4c>)
 80006c0:	2200      	movs	r2, #0
 80006c2:	609a      	str	r2, [r3, #8]
  huart2.Init.StopBits = UART_STOPBITS_1;
 80006c4:	4b0c      	ldr	r3, [pc, #48]	; (80006f8 <MX_USART2_UART_Init+0x4c>)
 80006c6:	2200      	movs	r2, #0
 80006c8:	60da      	str	r2, [r3, #12]
  huart2.Init.Parity = UART_PARITY_NONE;
 80006ca:	4b0b      	ldr	r3, [pc, #44]	; (80006f8 <MX_USART2_UART_Init+0x4c>)
 80006cc:	2200      	movs	r2, #0
 80006ce:	611a      	str	r2, [r3, #16]
  huart2.Init.Mode = UART_MODE_TX_RX;
 80006d0:	4b09      	ldr	r3, [pc, #36]	; (80006f8 <MX_USART2_UART_Init+0x4c>)
 80006d2:	220c      	movs	r2, #12
 80006d4:	615a      	str	r2, [r3, #20]
  huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 80006d6:	4b08      	ldr	r3, [pc, #32]	; (80006f8 <MX_USART2_UART_Init+0x4c>)
 80006d8:	2200      	movs	r2, #0
 80006da:	619a      	str	r2, [r3, #24]
  huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 80006dc:	4b06      	ldr	r3, [pc, #24]	; (80006f8 <MX_USART2_UART_Init+0x4c>)
 80006de:	2200      	movs	r2, #0
 80006e0:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart2) != HAL_OK)
 80006e2:	4805      	ldr	r0, [pc, #20]	; (80006f8 <MX_USART2_UART_Init+0x4c>)
 80006e4:	f001 fa46 	bl	8001b74 <HAL_UART_Init>
 80006e8:	4603      	mov	r3, r0
 80006ea:	2b00      	cmp	r3, #0
 80006ec:	d001      	beq.n	80006f2 <MX_USART2_UART_Init+0x46>
  {
    Error_Handler();
 80006ee:	f000 f9ff 	bl	8000af0 <Error_Handler>
  }
  /* USER CODE BEGIN USART2_Init 2 */

  /* USER CODE END USART2_Init 2 */

}
 80006f2:	bf00      	nop
 80006f4:	bd80      	pop	{r7, pc}
 80006f6:	bf00      	nop
 80006f8:	20000344 	.word	0x20000344
 80006fc:	40004400 	.word	0x40004400

08000700 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8000700:	b580      	push	{r7, lr}
 8000702:	b088      	sub	sp, #32
 8000704:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000706:	f107 030c 	add.w	r3, r7, #12
 800070a:	2200      	movs	r2, #0
 800070c:	601a      	str	r2, [r3, #0]
 800070e:	605a      	str	r2, [r3, #4]
 8000710:	609a      	str	r2, [r3, #8]
 8000712:	60da      	str	r2, [r3, #12]
 8000714:	611a      	str	r2, [r3, #16]
/* USER CODE BEGIN MX_GPIO_Init_1 */
/* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8000716:	2300      	movs	r3, #0
 8000718:	60bb      	str	r3, [r7, #8]
 800071a:	4b1f      	ldr	r3, [pc, #124]	; (8000798 <MX_GPIO_Init+0x98>)
 800071c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800071e:	4a1e      	ldr	r2, [pc, #120]	; (8000798 <MX_GPIO_Init+0x98>)
 8000720:	f043 0304 	orr.w	r3, r3, #4
 8000724:	6313      	str	r3, [r2, #48]	; 0x30
 8000726:	4b1c      	ldr	r3, [pc, #112]	; (8000798 <MX_GPIO_Init+0x98>)
 8000728:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800072a:	f003 0304 	and.w	r3, r3, #4
 800072e:	60bb      	str	r3, [r7, #8]
 8000730:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8000732:	2300      	movs	r3, #0
 8000734:	607b      	str	r3, [r7, #4]
 8000736:	4b18      	ldr	r3, [pc, #96]	; (8000798 <MX_GPIO_Init+0x98>)
 8000738:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800073a:	4a17      	ldr	r2, [pc, #92]	; (8000798 <MX_GPIO_Init+0x98>)
 800073c:	f043 0301 	orr.w	r3, r3, #1
 8000740:	6313      	str	r3, [r2, #48]	; 0x30
 8000742:	4b15      	ldr	r3, [pc, #84]	; (8000798 <MX_GPIO_Init+0x98>)
 8000744:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000746:	f003 0301 	and.w	r3, r3, #1
 800074a:	607b      	str	r3, [r7, #4]
 800074c:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOA, GPIO_PIN_5, GPIO_PIN_RESET);
 800074e:	2200      	movs	r2, #0
 8000750:	2120      	movs	r1, #32
 8000752:	4812      	ldr	r0, [pc, #72]	; (800079c <MX_GPIO_Init+0x9c>)
 8000754:	f000 fd82 	bl	800125c <HAL_GPIO_WritePin>

  /*Configure GPIO pin : PC13 */
  GPIO_InitStruct.Pin = GPIO_PIN_13;
 8000758:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 800075c:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 800075e:	2300      	movs	r3, #0
 8000760:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000762:	2300      	movs	r3, #0
 8000764:	617b      	str	r3, [r7, #20]
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8000766:	f107 030c 	add.w	r3, r7, #12
 800076a:	4619      	mov	r1, r3
 800076c:	480c      	ldr	r0, [pc, #48]	; (80007a0 <MX_GPIO_Init+0xa0>)
 800076e:	f000 fbf1 	bl	8000f54 <HAL_GPIO_Init>

  /*Configure GPIO pin : PA5 */
  GPIO_InitStruct.Pin = GPIO_PIN_5;
 8000772:	2320      	movs	r3, #32
 8000774:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000776:	2301      	movs	r3, #1
 8000778:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800077a:	2300      	movs	r3, #0
 800077c:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800077e:	2300      	movs	r3, #0
 8000780:	61bb      	str	r3, [r7, #24]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000782:	f107 030c 	add.w	r3, r7, #12
 8000786:	4619      	mov	r1, r3
 8000788:	4804      	ldr	r0, [pc, #16]	; (800079c <MX_GPIO_Init+0x9c>)
 800078a:	f000 fbe3 	bl	8000f54 <HAL_GPIO_Init>

/* USER CODE BEGIN MX_GPIO_Init_2 */
/* USER CODE END MX_GPIO_Init_2 */
}
 800078e:	bf00      	nop
 8000790:	3720      	adds	r7, #32
 8000792:	46bd      	mov	sp, r7
 8000794:	bd80      	pop	{r7, pc}
 8000796:	bf00      	nop
 8000798:	40023800 	.word	0x40023800
 800079c:	40020000 	.word	0x40020000
 80007a0:	40020800 	.word	0x40020800

080007a4 <ledControlTask>:

/* USER CODE BEGIN 4 */

void			ledControlTask(void* argument)
{
 80007a4:	b580      	push	{r7, lr}
 80007a6:	b084      	sub	sp, #16
 80007a8:	af00      	add	r7, sp, #0
 80007aa:	6078      	str	r0, [r7, #4]
	TickType_t tick;

	tick = 1000;
 80007ac:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 80007b0:	60fb      	str	r3, [r7, #12]
	for (;;)
	{
		if (ledStatus.blinkInt > 15 && ledStatus.isOn)
 80007b2:	4b11      	ldr	r3, [pc, #68]	; (80007f8 <ledControlTask+0x54>)
 80007b4:	685b      	ldr	r3, [r3, #4]
 80007b6:	2b0f      	cmp	r3, #15
 80007b8:	d90b      	bls.n	80007d2 <ledControlTask+0x2e>
 80007ba:	4b0f      	ldr	r3, [pc, #60]	; (80007f8 <ledControlTask+0x54>)
 80007bc:	781b      	ldrb	r3, [r3, #0]
 80007be:	2b00      	cmp	r3, #0
 80007c0:	d007      	beq.n	80007d2 <ledControlTask+0x2e>
		{
			HAL_GPIO_TogglePin(GPIOA, GPIO_PIN_5);
 80007c2:	2120      	movs	r1, #32
 80007c4:	480d      	ldr	r0, [pc, #52]	; (80007fc <ledControlTask+0x58>)
 80007c6:	f000 fd62 	bl	800128e <HAL_GPIO_TogglePin>
			tick = ledStatus.blinkInt;
 80007ca:	4b0b      	ldr	r3, [pc, #44]	; (80007f8 <ledControlTask+0x54>)
 80007cc:	685b      	ldr	r3, [r3, #4]
 80007ce:	60fb      	str	r3, [r7, #12]
 80007d0:	e00e      	b.n	80007f0 <ledControlTask+0x4c>
		}
		else
		{
			if (ledStatus.isOn)
 80007d2:	4b09      	ldr	r3, [pc, #36]	; (80007f8 <ledControlTask+0x54>)
 80007d4:	781b      	ldrb	r3, [r3, #0]
 80007d6:	2b00      	cmp	r3, #0
 80007d8:	d005      	beq.n	80007e6 <ledControlTask+0x42>
				HAL_GPIO_WritePin(GPIOA, GPIO_PIN_5, 1);
 80007da:	2201      	movs	r2, #1
 80007dc:	2120      	movs	r1, #32
 80007de:	4807      	ldr	r0, [pc, #28]	; (80007fc <ledControlTask+0x58>)
 80007e0:	f000 fd3c 	bl	800125c <HAL_GPIO_WritePin>
 80007e4:	e004      	b.n	80007f0 <ledControlTask+0x4c>
			else
				HAL_GPIO_WritePin(GPIOA, GPIO_PIN_5, 0);
 80007e6:	2200      	movs	r2, #0
 80007e8:	2120      	movs	r1, #32
 80007ea:	4804      	ldr	r0, [pc, #16]	; (80007fc <ledControlTask+0x58>)
 80007ec:	f000 fd36 	bl	800125c <HAL_GPIO_WritePin>

		}
		vTaskDelay(tick);
 80007f0:	68f8      	ldr	r0, [r7, #12]
 80007f2:	f002 fd87 	bl	8003304 <vTaskDelay>
		if (ledStatus.blinkInt > 15 && ledStatus.isOn)
 80007f6:	e7dc      	b.n	80007b2 <ledControlTask+0xe>
 80007f8:	2000039c 	.word	0x2000039c
 80007fc:	40020000 	.word	0x40020000

08000800 <parseDataTask>:
	}
}

void			parseDataTask(void* argument)
{
 8000800:	b580      	push	{r7, lr}
 8000802:	b094      	sub	sp, #80	; 0x50
 8000804:	af00      	add	r7, sp, #0
 8000806:	6078      	str	r0, [r7, #4]
	queueItem_t qElem;

	qElem.size = 0;
 8000808:	2300      	movs	r3, #0
 800080a:	f887 3031 	strb.w	r3, [r7, #49]	; 0x31
	memset(qElem.str, '\0', 25);
 800080e:	f107 0318 	add.w	r3, r7, #24
 8000812:	2219      	movs	r2, #25
 8000814:	2100      	movs	r1, #0
 8000816:	4618      	mov	r0, r3
 8000818:	f004 f830 	bl	800487c <memset>

	for (;;)
	{
		if (xSemaphoreTake(xMutex, (TickType_t)0xFFFFFFF) == 1 )
 800081c:	4b5e      	ldr	r3, [pc, #376]	; (8000998 <parseDataTask+0x198>)
 800081e:	681b      	ldr	r3, [r3, #0]
 8000820:	f06f 4170 	mvn.w	r1, #4026531840	; 0xf0000000
 8000824:	4618      	mov	r0, r3
 8000826:	f002 f98f 	bl	8002b48 <xQueueSemaphoreTake>
 800082a:	4603      	mov	r3, r0
 800082c:	2b01      	cmp	r3, #1
 800082e:	d10e      	bne.n	800084e <parseDataTask+0x4e>
		{
			xQueueReceive(rxQueueHandler, &qElem, 20);
 8000830:	4b5a      	ldr	r3, [pc, #360]	; (800099c <parseDataTask+0x19c>)
 8000832:	681b      	ldr	r3, [r3, #0]
 8000834:	f107 0118 	add.w	r1, r7, #24
 8000838:	2214      	movs	r2, #20
 800083a:	4618      	mov	r0, r3
 800083c:	f002 f8a4 	bl	8002988 <xQueueReceive>
			xSemaphoreGive(xMutex);
 8000840:	4b55      	ldr	r3, [pc, #340]	; (8000998 <parseDataTask+0x198>)
 8000842:	6818      	ldr	r0, [r3, #0]
 8000844:	2300      	movs	r3, #0
 8000846:	2200      	movs	r2, #0
 8000848:	2100      	movs	r1, #0
 800084a:	f001 ff9f 	bl	800278c <xQueueGenericSend>
		}
		if (qElem.size)
 800084e:	f897 3031 	ldrb.w	r3, [r7, #49]	; 0x31
 8000852:	2b00      	cmp	r3, #0
 8000854:	f000 809b 	beq.w	800098e <parseDataTask+0x18e>
		{
			char*	pBuff;

			while (*pBuff == ' ') pBuff++;
 8000858:	e002      	b.n	8000860 <parseDataTask+0x60>
 800085a:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800085c:	3301      	adds	r3, #1
 800085e:	64fb      	str	r3, [r7, #76]	; 0x4c
 8000860:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8000862:	781b      	ldrb	r3, [r3, #0]
 8000864:	2b20      	cmp	r3, #32
 8000866:	d0f8      	beq.n	800085a <parseDataTask+0x5a>

			pBuff = (char*) qElem.str;
 8000868:	f107 0318 	add.w	r3, r7, #24
 800086c:	64fb      	str	r3, [r7, #76]	; 0x4c
			if (!strcmp(pBuff, "LED ON"))
 800086e:	494c      	ldr	r1, [pc, #304]	; (80009a0 <parseDataTask+0x1a0>)
 8000870:	6cf8      	ldr	r0, [r7, #76]	; 0x4c
 8000872:	f7ff fcb5 	bl	80001e0 <strcmp>
 8000876:	4603      	mov	r3, r0
 8000878:	2b00      	cmp	r3, #0
 800087a:	d103      	bne.n	8000884 <parseDataTask+0x84>
			{
				ledStatus.isOn = 1;
 800087c:	4b49      	ldr	r3, [pc, #292]	; (80009a4 <parseDataTask+0x1a4>)
 800087e:	2201      	movs	r2, #1
 8000880:	701a      	strb	r2, [r3, #0]
 8000882:	e07a      	b.n	800097a <parseDataTask+0x17a>
			}
			else if (!strcmp(pBuff, "LED OFF"))
 8000884:	4948      	ldr	r1, [pc, #288]	; (80009a8 <parseDataTask+0x1a8>)
 8000886:	6cf8      	ldr	r0, [r7, #76]	; 0x4c
 8000888:	f7ff fcaa 	bl	80001e0 <strcmp>
 800088c:	4603      	mov	r3, r0
 800088e:	2b00      	cmp	r3, #0
 8000890:	d103      	bne.n	800089a <parseDataTask+0x9a>
			{
				ledStatus.isOn = 0;
 8000892:	4b44      	ldr	r3, [pc, #272]	; (80009a4 <parseDataTask+0x1a4>)
 8000894:	2200      	movs	r2, #0
 8000896:	701a      	strb	r2, [r3, #0]
 8000898:	e06f      	b.n	800097a <parseDataTask+0x17a>
			}
			else if (!strncmp(pBuff, "LED BLINK ", 10))
 800089a:	220a      	movs	r2, #10
 800089c:	4943      	ldr	r1, [pc, #268]	; (80009ac <parseDataTask+0x1ac>)
 800089e:	6cf8      	ldr	r0, [r7, #76]	; 0x4c
 80008a0:	f004 f85e 	bl	8004960 <strncmp>
 80008a4:	4603      	mov	r3, r0
 80008a6:	2b00      	cmp	r3, #0
 80008a8:	d109      	bne.n	80008be <parseDataTask+0xbe>
			{
//				+10
				ledStatus.blinkInt = atoi(pBuff + 10);
 80008aa:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80008ac:	330a      	adds	r3, #10
 80008ae:	4618      	mov	r0, r3
 80008b0:	f003 ff8c 	bl	80047cc <atoi>
 80008b4:	4603      	mov	r3, r0
 80008b6:	461a      	mov	r2, r3
 80008b8:	4b3a      	ldr	r3, [pc, #232]	; (80009a4 <parseDataTask+0x1a4>)
 80008ba:	605a      	str	r2, [r3, #4]
 80008bc:	e05d      	b.n	800097a <parseDataTask+0x17a>
			}
			else if (!strcmp(pBuff, "STATUS"))
 80008be:	493c      	ldr	r1, [pc, #240]	; (80009b0 <parseDataTask+0x1b0>)
 80008c0:	6cf8      	ldr	r0, [r7, #76]	; 0x4c
 80008c2:	f7ff fc8d 	bl	80001e0 <strcmp>
 80008c6:	4603      	mov	r3, r0
 80008c8:	2b00      	cmp	r3, #0
 80008ca:	d156      	bne.n	800097a <parseDataTask+0x17a>
			{
				uint8_t numb[10];
				char*	ledIs;
				char* 	str0 = "\n\r";
 80008cc:	4b39      	ldr	r3, [pc, #228]	; (80009b4 <parseDataTask+0x1b4>)
 80008ce:	64bb      	str	r3, [r7, #72]	; 0x48
				char* 	str1 = "Status :\n\r";
 80008d0:	4b39      	ldr	r3, [pc, #228]	; (80009b8 <parseDataTask+0x1b8>)
 80008d2:	647b      	str	r3, [r7, #68]	; 0x44
				char* 	str2 = "led is : on\n\r";
 80008d4:	4b39      	ldr	r3, [pc, #228]	; (80009bc <parseDataTask+0x1bc>)
 80008d6:	643b      	str	r3, [r7, #64]	; 0x40
				char* 	str3 = "led is : off\n\r";
 80008d8:	4b39      	ldr	r3, [pc, #228]	; (80009c0 <parseDataTask+0x1c0>)
 80008da:	63fb      	str	r3, [r7, #60]	; 0x3c
				char* 	str4 = "blink interval : ";
 80008dc:	4b39      	ldr	r3, [pc, #228]	; (80009c4 <parseDataTask+0x1c4>)
 80008de:	63bb      	str	r3, [r7, #56]	; 0x38

				memset(numb, '\0', 10);
 80008e0:	f107 030c 	add.w	r3, r7, #12
 80008e4:	220a      	movs	r2, #10
 80008e6:	2100      	movs	r1, #0
 80008e8:	4618      	mov	r0, r3
 80008ea:	f003 ffc7 	bl	800487c <memset>
				ledIs = (ledStatus.isOn) ? str2 : str3;
 80008ee:	4b2d      	ldr	r3, [pc, #180]	; (80009a4 <parseDataTask+0x1a4>)
 80008f0:	781b      	ldrb	r3, [r3, #0]
 80008f2:	2b00      	cmp	r3, #0
 80008f4:	d001      	beq.n	80008fa <parseDataTask+0xfa>
 80008f6:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 80008f8:	e000      	b.n	80008fc <parseDataTask+0xfc>
 80008fa:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80008fc:	637b      	str	r3, [r7, #52]	; 0x34
				itoa((int)ledStatus.blinkInt, (char*)numb, 10);
 80008fe:	4b29      	ldr	r3, [pc, #164]	; (80009a4 <parseDataTask+0x1a4>)
 8000900:	685b      	ldr	r3, [r3, #4]
 8000902:	4618      	mov	r0, r3
 8000904:	f107 030c 	add.w	r3, r7, #12
 8000908:	220a      	movs	r2, #10
 800090a:	4619      	mov	r1, r3
 800090c:	f003 ffa4 	bl	8004858 <itoa>

				HAL_UART_Transmit(&huart2, (uint8_t *)str1, strlen (str1), 20);
 8000910:	6c78      	ldr	r0, [r7, #68]	; 0x44
 8000912:	f7ff fc6f 	bl	80001f4 <strlen>
 8000916:	4603      	mov	r3, r0
 8000918:	b29a      	uxth	r2, r3
 800091a:	2314      	movs	r3, #20
 800091c:	6c79      	ldr	r1, [r7, #68]	; 0x44
 800091e:	482a      	ldr	r0, [pc, #168]	; (80009c8 <parseDataTask+0x1c8>)
 8000920:	f001 f975 	bl	8001c0e <HAL_UART_Transmit>
				HAL_UART_Transmit(&huart2, (uint8_t *)ledIs, strlen (ledIs), 20);
 8000924:	6b78      	ldr	r0, [r7, #52]	; 0x34
 8000926:	f7ff fc65 	bl	80001f4 <strlen>
 800092a:	4603      	mov	r3, r0
 800092c:	b29a      	uxth	r2, r3
 800092e:	2314      	movs	r3, #20
 8000930:	6b79      	ldr	r1, [r7, #52]	; 0x34
 8000932:	4825      	ldr	r0, [pc, #148]	; (80009c8 <parseDataTask+0x1c8>)
 8000934:	f001 f96b 	bl	8001c0e <HAL_UART_Transmit>
				HAL_UART_Transmit(&huart2, (uint8_t *)str4, strlen (str4), 20);
 8000938:	6bb8      	ldr	r0, [r7, #56]	; 0x38
 800093a:	f7ff fc5b 	bl	80001f4 <strlen>
 800093e:	4603      	mov	r3, r0
 8000940:	b29a      	uxth	r2, r3
 8000942:	2314      	movs	r3, #20
 8000944:	6bb9      	ldr	r1, [r7, #56]	; 0x38
 8000946:	4820      	ldr	r0, [pc, #128]	; (80009c8 <parseDataTask+0x1c8>)
 8000948:	f001 f961 	bl	8001c0e <HAL_UART_Transmit>
				HAL_UART_Transmit(&huart2, (uint8_t *)numb, strlen ((const char*)numb), 20);
 800094c:	f107 030c 	add.w	r3, r7, #12
 8000950:	4618      	mov	r0, r3
 8000952:	f7ff fc4f 	bl	80001f4 <strlen>
 8000956:	4603      	mov	r3, r0
 8000958:	b29a      	uxth	r2, r3
 800095a:	f107 010c 	add.w	r1, r7, #12
 800095e:	2314      	movs	r3, #20
 8000960:	4819      	ldr	r0, [pc, #100]	; (80009c8 <parseDataTask+0x1c8>)
 8000962:	f001 f954 	bl	8001c0e <HAL_UART_Transmit>
				HAL_UART_Transmit(&huart2, (uint8_t *)str0, strlen (str0), 20);
 8000966:	6cb8      	ldr	r0, [r7, #72]	; 0x48
 8000968:	f7ff fc44 	bl	80001f4 <strlen>
 800096c:	4603      	mov	r3, r0
 800096e:	b29a      	uxth	r2, r3
 8000970:	2314      	movs	r3, #20
 8000972:	6cb9      	ldr	r1, [r7, #72]	; 0x48
 8000974:	4814      	ldr	r0, [pc, #80]	; (80009c8 <parseDataTask+0x1c8>)
 8000976:	f001 f94a 	bl	8001c0e <HAL_UART_Transmit>
			}
			qElem.size = 0;
 800097a:	2300      	movs	r3, #0
 800097c:	f887 3031 	strb.w	r3, [r7, #49]	; 0x31
			memset(qElem.str, '\0', 25);
 8000980:	f107 0318 	add.w	r3, r7, #24
 8000984:	2219      	movs	r2, #25
 8000986:	2100      	movs	r1, #0
 8000988:	4618      	mov	r0, r3
 800098a:	f003 ff77 	bl	800487c <memset>
		}
		vTaskDelay(3000);
 800098e:	f640 30b8 	movw	r0, #3000	; 0xbb8
 8000992:	f002 fcb7 	bl	8003304 <vTaskDelay>
		if (xSemaphoreTake(xMutex, (TickType_t)0xFFFFFFF) == 1 )
 8000996:	e741      	b.n	800081c <parseDataTask+0x1c>
 8000998:	2000038c 	.word	0x2000038c
 800099c:	20000388 	.word	0x20000388
 80009a0:	08004c08 	.word	0x08004c08
 80009a4:	2000039c 	.word	0x2000039c
 80009a8:	08004c10 	.word	0x08004c10
 80009ac:	08004c18 	.word	0x08004c18
 80009b0:	08004c24 	.word	0x08004c24
 80009b4:	08004c2c 	.word	0x08004c2c
 80009b8:	08004c30 	.word	0x08004c30
 80009bc:	08004c3c 	.word	0x08004c3c
 80009c0:	08004c4c 	.word	0x08004c4c
 80009c4:	08004c5c 	.word	0x08004c5c
 80009c8:	20000344 	.word	0x20000344

080009cc <rxUartDataTask>:
	}
}

void	rxUartDataTask(void* argument)
{
 80009cc:	b580      	push	{r7, lr}
 80009ce:	b092      	sub	sp, #72	; 0x48
 80009d0:	af00      	add	r7, sp, #0
 80009d2:	6078      	str	r0, [r7, #4]
	uint8_t sym;
	uint8_t itter;
	uint8_t buff[20];

	itter	= 0;
 80009d4:	2300      	movs	r3, #0
 80009d6:	f887 3047 	strb.w	r3, [r7, #71]	; 0x47
	sym 	= '\0';
 80009da:	2300      	movs	r3, #0
 80009dc:	f887 303f 	strb.w	r3, [r7, #63]	; 0x3f
	memset(buff, '\0', 20);
 80009e0:	f107 0328 	add.w	r3, r7, #40	; 0x28
 80009e4:	2214      	movs	r2, #20
 80009e6:	2100      	movs	r1, #0
 80009e8:	4618      	mov	r0, r3
 80009ea:	f003 ff47 	bl	800487c <memset>

	for (;;)
	{
		if (xSemaphoreTake(xMutex, (TickType_t)0xFFFFFFF) == 1 )
 80009ee:	4b3c      	ldr	r3, [pc, #240]	; (8000ae0 <rxUartDataTask+0x114>)
 80009f0:	681b      	ldr	r3, [r3, #0]
 80009f2:	f06f 4170 	mvn.w	r1, #4026531840	; 0xf0000000
 80009f6:	4618      	mov	r0, r3
 80009f8:	f002 f8a6 	bl	8002b48 <xQueueSemaphoreTake>
 80009fc:	4603      	mov	r3, r0
 80009fe:	2b01      	cmp	r3, #1
 8000a00:	d16a      	bne.n	8000ad8 <rxUartDataTask+0x10c>
		{
			while (HAL_UART_Receive(&huart2, &sym, sizeof(uint8_t), 500) == HAL_OK && ((sym != '\n') || (sym != '\0')))
 8000a02:	e016      	b.n	8000a32 <rxUartDataTask+0x66>
			{
				if (itter < 20 && sym != '\0' && sym != '\r')
 8000a04:	f897 3047 	ldrb.w	r3, [r7, #71]	; 0x47
 8000a08:	2b13      	cmp	r3, #19
 8000a0a:	d812      	bhi.n	8000a32 <rxUartDataTask+0x66>
 8000a0c:	f897 303f 	ldrb.w	r3, [r7, #63]	; 0x3f
 8000a10:	2b00      	cmp	r3, #0
 8000a12:	d00e      	beq.n	8000a32 <rxUartDataTask+0x66>
 8000a14:	f897 303f 	ldrb.w	r3, [r7, #63]	; 0x3f
 8000a18:	2b0d      	cmp	r3, #13
 8000a1a:	d00a      	beq.n	8000a32 <rxUartDataTask+0x66>
					buff[itter++] = sym;
 8000a1c:	f897 3047 	ldrb.w	r3, [r7, #71]	; 0x47
 8000a20:	1c5a      	adds	r2, r3, #1
 8000a22:	f887 2047 	strb.w	r2, [r7, #71]	; 0x47
 8000a26:	f897 203f 	ldrb.w	r2, [r7, #63]	; 0x3f
 8000a2a:	3348      	adds	r3, #72	; 0x48
 8000a2c:	443b      	add	r3, r7
 8000a2e:	f803 2c20 	strb.w	r2, [r3, #-32]
			while (HAL_UART_Receive(&huart2, &sym, sizeof(uint8_t), 500) == HAL_OK && ((sym != '\n') || (sym != '\0')))
 8000a32:	f107 013f 	add.w	r1, r7, #63	; 0x3f
 8000a36:	f44f 73fa 	mov.w	r3, #500	; 0x1f4
 8000a3a:	2201      	movs	r2, #1
 8000a3c:	4829      	ldr	r0, [pc, #164]	; (8000ae4 <rxUartDataTask+0x118>)
 8000a3e:	f001 f978 	bl	8001d32 <HAL_UART_Receive>
 8000a42:	4603      	mov	r3, r0
 8000a44:	2b00      	cmp	r3, #0
 8000a46:	d107      	bne.n	8000a58 <rxUartDataTask+0x8c>
 8000a48:	f897 303f 	ldrb.w	r3, [r7, #63]	; 0x3f
 8000a4c:	2b0a      	cmp	r3, #10
 8000a4e:	d1d9      	bne.n	8000a04 <rxUartDataTask+0x38>
 8000a50:	f897 303f 	ldrb.w	r3, [r7, #63]	; 0x3f
 8000a54:	2b00      	cmp	r3, #0
 8000a56:	d1d5      	bne.n	8000a04 <rxUartDataTask+0x38>
			}
			if (itter > 0)
 8000a58:	f897 3047 	ldrb.w	r3, [r7, #71]	; 0x47
 8000a5c:	2b00      	cmp	r3, #0
 8000a5e:	d034      	beq.n	8000aca <rxUartDataTask+0xfe>
			{
				queueItem_t qElem;

				qElem.size = itter;
 8000a60:	f897 3047 	ldrb.w	r3, [r7, #71]	; 0x47
 8000a64:	f887 3025 	strb.w	r3, [r7, #37]	; 0x25
				memset(qElem.str, '\0', 25);
 8000a68:	f107 030c 	add.w	r3, r7, #12
 8000a6c:	2219      	movs	r2, #25
 8000a6e:	2100      	movs	r1, #0
 8000a70:	4618      	mov	r0, r3
 8000a72:	f003 ff03 	bl	800487c <memset>
				memcpy(qElem.str, buff, itter);
 8000a76:	f897 2047 	ldrb.w	r2, [r7, #71]	; 0x47
 8000a7a:	f107 0128 	add.w	r1, r7, #40	; 0x28
 8000a7e:	f107 030c 	add.w	r3, r7, #12
 8000a82:	4618      	mov	r0, r3
 8000a84:	f003 feec 	bl	8004860 <memcpy>
				if (xQueueSend(rxQueueHandler, &qElem, 20) == pdPASS)
 8000a88:	4b17      	ldr	r3, [pc, #92]	; (8000ae8 <rxUartDataTask+0x11c>)
 8000a8a:	6818      	ldr	r0, [r3, #0]
 8000a8c:	f107 010c 	add.w	r1, r7, #12
 8000a90:	2300      	movs	r3, #0
 8000a92:	2214      	movs	r2, #20
 8000a94:	f001 fe7a 	bl	800278c <xQueueGenericSend>
 8000a98:	4603      	mov	r3, r0
 8000a9a:	2b01      	cmp	r3, #1
 8000a9c:	d10b      	bne.n	8000ab6 <rxUartDataTask+0xea>
				{
					char* str1 = "------------------\n\r";
 8000a9e:	4b13      	ldr	r3, [pc, #76]	; (8000aec <rxUartDataTask+0x120>)
 8000aa0:	643b      	str	r3, [r7, #64]	; 0x40
					HAL_UART_Transmit(&huart2, (uint8_t*)str1, strlen(str1), 20);
 8000aa2:	6c38      	ldr	r0, [r7, #64]	; 0x40
 8000aa4:	f7ff fba6 	bl	80001f4 <strlen>
 8000aa8:	4603      	mov	r3, r0
 8000aaa:	b29a      	uxth	r2, r3
 8000aac:	2314      	movs	r3, #20
 8000aae:	6c39      	ldr	r1, [r7, #64]	; 0x40
 8000ab0:	480c      	ldr	r0, [pc, #48]	; (8000ae4 <rxUartDataTask+0x118>)
 8000ab2:	f001 f8ac 	bl	8001c0e <HAL_UART_Transmit>
				}
				itter	= 0;
 8000ab6:	2300      	movs	r3, #0
 8000ab8:	f887 3047 	strb.w	r3, [r7, #71]	; 0x47
				memset(buff, '\0', 25);
 8000abc:	f107 0328 	add.w	r3, r7, #40	; 0x28
 8000ac0:	2219      	movs	r2, #25
 8000ac2:	2100      	movs	r1, #0
 8000ac4:	4618      	mov	r0, r3
 8000ac6:	f003 fed9 	bl	800487c <memset>
			}
			xSemaphoreGive(xMutex);
 8000aca:	4b05      	ldr	r3, [pc, #20]	; (8000ae0 <rxUartDataTask+0x114>)
 8000acc:	6818      	ldr	r0, [r3, #0]
 8000ace:	2300      	movs	r3, #0
 8000ad0:	2200      	movs	r2, #0
 8000ad2:	2100      	movs	r1, #0
 8000ad4:	f001 fe5a 	bl	800278c <xQueueGenericSend>
		}
		vTaskDelay(50);
 8000ad8:	2032      	movs	r0, #50	; 0x32
 8000ada:	f002 fc13 	bl	8003304 <vTaskDelay>
		if (xSemaphoreTake(xMutex, (TickType_t)0xFFFFFFF) == 1 )
 8000ade:	e786      	b.n	80009ee <rxUartDataTask+0x22>
 8000ae0:	2000038c 	.word	0x2000038c
 8000ae4:	20000344 	.word	0x20000344
 8000ae8:	20000388 	.word	0x20000388
 8000aec:	08004c70 	.word	0x08004c70

08000af0 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8000af0:	b480      	push	{r7}
 8000af2:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8000af4:	b672      	cpsid	i
}
 8000af6:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8000af8:	e7fe      	b.n	8000af8 <Error_Handler+0x8>
	...

08000afc <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8000afc:	b580      	push	{r7, lr}
 8000afe:	b082      	sub	sp, #8
 8000b00:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8000b02:	2300      	movs	r3, #0
 8000b04:	607b      	str	r3, [r7, #4]
 8000b06:	4b12      	ldr	r3, [pc, #72]	; (8000b50 <HAL_MspInit+0x54>)
 8000b08:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000b0a:	4a11      	ldr	r2, [pc, #68]	; (8000b50 <HAL_MspInit+0x54>)
 8000b0c:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8000b10:	6453      	str	r3, [r2, #68]	; 0x44
 8000b12:	4b0f      	ldr	r3, [pc, #60]	; (8000b50 <HAL_MspInit+0x54>)
 8000b14:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000b16:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8000b1a:	607b      	str	r3, [r7, #4]
 8000b1c:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8000b1e:	2300      	movs	r3, #0
 8000b20:	603b      	str	r3, [r7, #0]
 8000b22:	4b0b      	ldr	r3, [pc, #44]	; (8000b50 <HAL_MspInit+0x54>)
 8000b24:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000b26:	4a0a      	ldr	r2, [pc, #40]	; (8000b50 <HAL_MspInit+0x54>)
 8000b28:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8000b2c:	6413      	str	r3, [r2, #64]	; 0x40
 8000b2e:	4b08      	ldr	r3, [pc, #32]	; (8000b50 <HAL_MspInit+0x54>)
 8000b30:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000b32:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8000b36:	603b      	str	r3, [r7, #0]
 8000b38:	683b      	ldr	r3, [r7, #0]

  /* System interrupt init*/
  /* PendSV_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(PendSV_IRQn, 15, 0);
 8000b3a:	2200      	movs	r2, #0
 8000b3c:	210f      	movs	r1, #15
 8000b3e:	f06f 0001 	mvn.w	r0, #1
 8000b42:	f000 f9de 	bl	8000f02 <HAL_NVIC_SetPriority>

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8000b46:	bf00      	nop
 8000b48:	3708      	adds	r7, #8
 8000b4a:	46bd      	mov	sp, r7
 8000b4c:	bd80      	pop	{r7, pc}
 8000b4e:	bf00      	nop
 8000b50:	40023800 	.word	0x40023800

08000b54 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8000b54:	b580      	push	{r7, lr}
 8000b56:	b08a      	sub	sp, #40	; 0x28
 8000b58:	af00      	add	r7, sp, #0
 8000b5a:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000b5c:	f107 0314 	add.w	r3, r7, #20
 8000b60:	2200      	movs	r2, #0
 8000b62:	601a      	str	r2, [r3, #0]
 8000b64:	605a      	str	r2, [r3, #4]
 8000b66:	609a      	str	r2, [r3, #8]
 8000b68:	60da      	str	r2, [r3, #12]
 8000b6a:	611a      	str	r2, [r3, #16]
  if(huart->Instance==USART2)
 8000b6c:	687b      	ldr	r3, [r7, #4]
 8000b6e:	681b      	ldr	r3, [r3, #0]
 8000b70:	4a19      	ldr	r2, [pc, #100]	; (8000bd8 <HAL_UART_MspInit+0x84>)
 8000b72:	4293      	cmp	r3, r2
 8000b74:	d12b      	bne.n	8000bce <HAL_UART_MspInit+0x7a>
  {
  /* USER CODE BEGIN USART2_MspInit 0 */

  /* USER CODE END USART2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USART2_CLK_ENABLE();
 8000b76:	2300      	movs	r3, #0
 8000b78:	613b      	str	r3, [r7, #16]
 8000b7a:	4b18      	ldr	r3, [pc, #96]	; (8000bdc <HAL_UART_MspInit+0x88>)
 8000b7c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000b7e:	4a17      	ldr	r2, [pc, #92]	; (8000bdc <HAL_UART_MspInit+0x88>)
 8000b80:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8000b84:	6413      	str	r3, [r2, #64]	; 0x40
 8000b86:	4b15      	ldr	r3, [pc, #84]	; (8000bdc <HAL_UART_MspInit+0x88>)
 8000b88:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000b8a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8000b8e:	613b      	str	r3, [r7, #16]
 8000b90:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000b92:	2300      	movs	r3, #0
 8000b94:	60fb      	str	r3, [r7, #12]
 8000b96:	4b11      	ldr	r3, [pc, #68]	; (8000bdc <HAL_UART_MspInit+0x88>)
 8000b98:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000b9a:	4a10      	ldr	r2, [pc, #64]	; (8000bdc <HAL_UART_MspInit+0x88>)
 8000b9c:	f043 0301 	orr.w	r3, r3, #1
 8000ba0:	6313      	str	r3, [r2, #48]	; 0x30
 8000ba2:	4b0e      	ldr	r3, [pc, #56]	; (8000bdc <HAL_UART_MspInit+0x88>)
 8000ba4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000ba6:	f003 0301 	and.w	r3, r3, #1
 8000baa:	60fb      	str	r3, [r7, #12]
 8000bac:	68fb      	ldr	r3, [r7, #12]
    /**USART2 GPIO Configuration
    PA2     ------> USART2_TX
    PA3     ------> USART2_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_2|GPIO_PIN_3;
 8000bae:	230c      	movs	r3, #12
 8000bb0:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000bb2:	2302      	movs	r3, #2
 8000bb4:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000bb6:	2300      	movs	r3, #0
 8000bb8:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000bba:	2303      	movs	r3, #3
 8000bbc:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF7_USART2;
 8000bbe:	2307      	movs	r3, #7
 8000bc0:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000bc2:	f107 0314 	add.w	r3, r7, #20
 8000bc6:	4619      	mov	r1, r3
 8000bc8:	4805      	ldr	r0, [pc, #20]	; (8000be0 <HAL_UART_MspInit+0x8c>)
 8000bca:	f000 f9c3 	bl	8000f54 <HAL_GPIO_Init>
  /* USER CODE BEGIN USART2_MspInit 1 */

  /* USER CODE END USART2_MspInit 1 */
  }

}
 8000bce:	bf00      	nop
 8000bd0:	3728      	adds	r7, #40	; 0x28
 8000bd2:	46bd      	mov	sp, r7
 8000bd4:	bd80      	pop	{r7, pc}
 8000bd6:	bf00      	nop
 8000bd8:	40004400 	.word	0x40004400
 8000bdc:	40023800 	.word	0x40023800
 8000be0:	40020000 	.word	0x40020000

08000be4 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8000be4:	b480      	push	{r7}
 8000be6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8000be8:	e7fe      	b.n	8000be8 <NMI_Handler+0x4>

08000bea <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8000bea:	b480      	push	{r7}
 8000bec:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8000bee:	e7fe      	b.n	8000bee <HardFault_Handler+0x4>

08000bf0 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8000bf0:	b480      	push	{r7}
 8000bf2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8000bf4:	e7fe      	b.n	8000bf4 <MemManage_Handler+0x4>

08000bf6 <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8000bf6:	b480      	push	{r7}
 8000bf8:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8000bfa:	e7fe      	b.n	8000bfa <BusFault_Handler+0x4>

08000bfc <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8000bfc:	b480      	push	{r7}
 8000bfe:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8000c00:	e7fe      	b.n	8000c00 <UsageFault_Handler+0x4>

08000c02 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8000c02:	b480      	push	{r7}
 8000c04:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8000c06:	bf00      	nop
 8000c08:	46bd      	mov	sp, r7
 8000c0a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000c0e:	4770      	bx	lr

08000c10 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8000c10:	b580      	push	{r7, lr}
 8000c12:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8000c14:	f000 f898 	bl	8000d48 <HAL_IncTick>
#if (INCLUDE_xTaskGetSchedulerState == 1 )
  if (xTaskGetSchedulerState() != taskSCHEDULER_NOT_STARTED)
 8000c18:	f002 ffba 	bl	8003b90 <xTaskGetSchedulerState>
 8000c1c:	4603      	mov	r3, r0
 8000c1e:	2b01      	cmp	r3, #1
 8000c20:	d001      	beq.n	8000c26 <SysTick_Handler+0x16>
  {
#endif /* INCLUDE_xTaskGetSchedulerState */
  xPortSysTickHandler();
 8000c22:	f003 fb99 	bl	8004358 <xPortSysTickHandler>
  }
#endif /* INCLUDE_xTaskGetSchedulerState */
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8000c26:	bf00      	nop
 8000c28:	bd80      	pop	{r7, pc}
	...

08000c2c <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8000c2c:	b480      	push	{r7}
 8000c2e:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8000c30:	4b06      	ldr	r3, [pc, #24]	; (8000c4c <SystemInit+0x20>)
 8000c32:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8000c36:	4a05      	ldr	r2, [pc, #20]	; (8000c4c <SystemInit+0x20>)
 8000c38:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8000c3c:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8000c40:	bf00      	nop
 8000c42:	46bd      	mov	sp, r7
 8000c44:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000c48:	4770      	bx	lr
 8000c4a:	bf00      	nop
 8000c4c:	e000ed00 	.word	0xe000ed00

08000c50 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack    		 /* set stack pointer */
 8000c50:	f8df d034 	ldr.w	sp, [pc, #52]	; 8000c88 <LoopFillZerobss+0x12>

/* Copy the data segment initializers from flash to SRAM */  
  ldr r0, =_sdata
 8000c54:	480d      	ldr	r0, [pc, #52]	; (8000c8c <LoopFillZerobss+0x16>)
  ldr r1, =_edata
 8000c56:	490e      	ldr	r1, [pc, #56]	; (8000c90 <LoopFillZerobss+0x1a>)
  ldr r2, =_sidata
 8000c58:	4a0e      	ldr	r2, [pc, #56]	; (8000c94 <LoopFillZerobss+0x1e>)
  movs r3, #0
 8000c5a:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8000c5c:	e002      	b.n	8000c64 <LoopCopyDataInit>

08000c5e <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8000c5e:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8000c60:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8000c62:	3304      	adds	r3, #4

08000c64 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8000c64:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8000c66:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8000c68:	d3f9      	bcc.n	8000c5e <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8000c6a:	4a0b      	ldr	r2, [pc, #44]	; (8000c98 <LoopFillZerobss+0x22>)
  ldr r4, =_ebss
 8000c6c:	4c0b      	ldr	r4, [pc, #44]	; (8000c9c <LoopFillZerobss+0x26>)
  movs r3, #0
 8000c6e:	2300      	movs	r3, #0
  b LoopFillZerobss
 8000c70:	e001      	b.n	8000c76 <LoopFillZerobss>

08000c72 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8000c72:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8000c74:	3204      	adds	r2, #4

08000c76 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8000c76:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8000c78:	d3fb      	bcc.n	8000c72 <FillZerobss>

/* Call the clock system initialization function.*/
  bl  SystemInit   
 8000c7a:	f7ff ffd7 	bl	8000c2c <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 8000c7e:	f003 fdaf 	bl	80047e0 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 8000c82:	f7ff fc5b 	bl	800053c <main>
  bx  lr    
 8000c86:	4770      	bx	lr
  ldr   sp, =_estack    		 /* set stack pointer */
 8000c88:	20018000 	.word	0x20018000
  ldr r0, =_sdata
 8000c8c:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8000c90:	20000074 	.word	0x20000074
  ldr r2, =_sidata
 8000c94:	08004e40 	.word	0x08004e40
  ldr r2, =_sbss
 8000c98:	20000074 	.word	0x20000074
  ldr r4, =_ebss
 8000c9c:	20004104 	.word	0x20004104

08000ca0 <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8000ca0:	e7fe      	b.n	8000ca0 <ADC_IRQHandler>
	...

08000ca4 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8000ca4:	b580      	push	{r7, lr}
 8000ca6:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 8000ca8:	4b0e      	ldr	r3, [pc, #56]	; (8000ce4 <HAL_Init+0x40>)
 8000caa:	681b      	ldr	r3, [r3, #0]
 8000cac:	4a0d      	ldr	r2, [pc, #52]	; (8000ce4 <HAL_Init+0x40>)
 8000cae:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8000cb2:	6013      	str	r3, [r2, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
  __HAL_FLASH_DATA_CACHE_ENABLE();
 8000cb4:	4b0b      	ldr	r3, [pc, #44]	; (8000ce4 <HAL_Init+0x40>)
 8000cb6:	681b      	ldr	r3, [r3, #0]
 8000cb8:	4a0a      	ldr	r2, [pc, #40]	; (8000ce4 <HAL_Init+0x40>)
 8000cba:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8000cbe:	6013      	str	r3, [r2, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8000cc0:	4b08      	ldr	r3, [pc, #32]	; (8000ce4 <HAL_Init+0x40>)
 8000cc2:	681b      	ldr	r3, [r3, #0]
 8000cc4:	4a07      	ldr	r2, [pc, #28]	; (8000ce4 <HAL_Init+0x40>)
 8000cc6:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8000cca:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8000ccc:	2003      	movs	r0, #3
 8000cce:	f000 f90d 	bl	8000eec <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8000cd2:	200f      	movs	r0, #15
 8000cd4:	f000 f808 	bl	8000ce8 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8000cd8:	f7ff ff10 	bl	8000afc <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8000cdc:	2300      	movs	r3, #0
}
 8000cde:	4618      	mov	r0, r3
 8000ce0:	bd80      	pop	{r7, pc}
 8000ce2:	bf00      	nop
 8000ce4:	40023c00 	.word	0x40023c00

08000ce8 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8000ce8:	b580      	push	{r7, lr}
 8000cea:	b082      	sub	sp, #8
 8000cec:	af00      	add	r7, sp, #0
 8000cee:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8000cf0:	4b12      	ldr	r3, [pc, #72]	; (8000d3c <HAL_InitTick+0x54>)
 8000cf2:	681a      	ldr	r2, [r3, #0]
 8000cf4:	4b12      	ldr	r3, [pc, #72]	; (8000d40 <HAL_InitTick+0x58>)
 8000cf6:	781b      	ldrb	r3, [r3, #0]
 8000cf8:	4619      	mov	r1, r3
 8000cfa:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8000cfe:	fbb3 f3f1 	udiv	r3, r3, r1
 8000d02:	fbb2 f3f3 	udiv	r3, r2, r3
 8000d06:	4618      	mov	r0, r3
 8000d08:	f000 f917 	bl	8000f3a <HAL_SYSTICK_Config>
 8000d0c:	4603      	mov	r3, r0
 8000d0e:	2b00      	cmp	r3, #0
 8000d10:	d001      	beq.n	8000d16 <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 8000d12:	2301      	movs	r3, #1
 8000d14:	e00e      	b.n	8000d34 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8000d16:	687b      	ldr	r3, [r7, #4]
 8000d18:	2b0f      	cmp	r3, #15
 8000d1a:	d80a      	bhi.n	8000d32 <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8000d1c:	2200      	movs	r2, #0
 8000d1e:	6879      	ldr	r1, [r7, #4]
 8000d20:	f04f 30ff 	mov.w	r0, #4294967295
 8000d24:	f000 f8ed 	bl	8000f02 <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8000d28:	4a06      	ldr	r2, [pc, #24]	; (8000d44 <HAL_InitTick+0x5c>)
 8000d2a:	687b      	ldr	r3, [r7, #4]
 8000d2c:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 8000d2e:	2300      	movs	r3, #0
 8000d30:	e000      	b.n	8000d34 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 8000d32:	2301      	movs	r3, #1
}
 8000d34:	4618      	mov	r0, r3
 8000d36:	3708      	adds	r7, #8
 8000d38:	46bd      	mov	sp, r7
 8000d3a:	bd80      	pop	{r7, pc}
 8000d3c:	20000000 	.word	0x20000000
 8000d40:	20000008 	.word	0x20000008
 8000d44:	20000004 	.word	0x20000004

08000d48 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8000d48:	b480      	push	{r7}
 8000d4a:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8000d4c:	4b06      	ldr	r3, [pc, #24]	; (8000d68 <HAL_IncTick+0x20>)
 8000d4e:	781b      	ldrb	r3, [r3, #0]
 8000d50:	461a      	mov	r2, r3
 8000d52:	4b06      	ldr	r3, [pc, #24]	; (8000d6c <HAL_IncTick+0x24>)
 8000d54:	681b      	ldr	r3, [r3, #0]
 8000d56:	4413      	add	r3, r2
 8000d58:	4a04      	ldr	r2, [pc, #16]	; (8000d6c <HAL_IncTick+0x24>)
 8000d5a:	6013      	str	r3, [r2, #0]
}
 8000d5c:	bf00      	nop
 8000d5e:	46bd      	mov	sp, r7
 8000d60:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000d64:	4770      	bx	lr
 8000d66:	bf00      	nop
 8000d68:	20000008 	.word	0x20000008
 8000d6c:	200003a4 	.word	0x200003a4

08000d70 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8000d70:	b480      	push	{r7}
 8000d72:	af00      	add	r7, sp, #0
  return uwTick;
 8000d74:	4b03      	ldr	r3, [pc, #12]	; (8000d84 <HAL_GetTick+0x14>)
 8000d76:	681b      	ldr	r3, [r3, #0]
}
 8000d78:	4618      	mov	r0, r3
 8000d7a:	46bd      	mov	sp, r7
 8000d7c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000d80:	4770      	bx	lr
 8000d82:	bf00      	nop
 8000d84:	200003a4 	.word	0x200003a4

08000d88 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8000d88:	b480      	push	{r7}
 8000d8a:	b085      	sub	sp, #20
 8000d8c:	af00      	add	r7, sp, #0
 8000d8e:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8000d90:	687b      	ldr	r3, [r7, #4]
 8000d92:	f003 0307 	and.w	r3, r3, #7
 8000d96:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8000d98:	4b0c      	ldr	r3, [pc, #48]	; (8000dcc <__NVIC_SetPriorityGrouping+0x44>)
 8000d9a:	68db      	ldr	r3, [r3, #12]
 8000d9c:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8000d9e:	68ba      	ldr	r2, [r7, #8]
 8000da0:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8000da4:	4013      	ands	r3, r2
 8000da6:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8000da8:	68fb      	ldr	r3, [r7, #12]
 8000daa:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8000dac:	68bb      	ldr	r3, [r7, #8]
 8000dae:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8000db0:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8000db4:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8000db8:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8000dba:	4a04      	ldr	r2, [pc, #16]	; (8000dcc <__NVIC_SetPriorityGrouping+0x44>)
 8000dbc:	68bb      	ldr	r3, [r7, #8]
 8000dbe:	60d3      	str	r3, [r2, #12]
}
 8000dc0:	bf00      	nop
 8000dc2:	3714      	adds	r7, #20
 8000dc4:	46bd      	mov	sp, r7
 8000dc6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000dca:	4770      	bx	lr
 8000dcc:	e000ed00 	.word	0xe000ed00

08000dd0 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8000dd0:	b480      	push	{r7}
 8000dd2:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8000dd4:	4b04      	ldr	r3, [pc, #16]	; (8000de8 <__NVIC_GetPriorityGrouping+0x18>)
 8000dd6:	68db      	ldr	r3, [r3, #12]
 8000dd8:	0a1b      	lsrs	r3, r3, #8
 8000dda:	f003 0307 	and.w	r3, r3, #7
}
 8000dde:	4618      	mov	r0, r3
 8000de0:	46bd      	mov	sp, r7
 8000de2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000de6:	4770      	bx	lr
 8000de8:	e000ed00 	.word	0xe000ed00

08000dec <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8000dec:	b480      	push	{r7}
 8000dee:	b083      	sub	sp, #12
 8000df0:	af00      	add	r7, sp, #0
 8000df2:	4603      	mov	r3, r0
 8000df4:	6039      	str	r1, [r7, #0]
 8000df6:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8000df8:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000dfc:	2b00      	cmp	r3, #0
 8000dfe:	db0a      	blt.n	8000e16 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000e00:	683b      	ldr	r3, [r7, #0]
 8000e02:	b2da      	uxtb	r2, r3
 8000e04:	490c      	ldr	r1, [pc, #48]	; (8000e38 <__NVIC_SetPriority+0x4c>)
 8000e06:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000e0a:	0112      	lsls	r2, r2, #4
 8000e0c:	b2d2      	uxtb	r2, r2
 8000e0e:	440b      	add	r3, r1
 8000e10:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8000e14:	e00a      	b.n	8000e2c <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000e16:	683b      	ldr	r3, [r7, #0]
 8000e18:	b2da      	uxtb	r2, r3
 8000e1a:	4908      	ldr	r1, [pc, #32]	; (8000e3c <__NVIC_SetPriority+0x50>)
 8000e1c:	79fb      	ldrb	r3, [r7, #7]
 8000e1e:	f003 030f 	and.w	r3, r3, #15
 8000e22:	3b04      	subs	r3, #4
 8000e24:	0112      	lsls	r2, r2, #4
 8000e26:	b2d2      	uxtb	r2, r2
 8000e28:	440b      	add	r3, r1
 8000e2a:	761a      	strb	r2, [r3, #24]
}
 8000e2c:	bf00      	nop
 8000e2e:	370c      	adds	r7, #12
 8000e30:	46bd      	mov	sp, r7
 8000e32:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000e36:	4770      	bx	lr
 8000e38:	e000e100 	.word	0xe000e100
 8000e3c:	e000ed00 	.word	0xe000ed00

08000e40 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8000e40:	b480      	push	{r7}
 8000e42:	b089      	sub	sp, #36	; 0x24
 8000e44:	af00      	add	r7, sp, #0
 8000e46:	60f8      	str	r0, [r7, #12]
 8000e48:	60b9      	str	r1, [r7, #8]
 8000e4a:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8000e4c:	68fb      	ldr	r3, [r7, #12]
 8000e4e:	f003 0307 	and.w	r3, r3, #7
 8000e52:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8000e54:	69fb      	ldr	r3, [r7, #28]
 8000e56:	f1c3 0307 	rsb	r3, r3, #7
 8000e5a:	2b04      	cmp	r3, #4
 8000e5c:	bf28      	it	cs
 8000e5e:	2304      	movcs	r3, #4
 8000e60:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8000e62:	69fb      	ldr	r3, [r7, #28]
 8000e64:	3304      	adds	r3, #4
 8000e66:	2b06      	cmp	r3, #6
 8000e68:	d902      	bls.n	8000e70 <NVIC_EncodePriority+0x30>
 8000e6a:	69fb      	ldr	r3, [r7, #28]
 8000e6c:	3b03      	subs	r3, #3
 8000e6e:	e000      	b.n	8000e72 <NVIC_EncodePriority+0x32>
 8000e70:	2300      	movs	r3, #0
 8000e72:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8000e74:	f04f 32ff 	mov.w	r2, #4294967295
 8000e78:	69bb      	ldr	r3, [r7, #24]
 8000e7a:	fa02 f303 	lsl.w	r3, r2, r3
 8000e7e:	43da      	mvns	r2, r3
 8000e80:	68bb      	ldr	r3, [r7, #8]
 8000e82:	401a      	ands	r2, r3
 8000e84:	697b      	ldr	r3, [r7, #20]
 8000e86:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8000e88:	f04f 31ff 	mov.w	r1, #4294967295
 8000e8c:	697b      	ldr	r3, [r7, #20]
 8000e8e:	fa01 f303 	lsl.w	r3, r1, r3
 8000e92:	43d9      	mvns	r1, r3
 8000e94:	687b      	ldr	r3, [r7, #4]
 8000e96:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8000e98:	4313      	orrs	r3, r2
         );
}
 8000e9a:	4618      	mov	r0, r3
 8000e9c:	3724      	adds	r7, #36	; 0x24
 8000e9e:	46bd      	mov	sp, r7
 8000ea0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000ea4:	4770      	bx	lr
	...

08000ea8 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8000ea8:	b580      	push	{r7, lr}
 8000eaa:	b082      	sub	sp, #8
 8000eac:	af00      	add	r7, sp, #0
 8000eae:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8000eb0:	687b      	ldr	r3, [r7, #4]
 8000eb2:	3b01      	subs	r3, #1
 8000eb4:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8000eb8:	d301      	bcc.n	8000ebe <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8000eba:	2301      	movs	r3, #1
 8000ebc:	e00f      	b.n	8000ede <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8000ebe:	4a0a      	ldr	r2, [pc, #40]	; (8000ee8 <SysTick_Config+0x40>)
 8000ec0:	687b      	ldr	r3, [r7, #4]
 8000ec2:	3b01      	subs	r3, #1
 8000ec4:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8000ec6:	210f      	movs	r1, #15
 8000ec8:	f04f 30ff 	mov.w	r0, #4294967295
 8000ecc:	f7ff ff8e 	bl	8000dec <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8000ed0:	4b05      	ldr	r3, [pc, #20]	; (8000ee8 <SysTick_Config+0x40>)
 8000ed2:	2200      	movs	r2, #0
 8000ed4:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8000ed6:	4b04      	ldr	r3, [pc, #16]	; (8000ee8 <SysTick_Config+0x40>)
 8000ed8:	2207      	movs	r2, #7
 8000eda:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8000edc:	2300      	movs	r3, #0
}
 8000ede:	4618      	mov	r0, r3
 8000ee0:	3708      	adds	r7, #8
 8000ee2:	46bd      	mov	sp, r7
 8000ee4:	bd80      	pop	{r7, pc}
 8000ee6:	bf00      	nop
 8000ee8:	e000e010 	.word	0xe000e010

08000eec <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8000eec:	b580      	push	{r7, lr}
 8000eee:	b082      	sub	sp, #8
 8000ef0:	af00      	add	r7, sp, #0
 8000ef2:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8000ef4:	6878      	ldr	r0, [r7, #4]
 8000ef6:	f7ff ff47 	bl	8000d88 <__NVIC_SetPriorityGrouping>
}
 8000efa:	bf00      	nop
 8000efc:	3708      	adds	r7, #8
 8000efe:	46bd      	mov	sp, r7
 8000f00:	bd80      	pop	{r7, pc}

08000f02 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8000f02:	b580      	push	{r7, lr}
 8000f04:	b086      	sub	sp, #24
 8000f06:	af00      	add	r7, sp, #0
 8000f08:	4603      	mov	r3, r0
 8000f0a:	60b9      	str	r1, [r7, #8]
 8000f0c:	607a      	str	r2, [r7, #4]
 8000f0e:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8000f10:	2300      	movs	r3, #0
 8000f12:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8000f14:	f7ff ff5c 	bl	8000dd0 <__NVIC_GetPriorityGrouping>
 8000f18:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8000f1a:	687a      	ldr	r2, [r7, #4]
 8000f1c:	68b9      	ldr	r1, [r7, #8]
 8000f1e:	6978      	ldr	r0, [r7, #20]
 8000f20:	f7ff ff8e 	bl	8000e40 <NVIC_EncodePriority>
 8000f24:	4602      	mov	r2, r0
 8000f26:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8000f2a:	4611      	mov	r1, r2
 8000f2c:	4618      	mov	r0, r3
 8000f2e:	f7ff ff5d 	bl	8000dec <__NVIC_SetPriority>
}
 8000f32:	bf00      	nop
 8000f34:	3718      	adds	r7, #24
 8000f36:	46bd      	mov	sp, r7
 8000f38:	bd80      	pop	{r7, pc}

08000f3a <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8000f3a:	b580      	push	{r7, lr}
 8000f3c:	b082      	sub	sp, #8
 8000f3e:	af00      	add	r7, sp, #0
 8000f40:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8000f42:	6878      	ldr	r0, [r7, #4]
 8000f44:	f7ff ffb0 	bl	8000ea8 <SysTick_Config>
 8000f48:	4603      	mov	r3, r0
}
 8000f4a:	4618      	mov	r0, r3
 8000f4c:	3708      	adds	r7, #8
 8000f4e:	46bd      	mov	sp, r7
 8000f50:	bd80      	pop	{r7, pc}
	...

08000f54 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8000f54:	b480      	push	{r7}
 8000f56:	b089      	sub	sp, #36	; 0x24
 8000f58:	af00      	add	r7, sp, #0
 8000f5a:	6078      	str	r0, [r7, #4]
 8000f5c:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 8000f5e:	2300      	movs	r3, #0
 8000f60:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 8000f62:	2300      	movs	r3, #0
 8000f64:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00U;
 8000f66:	2300      	movs	r3, #0
 8000f68:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 8000f6a:	2300      	movs	r3, #0
 8000f6c:	61fb      	str	r3, [r7, #28]
 8000f6e:	e159      	b.n	8001224 <HAL_GPIO_Init+0x2d0>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 8000f70:	2201      	movs	r2, #1
 8000f72:	69fb      	ldr	r3, [r7, #28]
 8000f74:	fa02 f303 	lsl.w	r3, r2, r3
 8000f78:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8000f7a:	683b      	ldr	r3, [r7, #0]
 8000f7c:	681b      	ldr	r3, [r3, #0]
 8000f7e:	697a      	ldr	r2, [r7, #20]
 8000f80:	4013      	ands	r3, r2
 8000f82:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 8000f84:	693a      	ldr	r2, [r7, #16]
 8000f86:	697b      	ldr	r3, [r7, #20]
 8000f88:	429a      	cmp	r2, r3
 8000f8a:	f040 8148 	bne.w	800121e <HAL_GPIO_Init+0x2ca>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 8000f8e:	683b      	ldr	r3, [r7, #0]
 8000f90:	685b      	ldr	r3, [r3, #4]
 8000f92:	f003 0303 	and.w	r3, r3, #3
 8000f96:	2b01      	cmp	r3, #1
 8000f98:	d005      	beq.n	8000fa6 <HAL_GPIO_Init+0x52>
          (GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8000f9a:	683b      	ldr	r3, [r7, #0]
 8000f9c:	685b      	ldr	r3, [r3, #4]
 8000f9e:	f003 0303 	and.w	r3, r3, #3
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 8000fa2:	2b02      	cmp	r3, #2
 8000fa4:	d130      	bne.n	8001008 <HAL_GPIO_Init+0xb4>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 8000fa6:	687b      	ldr	r3, [r7, #4]
 8000fa8:	689b      	ldr	r3, [r3, #8]
 8000faa:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 8000fac:	69fb      	ldr	r3, [r7, #28]
 8000fae:	005b      	lsls	r3, r3, #1
 8000fb0:	2203      	movs	r2, #3
 8000fb2:	fa02 f303 	lsl.w	r3, r2, r3
 8000fb6:	43db      	mvns	r3, r3
 8000fb8:	69ba      	ldr	r2, [r7, #24]
 8000fba:	4013      	ands	r3, r2
 8000fbc:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 8000fbe:	683b      	ldr	r3, [r7, #0]
 8000fc0:	68da      	ldr	r2, [r3, #12]
 8000fc2:	69fb      	ldr	r3, [r7, #28]
 8000fc4:	005b      	lsls	r3, r3, #1
 8000fc6:	fa02 f303 	lsl.w	r3, r2, r3
 8000fca:	69ba      	ldr	r2, [r7, #24]
 8000fcc:	4313      	orrs	r3, r2
 8000fce:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 8000fd0:	687b      	ldr	r3, [r7, #4]
 8000fd2:	69ba      	ldr	r2, [r7, #24]
 8000fd4:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8000fd6:	687b      	ldr	r3, [r7, #4]
 8000fd8:	685b      	ldr	r3, [r3, #4]
 8000fda:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 8000fdc:	2201      	movs	r2, #1
 8000fde:	69fb      	ldr	r3, [r7, #28]
 8000fe0:	fa02 f303 	lsl.w	r3, r2, r3
 8000fe4:	43db      	mvns	r3, r3
 8000fe6:	69ba      	ldr	r2, [r7, #24]
 8000fe8:	4013      	ands	r3, r2
 8000fea:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8000fec:	683b      	ldr	r3, [r7, #0]
 8000fee:	685b      	ldr	r3, [r3, #4]
 8000ff0:	091b      	lsrs	r3, r3, #4
 8000ff2:	f003 0201 	and.w	r2, r3, #1
 8000ff6:	69fb      	ldr	r3, [r7, #28]
 8000ff8:	fa02 f303 	lsl.w	r3, r2, r3
 8000ffc:	69ba      	ldr	r2, [r7, #24]
 8000ffe:	4313      	orrs	r3, r2
 8001000:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 8001002:	687b      	ldr	r3, [r7, #4]
 8001004:	69ba      	ldr	r2, [r7, #24]
 8001006:	605a      	str	r2, [r3, #4]
       }

      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8001008:	683b      	ldr	r3, [r7, #0]
 800100a:	685b      	ldr	r3, [r3, #4]
 800100c:	f003 0303 	and.w	r3, r3, #3
 8001010:	2b03      	cmp	r3, #3
 8001012:	d017      	beq.n	8001044 <HAL_GPIO_Init+0xf0>
      {
        /* Check the parameters */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));
        
        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 8001014:	687b      	ldr	r3, [r7, #4]
 8001016:	68db      	ldr	r3, [r3, #12]
 8001018:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 800101a:	69fb      	ldr	r3, [r7, #28]
 800101c:	005b      	lsls	r3, r3, #1
 800101e:	2203      	movs	r2, #3
 8001020:	fa02 f303 	lsl.w	r3, r2, r3
 8001024:	43db      	mvns	r3, r3
 8001026:	69ba      	ldr	r2, [r7, #24]
 8001028:	4013      	ands	r3, r2
 800102a:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 800102c:	683b      	ldr	r3, [r7, #0]
 800102e:	689a      	ldr	r2, [r3, #8]
 8001030:	69fb      	ldr	r3, [r7, #28]
 8001032:	005b      	lsls	r3, r3, #1
 8001034:	fa02 f303 	lsl.w	r3, r2, r3
 8001038:	69ba      	ldr	r2, [r7, #24]
 800103a:	4313      	orrs	r3, r2
 800103c:	61bb      	str	r3, [r7, #24]
        GPIOx->PUPDR = temp;
 800103e:	687b      	ldr	r3, [r7, #4]
 8001040:	69ba      	ldr	r2, [r7, #24]
 8001042:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8001044:	683b      	ldr	r3, [r7, #0]
 8001046:	685b      	ldr	r3, [r3, #4]
 8001048:	f003 0303 	and.w	r3, r3, #3
 800104c:	2b02      	cmp	r3, #2
 800104e:	d123      	bne.n	8001098 <HAL_GPIO_Init+0x144>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 8001050:	69fb      	ldr	r3, [r7, #28]
 8001052:	08da      	lsrs	r2, r3, #3
 8001054:	687b      	ldr	r3, [r7, #4]
 8001056:	3208      	adds	r2, #8
 8001058:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800105c:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 800105e:	69fb      	ldr	r3, [r7, #28]
 8001060:	f003 0307 	and.w	r3, r3, #7
 8001064:	009b      	lsls	r3, r3, #2
 8001066:	220f      	movs	r2, #15
 8001068:	fa02 f303 	lsl.w	r3, r2, r3
 800106c:	43db      	mvns	r3, r3
 800106e:	69ba      	ldr	r2, [r7, #24]
 8001070:	4013      	ands	r3, r2
 8001072:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 8001074:	683b      	ldr	r3, [r7, #0]
 8001076:	691a      	ldr	r2, [r3, #16]
 8001078:	69fb      	ldr	r3, [r7, #28]
 800107a:	f003 0307 	and.w	r3, r3, #7
 800107e:	009b      	lsls	r3, r3, #2
 8001080:	fa02 f303 	lsl.w	r3, r2, r3
 8001084:	69ba      	ldr	r2, [r7, #24]
 8001086:	4313      	orrs	r3, r2
 8001088:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 800108a:	69fb      	ldr	r3, [r7, #28]
 800108c:	08da      	lsrs	r2, r3, #3
 800108e:	687b      	ldr	r3, [r7, #4]
 8001090:	3208      	adds	r2, #8
 8001092:	69b9      	ldr	r1, [r7, #24]
 8001094:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8001098:	687b      	ldr	r3, [r7, #4]
 800109a:	681b      	ldr	r3, [r3, #0]
 800109c:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 800109e:	69fb      	ldr	r3, [r7, #28]
 80010a0:	005b      	lsls	r3, r3, #1
 80010a2:	2203      	movs	r2, #3
 80010a4:	fa02 f303 	lsl.w	r3, r2, r3
 80010a8:	43db      	mvns	r3, r3
 80010aa:	69ba      	ldr	r2, [r7, #24]
 80010ac:	4013      	ands	r3, r2
 80010ae:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 80010b0:	683b      	ldr	r3, [r7, #0]
 80010b2:	685b      	ldr	r3, [r3, #4]
 80010b4:	f003 0203 	and.w	r2, r3, #3
 80010b8:	69fb      	ldr	r3, [r7, #28]
 80010ba:	005b      	lsls	r3, r3, #1
 80010bc:	fa02 f303 	lsl.w	r3, r2, r3
 80010c0:	69ba      	ldr	r2, [r7, #24]
 80010c2:	4313      	orrs	r3, r2
 80010c4:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 80010c6:	687b      	ldr	r3, [r7, #4]
 80010c8:	69ba      	ldr	r2, [r7, #24]
 80010ca:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 80010cc:	683b      	ldr	r3, [r7, #0]
 80010ce:	685b      	ldr	r3, [r3, #4]
 80010d0:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 80010d4:	2b00      	cmp	r3, #0
 80010d6:	f000 80a2 	beq.w	800121e <HAL_GPIO_Init+0x2ca>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 80010da:	2300      	movs	r3, #0
 80010dc:	60fb      	str	r3, [r7, #12]
 80010de:	4b57      	ldr	r3, [pc, #348]	; (800123c <HAL_GPIO_Init+0x2e8>)
 80010e0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80010e2:	4a56      	ldr	r2, [pc, #344]	; (800123c <HAL_GPIO_Init+0x2e8>)
 80010e4:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 80010e8:	6453      	str	r3, [r2, #68]	; 0x44
 80010ea:	4b54      	ldr	r3, [pc, #336]	; (800123c <HAL_GPIO_Init+0x2e8>)
 80010ec:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80010ee:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80010f2:	60fb      	str	r3, [r7, #12]
 80010f4:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 80010f6:	4a52      	ldr	r2, [pc, #328]	; (8001240 <HAL_GPIO_Init+0x2ec>)
 80010f8:	69fb      	ldr	r3, [r7, #28]
 80010fa:	089b      	lsrs	r3, r3, #2
 80010fc:	3302      	adds	r3, #2
 80010fe:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8001102:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 8001104:	69fb      	ldr	r3, [r7, #28]
 8001106:	f003 0303 	and.w	r3, r3, #3
 800110a:	009b      	lsls	r3, r3, #2
 800110c:	220f      	movs	r2, #15
 800110e:	fa02 f303 	lsl.w	r3, r2, r3
 8001112:	43db      	mvns	r3, r3
 8001114:	69ba      	ldr	r2, [r7, #24]
 8001116:	4013      	ands	r3, r2
 8001118:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 800111a:	687b      	ldr	r3, [r7, #4]
 800111c:	4a49      	ldr	r2, [pc, #292]	; (8001244 <HAL_GPIO_Init+0x2f0>)
 800111e:	4293      	cmp	r3, r2
 8001120:	d019      	beq.n	8001156 <HAL_GPIO_Init+0x202>
 8001122:	687b      	ldr	r3, [r7, #4]
 8001124:	4a48      	ldr	r2, [pc, #288]	; (8001248 <HAL_GPIO_Init+0x2f4>)
 8001126:	4293      	cmp	r3, r2
 8001128:	d013      	beq.n	8001152 <HAL_GPIO_Init+0x1fe>
 800112a:	687b      	ldr	r3, [r7, #4]
 800112c:	4a47      	ldr	r2, [pc, #284]	; (800124c <HAL_GPIO_Init+0x2f8>)
 800112e:	4293      	cmp	r3, r2
 8001130:	d00d      	beq.n	800114e <HAL_GPIO_Init+0x1fa>
 8001132:	687b      	ldr	r3, [r7, #4]
 8001134:	4a46      	ldr	r2, [pc, #280]	; (8001250 <HAL_GPIO_Init+0x2fc>)
 8001136:	4293      	cmp	r3, r2
 8001138:	d007      	beq.n	800114a <HAL_GPIO_Init+0x1f6>
 800113a:	687b      	ldr	r3, [r7, #4]
 800113c:	4a45      	ldr	r2, [pc, #276]	; (8001254 <HAL_GPIO_Init+0x300>)
 800113e:	4293      	cmp	r3, r2
 8001140:	d101      	bne.n	8001146 <HAL_GPIO_Init+0x1f2>
 8001142:	2304      	movs	r3, #4
 8001144:	e008      	b.n	8001158 <HAL_GPIO_Init+0x204>
 8001146:	2307      	movs	r3, #7
 8001148:	e006      	b.n	8001158 <HAL_GPIO_Init+0x204>
 800114a:	2303      	movs	r3, #3
 800114c:	e004      	b.n	8001158 <HAL_GPIO_Init+0x204>
 800114e:	2302      	movs	r3, #2
 8001150:	e002      	b.n	8001158 <HAL_GPIO_Init+0x204>
 8001152:	2301      	movs	r3, #1
 8001154:	e000      	b.n	8001158 <HAL_GPIO_Init+0x204>
 8001156:	2300      	movs	r3, #0
 8001158:	69fa      	ldr	r2, [r7, #28]
 800115a:	f002 0203 	and.w	r2, r2, #3
 800115e:	0092      	lsls	r2, r2, #2
 8001160:	4093      	lsls	r3, r2
 8001162:	69ba      	ldr	r2, [r7, #24]
 8001164:	4313      	orrs	r3, r2
 8001166:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 8001168:	4935      	ldr	r1, [pc, #212]	; (8001240 <HAL_GPIO_Init+0x2ec>)
 800116a:	69fb      	ldr	r3, [r7, #28]
 800116c:	089b      	lsrs	r3, r3, #2
 800116e:	3302      	adds	r3, #2
 8001170:	69ba      	ldr	r2, [r7, #24]
 8001172:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 8001176:	4b38      	ldr	r3, [pc, #224]	; (8001258 <HAL_GPIO_Init+0x304>)
 8001178:	689b      	ldr	r3, [r3, #8]
 800117a:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 800117c:	693b      	ldr	r3, [r7, #16]
 800117e:	43db      	mvns	r3, r3
 8001180:	69ba      	ldr	r2, [r7, #24]
 8001182:	4013      	ands	r3, r2
 8001184:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 8001186:	683b      	ldr	r3, [r7, #0]
 8001188:	685b      	ldr	r3, [r3, #4]
 800118a:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 800118e:	2b00      	cmp	r3, #0
 8001190:	d003      	beq.n	800119a <HAL_GPIO_Init+0x246>
        {
          temp |= iocurrent;
 8001192:	69ba      	ldr	r2, [r7, #24]
 8001194:	693b      	ldr	r3, [r7, #16]
 8001196:	4313      	orrs	r3, r2
 8001198:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 800119a:	4a2f      	ldr	r2, [pc, #188]	; (8001258 <HAL_GPIO_Init+0x304>)
 800119c:	69bb      	ldr	r3, [r7, #24]
 800119e:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 80011a0:	4b2d      	ldr	r3, [pc, #180]	; (8001258 <HAL_GPIO_Init+0x304>)
 80011a2:	68db      	ldr	r3, [r3, #12]
 80011a4:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80011a6:	693b      	ldr	r3, [r7, #16]
 80011a8:	43db      	mvns	r3, r3
 80011aa:	69ba      	ldr	r2, [r7, #24]
 80011ac:	4013      	ands	r3, r2
 80011ae:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 80011b0:	683b      	ldr	r3, [r7, #0]
 80011b2:	685b      	ldr	r3, [r3, #4]
 80011b4:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 80011b8:	2b00      	cmp	r3, #0
 80011ba:	d003      	beq.n	80011c4 <HAL_GPIO_Init+0x270>
        {
          temp |= iocurrent;
 80011bc:	69ba      	ldr	r2, [r7, #24]
 80011be:	693b      	ldr	r3, [r7, #16]
 80011c0:	4313      	orrs	r3, r2
 80011c2:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 80011c4:	4a24      	ldr	r2, [pc, #144]	; (8001258 <HAL_GPIO_Init+0x304>)
 80011c6:	69bb      	ldr	r3, [r7, #24]
 80011c8:	60d3      	str	r3, [r2, #12]

        temp = EXTI->EMR;
 80011ca:	4b23      	ldr	r3, [pc, #140]	; (8001258 <HAL_GPIO_Init+0x304>)
 80011cc:	685b      	ldr	r3, [r3, #4]
 80011ce:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80011d0:	693b      	ldr	r3, [r7, #16]
 80011d2:	43db      	mvns	r3, r3
 80011d4:	69ba      	ldr	r2, [r7, #24]
 80011d6:	4013      	ands	r3, r2
 80011d8:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 80011da:	683b      	ldr	r3, [r7, #0]
 80011dc:	685b      	ldr	r3, [r3, #4]
 80011de:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80011e2:	2b00      	cmp	r3, #0
 80011e4:	d003      	beq.n	80011ee <HAL_GPIO_Init+0x29a>
        {
          temp |= iocurrent;
 80011e6:	69ba      	ldr	r2, [r7, #24]
 80011e8:	693b      	ldr	r3, [r7, #16]
 80011ea:	4313      	orrs	r3, r2
 80011ec:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 80011ee:	4a1a      	ldr	r2, [pc, #104]	; (8001258 <HAL_GPIO_Init+0x304>)
 80011f0:	69bb      	ldr	r3, [r7, #24]
 80011f2:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 80011f4:	4b18      	ldr	r3, [pc, #96]	; (8001258 <HAL_GPIO_Init+0x304>)
 80011f6:	681b      	ldr	r3, [r3, #0]
 80011f8:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80011fa:	693b      	ldr	r3, [r7, #16]
 80011fc:	43db      	mvns	r3, r3
 80011fe:	69ba      	ldr	r2, [r7, #24]
 8001200:	4013      	ands	r3, r2
 8001202:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 8001204:	683b      	ldr	r3, [r7, #0]
 8001206:	685b      	ldr	r3, [r3, #4]
 8001208:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 800120c:	2b00      	cmp	r3, #0
 800120e:	d003      	beq.n	8001218 <HAL_GPIO_Init+0x2c4>
        {
          temp |= iocurrent;
 8001210:	69ba      	ldr	r2, [r7, #24]
 8001212:	693b      	ldr	r3, [r7, #16]
 8001214:	4313      	orrs	r3, r2
 8001216:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 8001218:	4a0f      	ldr	r2, [pc, #60]	; (8001258 <HAL_GPIO_Init+0x304>)
 800121a:	69bb      	ldr	r3, [r7, #24]
 800121c:	6013      	str	r3, [r2, #0]
  for(position = 0U; position < GPIO_NUMBER; position++)
 800121e:	69fb      	ldr	r3, [r7, #28]
 8001220:	3301      	adds	r3, #1
 8001222:	61fb      	str	r3, [r7, #28]
 8001224:	69fb      	ldr	r3, [r7, #28]
 8001226:	2b0f      	cmp	r3, #15
 8001228:	f67f aea2 	bls.w	8000f70 <HAL_GPIO_Init+0x1c>
      }
    }
  }
}
 800122c:	bf00      	nop
 800122e:	bf00      	nop
 8001230:	3724      	adds	r7, #36	; 0x24
 8001232:	46bd      	mov	sp, r7
 8001234:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001238:	4770      	bx	lr
 800123a:	bf00      	nop
 800123c:	40023800 	.word	0x40023800
 8001240:	40013800 	.word	0x40013800
 8001244:	40020000 	.word	0x40020000
 8001248:	40020400 	.word	0x40020400
 800124c:	40020800 	.word	0x40020800
 8001250:	40020c00 	.word	0x40020c00
 8001254:	40021000 	.word	0x40021000
 8001258:	40013c00 	.word	0x40013c00

0800125c <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 800125c:	b480      	push	{r7}
 800125e:	b083      	sub	sp, #12
 8001260:	af00      	add	r7, sp, #0
 8001262:	6078      	str	r0, [r7, #4]
 8001264:	460b      	mov	r3, r1
 8001266:	807b      	strh	r3, [r7, #2]
 8001268:	4613      	mov	r3, r2
 800126a:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 800126c:	787b      	ldrb	r3, [r7, #1]
 800126e:	2b00      	cmp	r3, #0
 8001270:	d003      	beq.n	800127a <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 8001272:	887a      	ldrh	r2, [r7, #2]
 8001274:	687b      	ldr	r3, [r7, #4]
 8001276:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
  }
}
 8001278:	e003      	b.n	8001282 <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
 800127a:	887b      	ldrh	r3, [r7, #2]
 800127c:	041a      	lsls	r2, r3, #16
 800127e:	687b      	ldr	r3, [r7, #4]
 8001280:	619a      	str	r2, [r3, #24]
}
 8001282:	bf00      	nop
 8001284:	370c      	adds	r7, #12
 8001286:	46bd      	mov	sp, r7
 8001288:	f85d 7b04 	ldr.w	r7, [sp], #4
 800128c:	4770      	bx	lr

0800128e <HAL_GPIO_TogglePin>:
  *                      x can be (A..I) to select the GPIO peripheral for STM32F40XX and STM32F427X devices.
  * @param  GPIO_Pin Specifies the pins to be toggled.
  * @retval None
  */
void HAL_GPIO_TogglePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 800128e:	b480      	push	{r7}
 8001290:	b085      	sub	sp, #20
 8001292:	af00      	add	r7, sp, #0
 8001294:	6078      	str	r0, [r7, #4]
 8001296:	460b      	mov	r3, r1
 8001298:	807b      	strh	r3, [r7, #2]

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  /* get current Output Data Register value */
  odr = GPIOx->ODR;
 800129a:	687b      	ldr	r3, [r7, #4]
 800129c:	695b      	ldr	r3, [r3, #20]
 800129e:	60fb      	str	r3, [r7, #12]

  /* Set selected pins that were at low level, and reset ones that were high */
  GPIOx->BSRR = ((odr & GPIO_Pin) << GPIO_NUMBER) | (~odr & GPIO_Pin);
 80012a0:	887a      	ldrh	r2, [r7, #2]
 80012a2:	68fb      	ldr	r3, [r7, #12]
 80012a4:	4013      	ands	r3, r2
 80012a6:	041a      	lsls	r2, r3, #16
 80012a8:	68fb      	ldr	r3, [r7, #12]
 80012aa:	43d9      	mvns	r1, r3
 80012ac:	887b      	ldrh	r3, [r7, #2]
 80012ae:	400b      	ands	r3, r1
 80012b0:	431a      	orrs	r2, r3
 80012b2:	687b      	ldr	r3, [r7, #4]
 80012b4:	619a      	str	r2, [r3, #24]
}
 80012b6:	bf00      	nop
 80012b8:	3714      	adds	r7, #20
 80012ba:	46bd      	mov	sp, r7
 80012bc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80012c0:	4770      	bx	lr
	...

080012c4 <HAL_RCC_OscConfig>:
  *         supported by this API. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 80012c4:	b580      	push	{r7, lr}
 80012c6:	b086      	sub	sp, #24
 80012c8:	af00      	add	r7, sp, #0
 80012ca:	6078      	str	r0, [r7, #4]
  uint32_t tickstart, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 80012cc:	687b      	ldr	r3, [r7, #4]
 80012ce:	2b00      	cmp	r3, #0
 80012d0:	d101      	bne.n	80012d6 <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 80012d2:	2301      	movs	r3, #1
 80012d4:	e267      	b.n	80017a6 <HAL_RCC_OscConfig+0x4e2>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 80012d6:	687b      	ldr	r3, [r7, #4]
 80012d8:	681b      	ldr	r3, [r3, #0]
 80012da:	f003 0301 	and.w	r3, r3, #1
 80012de:	2b00      	cmp	r3, #0
 80012e0:	d075      	beq.n	80013ce <HAL_RCC_OscConfig+0x10a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 80012e2:	4b88      	ldr	r3, [pc, #544]	; (8001504 <HAL_RCC_OscConfig+0x240>)
 80012e4:	689b      	ldr	r3, [r3, #8]
 80012e6:	f003 030c 	and.w	r3, r3, #12
 80012ea:	2b04      	cmp	r3, #4
 80012ec:	d00c      	beq.n	8001308 <HAL_RCC_OscConfig+0x44>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 80012ee:	4b85      	ldr	r3, [pc, #532]	; (8001504 <HAL_RCC_OscConfig+0x240>)
 80012f0:	689b      	ldr	r3, [r3, #8]
 80012f2:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 80012f6:	2b08      	cmp	r3, #8
 80012f8:	d112      	bne.n	8001320 <HAL_RCC_OscConfig+0x5c>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 80012fa:	4b82      	ldr	r3, [pc, #520]	; (8001504 <HAL_RCC_OscConfig+0x240>)
 80012fc:	685b      	ldr	r3, [r3, #4]
 80012fe:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8001302:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8001306:	d10b      	bne.n	8001320 <HAL_RCC_OscConfig+0x5c>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8001308:	4b7e      	ldr	r3, [pc, #504]	; (8001504 <HAL_RCC_OscConfig+0x240>)
 800130a:	681b      	ldr	r3, [r3, #0]
 800130c:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001310:	2b00      	cmp	r3, #0
 8001312:	d05b      	beq.n	80013cc <HAL_RCC_OscConfig+0x108>
 8001314:	687b      	ldr	r3, [r7, #4]
 8001316:	685b      	ldr	r3, [r3, #4]
 8001318:	2b00      	cmp	r3, #0
 800131a:	d157      	bne.n	80013cc <HAL_RCC_OscConfig+0x108>
      {
        return HAL_ERROR;
 800131c:	2301      	movs	r3, #1
 800131e:	e242      	b.n	80017a6 <HAL_RCC_OscConfig+0x4e2>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8001320:	687b      	ldr	r3, [r7, #4]
 8001322:	685b      	ldr	r3, [r3, #4]
 8001324:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8001328:	d106      	bne.n	8001338 <HAL_RCC_OscConfig+0x74>
 800132a:	4b76      	ldr	r3, [pc, #472]	; (8001504 <HAL_RCC_OscConfig+0x240>)
 800132c:	681b      	ldr	r3, [r3, #0]
 800132e:	4a75      	ldr	r2, [pc, #468]	; (8001504 <HAL_RCC_OscConfig+0x240>)
 8001330:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8001334:	6013      	str	r3, [r2, #0]
 8001336:	e01d      	b.n	8001374 <HAL_RCC_OscConfig+0xb0>
 8001338:	687b      	ldr	r3, [r7, #4]
 800133a:	685b      	ldr	r3, [r3, #4]
 800133c:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8001340:	d10c      	bne.n	800135c <HAL_RCC_OscConfig+0x98>
 8001342:	4b70      	ldr	r3, [pc, #448]	; (8001504 <HAL_RCC_OscConfig+0x240>)
 8001344:	681b      	ldr	r3, [r3, #0]
 8001346:	4a6f      	ldr	r2, [pc, #444]	; (8001504 <HAL_RCC_OscConfig+0x240>)
 8001348:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 800134c:	6013      	str	r3, [r2, #0]
 800134e:	4b6d      	ldr	r3, [pc, #436]	; (8001504 <HAL_RCC_OscConfig+0x240>)
 8001350:	681b      	ldr	r3, [r3, #0]
 8001352:	4a6c      	ldr	r2, [pc, #432]	; (8001504 <HAL_RCC_OscConfig+0x240>)
 8001354:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8001358:	6013      	str	r3, [r2, #0]
 800135a:	e00b      	b.n	8001374 <HAL_RCC_OscConfig+0xb0>
 800135c:	4b69      	ldr	r3, [pc, #420]	; (8001504 <HAL_RCC_OscConfig+0x240>)
 800135e:	681b      	ldr	r3, [r3, #0]
 8001360:	4a68      	ldr	r2, [pc, #416]	; (8001504 <HAL_RCC_OscConfig+0x240>)
 8001362:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8001366:	6013      	str	r3, [r2, #0]
 8001368:	4b66      	ldr	r3, [pc, #408]	; (8001504 <HAL_RCC_OscConfig+0x240>)
 800136a:	681b      	ldr	r3, [r3, #0]
 800136c:	4a65      	ldr	r2, [pc, #404]	; (8001504 <HAL_RCC_OscConfig+0x240>)
 800136e:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8001372:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 8001374:	687b      	ldr	r3, [r7, #4]
 8001376:	685b      	ldr	r3, [r3, #4]
 8001378:	2b00      	cmp	r3, #0
 800137a:	d013      	beq.n	80013a4 <HAL_RCC_OscConfig+0xe0>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800137c:	f7ff fcf8 	bl	8000d70 <HAL_GetTick>
 8001380:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8001382:	e008      	b.n	8001396 <HAL_RCC_OscConfig+0xd2>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8001384:	f7ff fcf4 	bl	8000d70 <HAL_GetTick>
 8001388:	4602      	mov	r2, r0
 800138a:	693b      	ldr	r3, [r7, #16]
 800138c:	1ad3      	subs	r3, r2, r3
 800138e:	2b64      	cmp	r3, #100	; 0x64
 8001390:	d901      	bls.n	8001396 <HAL_RCC_OscConfig+0xd2>
          {
            return HAL_TIMEOUT;
 8001392:	2303      	movs	r3, #3
 8001394:	e207      	b.n	80017a6 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8001396:	4b5b      	ldr	r3, [pc, #364]	; (8001504 <HAL_RCC_OscConfig+0x240>)
 8001398:	681b      	ldr	r3, [r3, #0]
 800139a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800139e:	2b00      	cmp	r3, #0
 80013a0:	d0f0      	beq.n	8001384 <HAL_RCC_OscConfig+0xc0>
 80013a2:	e014      	b.n	80013ce <HAL_RCC_OscConfig+0x10a>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80013a4:	f7ff fce4 	bl	8000d70 <HAL_GetTick>
 80013a8:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 80013aa:	e008      	b.n	80013be <HAL_RCC_OscConfig+0xfa>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 80013ac:	f7ff fce0 	bl	8000d70 <HAL_GetTick>
 80013b0:	4602      	mov	r2, r0
 80013b2:	693b      	ldr	r3, [r7, #16]
 80013b4:	1ad3      	subs	r3, r2, r3
 80013b6:	2b64      	cmp	r3, #100	; 0x64
 80013b8:	d901      	bls.n	80013be <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 80013ba:	2303      	movs	r3, #3
 80013bc:	e1f3      	b.n	80017a6 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 80013be:	4b51      	ldr	r3, [pc, #324]	; (8001504 <HAL_RCC_OscConfig+0x240>)
 80013c0:	681b      	ldr	r3, [r3, #0]
 80013c2:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80013c6:	2b00      	cmp	r3, #0
 80013c8:	d1f0      	bne.n	80013ac <HAL_RCC_OscConfig+0xe8>
 80013ca:	e000      	b.n	80013ce <HAL_RCC_OscConfig+0x10a>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80013cc:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 80013ce:	687b      	ldr	r3, [r7, #4]
 80013d0:	681b      	ldr	r3, [r3, #0]
 80013d2:	f003 0302 	and.w	r3, r3, #2
 80013d6:	2b00      	cmp	r3, #0
 80013d8:	d063      	beq.n	80014a2 <HAL_RCC_OscConfig+0x1de>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 80013da:	4b4a      	ldr	r3, [pc, #296]	; (8001504 <HAL_RCC_OscConfig+0x240>)
 80013dc:	689b      	ldr	r3, [r3, #8]
 80013de:	f003 030c 	and.w	r3, r3, #12
 80013e2:	2b00      	cmp	r3, #0
 80013e4:	d00b      	beq.n	80013fe <HAL_RCC_OscConfig+0x13a>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 80013e6:	4b47      	ldr	r3, [pc, #284]	; (8001504 <HAL_RCC_OscConfig+0x240>)
 80013e8:	689b      	ldr	r3, [r3, #8]
 80013ea:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 80013ee:	2b08      	cmp	r3, #8
 80013f0:	d11c      	bne.n	800142c <HAL_RCC_OscConfig+0x168>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 80013f2:	4b44      	ldr	r3, [pc, #272]	; (8001504 <HAL_RCC_OscConfig+0x240>)
 80013f4:	685b      	ldr	r3, [r3, #4]
 80013f6:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 80013fa:	2b00      	cmp	r3, #0
 80013fc:	d116      	bne.n	800142c <HAL_RCC_OscConfig+0x168>
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 80013fe:	4b41      	ldr	r3, [pc, #260]	; (8001504 <HAL_RCC_OscConfig+0x240>)
 8001400:	681b      	ldr	r3, [r3, #0]
 8001402:	f003 0302 	and.w	r3, r3, #2
 8001406:	2b00      	cmp	r3, #0
 8001408:	d005      	beq.n	8001416 <HAL_RCC_OscConfig+0x152>
 800140a:	687b      	ldr	r3, [r7, #4]
 800140c:	68db      	ldr	r3, [r3, #12]
 800140e:	2b01      	cmp	r3, #1
 8001410:	d001      	beq.n	8001416 <HAL_RCC_OscConfig+0x152>
      {
        return HAL_ERROR;
 8001412:	2301      	movs	r3, #1
 8001414:	e1c7      	b.n	80017a6 <HAL_RCC_OscConfig+0x4e2>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8001416:	4b3b      	ldr	r3, [pc, #236]	; (8001504 <HAL_RCC_OscConfig+0x240>)
 8001418:	681b      	ldr	r3, [r3, #0]
 800141a:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 800141e:	687b      	ldr	r3, [r7, #4]
 8001420:	691b      	ldr	r3, [r3, #16]
 8001422:	00db      	lsls	r3, r3, #3
 8001424:	4937      	ldr	r1, [pc, #220]	; (8001504 <HAL_RCC_OscConfig+0x240>)
 8001426:	4313      	orrs	r3, r2
 8001428:	600b      	str	r3, [r1, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 800142a:	e03a      	b.n	80014a2 <HAL_RCC_OscConfig+0x1de>
      }
    }
    else
    {
      /* Check the HSI State */
      if((RCC_OscInitStruct->HSIState)!= RCC_HSI_OFF)
 800142c:	687b      	ldr	r3, [r7, #4]
 800142e:	68db      	ldr	r3, [r3, #12]
 8001430:	2b00      	cmp	r3, #0
 8001432:	d020      	beq.n	8001476 <HAL_RCC_OscConfig+0x1b2>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8001434:	4b34      	ldr	r3, [pc, #208]	; (8001508 <HAL_RCC_OscConfig+0x244>)
 8001436:	2201      	movs	r2, #1
 8001438:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800143a:	f7ff fc99 	bl	8000d70 <HAL_GetTick>
 800143e:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8001440:	e008      	b.n	8001454 <HAL_RCC_OscConfig+0x190>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8001442:	f7ff fc95 	bl	8000d70 <HAL_GetTick>
 8001446:	4602      	mov	r2, r0
 8001448:	693b      	ldr	r3, [r7, #16]
 800144a:	1ad3      	subs	r3, r2, r3
 800144c:	2b02      	cmp	r3, #2
 800144e:	d901      	bls.n	8001454 <HAL_RCC_OscConfig+0x190>
          {
            return HAL_TIMEOUT;
 8001450:	2303      	movs	r3, #3
 8001452:	e1a8      	b.n	80017a6 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8001454:	4b2b      	ldr	r3, [pc, #172]	; (8001504 <HAL_RCC_OscConfig+0x240>)
 8001456:	681b      	ldr	r3, [r3, #0]
 8001458:	f003 0302 	and.w	r3, r3, #2
 800145c:	2b00      	cmp	r3, #0
 800145e:	d0f0      	beq.n	8001442 <HAL_RCC_OscConfig+0x17e>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value. */
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8001460:	4b28      	ldr	r3, [pc, #160]	; (8001504 <HAL_RCC_OscConfig+0x240>)
 8001462:	681b      	ldr	r3, [r3, #0]
 8001464:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8001468:	687b      	ldr	r3, [r7, #4]
 800146a:	691b      	ldr	r3, [r3, #16]
 800146c:	00db      	lsls	r3, r3, #3
 800146e:	4925      	ldr	r1, [pc, #148]	; (8001504 <HAL_RCC_OscConfig+0x240>)
 8001470:	4313      	orrs	r3, r2
 8001472:	600b      	str	r3, [r1, #0]
 8001474:	e015      	b.n	80014a2 <HAL_RCC_OscConfig+0x1de>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8001476:	4b24      	ldr	r3, [pc, #144]	; (8001508 <HAL_RCC_OscConfig+0x244>)
 8001478:	2200      	movs	r2, #0
 800147a:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800147c:	f7ff fc78 	bl	8000d70 <HAL_GetTick>
 8001480:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8001482:	e008      	b.n	8001496 <HAL_RCC_OscConfig+0x1d2>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8001484:	f7ff fc74 	bl	8000d70 <HAL_GetTick>
 8001488:	4602      	mov	r2, r0
 800148a:	693b      	ldr	r3, [r7, #16]
 800148c:	1ad3      	subs	r3, r2, r3
 800148e:	2b02      	cmp	r3, #2
 8001490:	d901      	bls.n	8001496 <HAL_RCC_OscConfig+0x1d2>
          {
            return HAL_TIMEOUT;
 8001492:	2303      	movs	r3, #3
 8001494:	e187      	b.n	80017a6 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8001496:	4b1b      	ldr	r3, [pc, #108]	; (8001504 <HAL_RCC_OscConfig+0x240>)
 8001498:	681b      	ldr	r3, [r3, #0]
 800149a:	f003 0302 	and.w	r3, r3, #2
 800149e:	2b00      	cmp	r3, #0
 80014a0:	d1f0      	bne.n	8001484 <HAL_RCC_OscConfig+0x1c0>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 80014a2:	687b      	ldr	r3, [r7, #4]
 80014a4:	681b      	ldr	r3, [r3, #0]
 80014a6:	f003 0308 	and.w	r3, r3, #8
 80014aa:	2b00      	cmp	r3, #0
 80014ac:	d036      	beq.n	800151c <HAL_RCC_OscConfig+0x258>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if((RCC_OscInitStruct->LSIState)!= RCC_LSI_OFF)
 80014ae:	687b      	ldr	r3, [r7, #4]
 80014b0:	695b      	ldr	r3, [r3, #20]
 80014b2:	2b00      	cmp	r3, #0
 80014b4:	d016      	beq.n	80014e4 <HAL_RCC_OscConfig+0x220>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 80014b6:	4b15      	ldr	r3, [pc, #84]	; (800150c <HAL_RCC_OscConfig+0x248>)
 80014b8:	2201      	movs	r2, #1
 80014ba:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80014bc:	f7ff fc58 	bl	8000d70 <HAL_GetTick>
 80014c0:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 80014c2:	e008      	b.n	80014d6 <HAL_RCC_OscConfig+0x212>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 80014c4:	f7ff fc54 	bl	8000d70 <HAL_GetTick>
 80014c8:	4602      	mov	r2, r0
 80014ca:	693b      	ldr	r3, [r7, #16]
 80014cc:	1ad3      	subs	r3, r2, r3
 80014ce:	2b02      	cmp	r3, #2
 80014d0:	d901      	bls.n	80014d6 <HAL_RCC_OscConfig+0x212>
        {
          return HAL_TIMEOUT;
 80014d2:	2303      	movs	r3, #3
 80014d4:	e167      	b.n	80017a6 <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 80014d6:	4b0b      	ldr	r3, [pc, #44]	; (8001504 <HAL_RCC_OscConfig+0x240>)
 80014d8:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80014da:	f003 0302 	and.w	r3, r3, #2
 80014de:	2b00      	cmp	r3, #0
 80014e0:	d0f0      	beq.n	80014c4 <HAL_RCC_OscConfig+0x200>
 80014e2:	e01b      	b.n	800151c <HAL_RCC_OscConfig+0x258>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 80014e4:	4b09      	ldr	r3, [pc, #36]	; (800150c <HAL_RCC_OscConfig+0x248>)
 80014e6:	2200      	movs	r2, #0
 80014e8:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80014ea:	f7ff fc41 	bl	8000d70 <HAL_GetTick>
 80014ee:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 80014f0:	e00e      	b.n	8001510 <HAL_RCC_OscConfig+0x24c>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 80014f2:	f7ff fc3d 	bl	8000d70 <HAL_GetTick>
 80014f6:	4602      	mov	r2, r0
 80014f8:	693b      	ldr	r3, [r7, #16]
 80014fa:	1ad3      	subs	r3, r2, r3
 80014fc:	2b02      	cmp	r3, #2
 80014fe:	d907      	bls.n	8001510 <HAL_RCC_OscConfig+0x24c>
        {
          return HAL_TIMEOUT;
 8001500:	2303      	movs	r3, #3
 8001502:	e150      	b.n	80017a6 <HAL_RCC_OscConfig+0x4e2>
 8001504:	40023800 	.word	0x40023800
 8001508:	42470000 	.word	0x42470000
 800150c:	42470e80 	.word	0x42470e80
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8001510:	4b88      	ldr	r3, [pc, #544]	; (8001734 <HAL_RCC_OscConfig+0x470>)
 8001512:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8001514:	f003 0302 	and.w	r3, r3, #2
 8001518:	2b00      	cmp	r3, #0
 800151a:	d1ea      	bne.n	80014f2 <HAL_RCC_OscConfig+0x22e>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 800151c:	687b      	ldr	r3, [r7, #4]
 800151e:	681b      	ldr	r3, [r3, #0]
 8001520:	f003 0304 	and.w	r3, r3, #4
 8001524:	2b00      	cmp	r3, #0
 8001526:	f000 8097 	beq.w	8001658 <HAL_RCC_OscConfig+0x394>
  {
    FlagStatus       pwrclkchanged = RESET;
 800152a:	2300      	movs	r3, #0
 800152c:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 800152e:	4b81      	ldr	r3, [pc, #516]	; (8001734 <HAL_RCC_OscConfig+0x470>)
 8001530:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001532:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001536:	2b00      	cmp	r3, #0
 8001538:	d10f      	bne.n	800155a <HAL_RCC_OscConfig+0x296>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 800153a:	2300      	movs	r3, #0
 800153c:	60bb      	str	r3, [r7, #8]
 800153e:	4b7d      	ldr	r3, [pc, #500]	; (8001734 <HAL_RCC_OscConfig+0x470>)
 8001540:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001542:	4a7c      	ldr	r2, [pc, #496]	; (8001734 <HAL_RCC_OscConfig+0x470>)
 8001544:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8001548:	6413      	str	r3, [r2, #64]	; 0x40
 800154a:	4b7a      	ldr	r3, [pc, #488]	; (8001734 <HAL_RCC_OscConfig+0x470>)
 800154c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800154e:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001552:	60bb      	str	r3, [r7, #8]
 8001554:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8001556:	2301      	movs	r3, #1
 8001558:	75fb      	strb	r3, [r7, #23]
    }

    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800155a:	4b77      	ldr	r3, [pc, #476]	; (8001738 <HAL_RCC_OscConfig+0x474>)
 800155c:	681b      	ldr	r3, [r3, #0]
 800155e:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8001562:	2b00      	cmp	r3, #0
 8001564:	d118      	bne.n	8001598 <HAL_RCC_OscConfig+0x2d4>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8001566:	4b74      	ldr	r3, [pc, #464]	; (8001738 <HAL_RCC_OscConfig+0x474>)
 8001568:	681b      	ldr	r3, [r3, #0]
 800156a:	4a73      	ldr	r2, [pc, #460]	; (8001738 <HAL_RCC_OscConfig+0x474>)
 800156c:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8001570:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8001572:	f7ff fbfd 	bl	8000d70 <HAL_GetTick>
 8001576:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8001578:	e008      	b.n	800158c <HAL_RCC_OscConfig+0x2c8>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 800157a:	f7ff fbf9 	bl	8000d70 <HAL_GetTick>
 800157e:	4602      	mov	r2, r0
 8001580:	693b      	ldr	r3, [r7, #16]
 8001582:	1ad3      	subs	r3, r2, r3
 8001584:	2b02      	cmp	r3, #2
 8001586:	d901      	bls.n	800158c <HAL_RCC_OscConfig+0x2c8>
        {
          return HAL_TIMEOUT;
 8001588:	2303      	movs	r3, #3
 800158a:	e10c      	b.n	80017a6 <HAL_RCC_OscConfig+0x4e2>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800158c:	4b6a      	ldr	r3, [pc, #424]	; (8001738 <HAL_RCC_OscConfig+0x474>)
 800158e:	681b      	ldr	r3, [r3, #0]
 8001590:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8001594:	2b00      	cmp	r3, #0
 8001596:	d0f0      	beq.n	800157a <HAL_RCC_OscConfig+0x2b6>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8001598:	687b      	ldr	r3, [r7, #4]
 800159a:	689b      	ldr	r3, [r3, #8]
 800159c:	2b01      	cmp	r3, #1
 800159e:	d106      	bne.n	80015ae <HAL_RCC_OscConfig+0x2ea>
 80015a0:	4b64      	ldr	r3, [pc, #400]	; (8001734 <HAL_RCC_OscConfig+0x470>)
 80015a2:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80015a4:	4a63      	ldr	r2, [pc, #396]	; (8001734 <HAL_RCC_OscConfig+0x470>)
 80015a6:	f043 0301 	orr.w	r3, r3, #1
 80015aa:	6713      	str	r3, [r2, #112]	; 0x70
 80015ac:	e01c      	b.n	80015e8 <HAL_RCC_OscConfig+0x324>
 80015ae:	687b      	ldr	r3, [r7, #4]
 80015b0:	689b      	ldr	r3, [r3, #8]
 80015b2:	2b05      	cmp	r3, #5
 80015b4:	d10c      	bne.n	80015d0 <HAL_RCC_OscConfig+0x30c>
 80015b6:	4b5f      	ldr	r3, [pc, #380]	; (8001734 <HAL_RCC_OscConfig+0x470>)
 80015b8:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80015ba:	4a5e      	ldr	r2, [pc, #376]	; (8001734 <HAL_RCC_OscConfig+0x470>)
 80015bc:	f043 0304 	orr.w	r3, r3, #4
 80015c0:	6713      	str	r3, [r2, #112]	; 0x70
 80015c2:	4b5c      	ldr	r3, [pc, #368]	; (8001734 <HAL_RCC_OscConfig+0x470>)
 80015c4:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80015c6:	4a5b      	ldr	r2, [pc, #364]	; (8001734 <HAL_RCC_OscConfig+0x470>)
 80015c8:	f043 0301 	orr.w	r3, r3, #1
 80015cc:	6713      	str	r3, [r2, #112]	; 0x70
 80015ce:	e00b      	b.n	80015e8 <HAL_RCC_OscConfig+0x324>
 80015d0:	4b58      	ldr	r3, [pc, #352]	; (8001734 <HAL_RCC_OscConfig+0x470>)
 80015d2:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80015d4:	4a57      	ldr	r2, [pc, #348]	; (8001734 <HAL_RCC_OscConfig+0x470>)
 80015d6:	f023 0301 	bic.w	r3, r3, #1
 80015da:	6713      	str	r3, [r2, #112]	; 0x70
 80015dc:	4b55      	ldr	r3, [pc, #340]	; (8001734 <HAL_RCC_OscConfig+0x470>)
 80015de:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80015e0:	4a54      	ldr	r2, [pc, #336]	; (8001734 <HAL_RCC_OscConfig+0x470>)
 80015e2:	f023 0304 	bic.w	r3, r3, #4
 80015e6:	6713      	str	r3, [r2, #112]	; 0x70
    /* Check the LSE State */
    if((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 80015e8:	687b      	ldr	r3, [r7, #4]
 80015ea:	689b      	ldr	r3, [r3, #8]
 80015ec:	2b00      	cmp	r3, #0
 80015ee:	d015      	beq.n	800161c <HAL_RCC_OscConfig+0x358>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80015f0:	f7ff fbbe 	bl	8000d70 <HAL_GetTick>
 80015f4:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80015f6:	e00a      	b.n	800160e <HAL_RCC_OscConfig+0x34a>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 80015f8:	f7ff fbba 	bl	8000d70 <HAL_GetTick>
 80015fc:	4602      	mov	r2, r0
 80015fe:	693b      	ldr	r3, [r7, #16]
 8001600:	1ad3      	subs	r3, r2, r3
 8001602:	f241 3288 	movw	r2, #5000	; 0x1388
 8001606:	4293      	cmp	r3, r2
 8001608:	d901      	bls.n	800160e <HAL_RCC_OscConfig+0x34a>
        {
          return HAL_TIMEOUT;
 800160a:	2303      	movs	r3, #3
 800160c:	e0cb      	b.n	80017a6 <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 800160e:	4b49      	ldr	r3, [pc, #292]	; (8001734 <HAL_RCC_OscConfig+0x470>)
 8001610:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8001612:	f003 0302 	and.w	r3, r3, #2
 8001616:	2b00      	cmp	r3, #0
 8001618:	d0ee      	beq.n	80015f8 <HAL_RCC_OscConfig+0x334>
 800161a:	e014      	b.n	8001646 <HAL_RCC_OscConfig+0x382>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 800161c:	f7ff fba8 	bl	8000d70 <HAL_GetTick>
 8001620:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8001622:	e00a      	b.n	800163a <HAL_RCC_OscConfig+0x376>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8001624:	f7ff fba4 	bl	8000d70 <HAL_GetTick>
 8001628:	4602      	mov	r2, r0
 800162a:	693b      	ldr	r3, [r7, #16]
 800162c:	1ad3      	subs	r3, r2, r3
 800162e:	f241 3288 	movw	r2, #5000	; 0x1388
 8001632:	4293      	cmp	r3, r2
 8001634:	d901      	bls.n	800163a <HAL_RCC_OscConfig+0x376>
        {
          return HAL_TIMEOUT;
 8001636:	2303      	movs	r3, #3
 8001638:	e0b5      	b.n	80017a6 <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 800163a:	4b3e      	ldr	r3, [pc, #248]	; (8001734 <HAL_RCC_OscConfig+0x470>)
 800163c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800163e:	f003 0302 	and.w	r3, r3, #2
 8001642:	2b00      	cmp	r3, #0
 8001644:	d1ee      	bne.n	8001624 <HAL_RCC_OscConfig+0x360>
        }
      }
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 8001646:	7dfb      	ldrb	r3, [r7, #23]
 8001648:	2b01      	cmp	r3, #1
 800164a:	d105      	bne.n	8001658 <HAL_RCC_OscConfig+0x394>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 800164c:	4b39      	ldr	r3, [pc, #228]	; (8001734 <HAL_RCC_OscConfig+0x470>)
 800164e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001650:	4a38      	ldr	r2, [pc, #224]	; (8001734 <HAL_RCC_OscConfig+0x470>)
 8001652:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8001656:	6413      	str	r3, [r2, #64]	; 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8001658:	687b      	ldr	r3, [r7, #4]
 800165a:	699b      	ldr	r3, [r3, #24]
 800165c:	2b00      	cmp	r3, #0
 800165e:	f000 80a1 	beq.w	80017a4 <HAL_RCC_OscConfig+0x4e0>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 8001662:	4b34      	ldr	r3, [pc, #208]	; (8001734 <HAL_RCC_OscConfig+0x470>)
 8001664:	689b      	ldr	r3, [r3, #8]
 8001666:	f003 030c 	and.w	r3, r3, #12
 800166a:	2b08      	cmp	r3, #8
 800166c:	d05c      	beq.n	8001728 <HAL_RCC_OscConfig+0x464>
    {
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 800166e:	687b      	ldr	r3, [r7, #4]
 8001670:	699b      	ldr	r3, [r3, #24]
 8001672:	2b02      	cmp	r3, #2
 8001674:	d141      	bne.n	80016fa <HAL_RCC_OscConfig+0x436>
        assert_param(IS_RCC_PLLN_VALUE(RCC_OscInitStruct->PLL.PLLN));
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8001676:	4b31      	ldr	r3, [pc, #196]	; (800173c <HAL_RCC_OscConfig+0x478>)
 8001678:	2200      	movs	r2, #0
 800167a:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800167c:	f7ff fb78 	bl	8000d70 <HAL_GetTick>
 8001680:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8001682:	e008      	b.n	8001696 <HAL_RCC_OscConfig+0x3d2>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8001684:	f7ff fb74 	bl	8000d70 <HAL_GetTick>
 8001688:	4602      	mov	r2, r0
 800168a:	693b      	ldr	r3, [r7, #16]
 800168c:	1ad3      	subs	r3, r2, r3
 800168e:	2b02      	cmp	r3, #2
 8001690:	d901      	bls.n	8001696 <HAL_RCC_OscConfig+0x3d2>
          {
            return HAL_TIMEOUT;
 8001692:	2303      	movs	r3, #3
 8001694:	e087      	b.n	80017a6 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8001696:	4b27      	ldr	r3, [pc, #156]	; (8001734 <HAL_RCC_OscConfig+0x470>)
 8001698:	681b      	ldr	r3, [r3, #0]
 800169a:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800169e:	2b00      	cmp	r3, #0
 80016a0:	d1f0      	bne.n	8001684 <HAL_RCC_OscConfig+0x3c0>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 80016a2:	687b      	ldr	r3, [r7, #4]
 80016a4:	69da      	ldr	r2, [r3, #28]
 80016a6:	687b      	ldr	r3, [r7, #4]
 80016a8:	6a1b      	ldr	r3, [r3, #32]
 80016aa:	431a      	orrs	r2, r3
 80016ac:	687b      	ldr	r3, [r7, #4]
 80016ae:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80016b0:	019b      	lsls	r3, r3, #6
 80016b2:	431a      	orrs	r2, r3
 80016b4:	687b      	ldr	r3, [r7, #4]
 80016b6:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80016b8:	085b      	lsrs	r3, r3, #1
 80016ba:	3b01      	subs	r3, #1
 80016bc:	041b      	lsls	r3, r3, #16
 80016be:	431a      	orrs	r2, r3
 80016c0:	687b      	ldr	r3, [r7, #4]
 80016c2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80016c4:	061b      	lsls	r3, r3, #24
 80016c6:	491b      	ldr	r1, [pc, #108]	; (8001734 <HAL_RCC_OscConfig+0x470>)
 80016c8:	4313      	orrs	r3, r2
 80016ca:	604b      	str	r3, [r1, #4]
                                 RCC_OscInitStruct->PLL.PLLM                                                 | \
                                 (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)             | \
                                 (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos) | \
                                 (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)));
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 80016cc:	4b1b      	ldr	r3, [pc, #108]	; (800173c <HAL_RCC_OscConfig+0x478>)
 80016ce:	2201      	movs	r2, #1
 80016d0:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80016d2:	f7ff fb4d 	bl	8000d70 <HAL_GetTick>
 80016d6:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80016d8:	e008      	b.n	80016ec <HAL_RCC_OscConfig+0x428>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 80016da:	f7ff fb49 	bl	8000d70 <HAL_GetTick>
 80016de:	4602      	mov	r2, r0
 80016e0:	693b      	ldr	r3, [r7, #16]
 80016e2:	1ad3      	subs	r3, r2, r3
 80016e4:	2b02      	cmp	r3, #2
 80016e6:	d901      	bls.n	80016ec <HAL_RCC_OscConfig+0x428>
          {
            return HAL_TIMEOUT;
 80016e8:	2303      	movs	r3, #3
 80016ea:	e05c      	b.n	80017a6 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80016ec:	4b11      	ldr	r3, [pc, #68]	; (8001734 <HAL_RCC_OscConfig+0x470>)
 80016ee:	681b      	ldr	r3, [r3, #0]
 80016f0:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80016f4:	2b00      	cmp	r3, #0
 80016f6:	d0f0      	beq.n	80016da <HAL_RCC_OscConfig+0x416>
 80016f8:	e054      	b.n	80017a4 <HAL_RCC_OscConfig+0x4e0>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80016fa:	4b10      	ldr	r3, [pc, #64]	; (800173c <HAL_RCC_OscConfig+0x478>)
 80016fc:	2200      	movs	r2, #0
 80016fe:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001700:	f7ff fb36 	bl	8000d70 <HAL_GetTick>
 8001704:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8001706:	e008      	b.n	800171a <HAL_RCC_OscConfig+0x456>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8001708:	f7ff fb32 	bl	8000d70 <HAL_GetTick>
 800170c:	4602      	mov	r2, r0
 800170e:	693b      	ldr	r3, [r7, #16]
 8001710:	1ad3      	subs	r3, r2, r3
 8001712:	2b02      	cmp	r3, #2
 8001714:	d901      	bls.n	800171a <HAL_RCC_OscConfig+0x456>
          {
            return HAL_TIMEOUT;
 8001716:	2303      	movs	r3, #3
 8001718:	e045      	b.n	80017a6 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 800171a:	4b06      	ldr	r3, [pc, #24]	; (8001734 <HAL_RCC_OscConfig+0x470>)
 800171c:	681b      	ldr	r3, [r3, #0]
 800171e:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001722:	2b00      	cmp	r3, #0
 8001724:	d1f0      	bne.n	8001708 <HAL_RCC_OscConfig+0x444>
 8001726:	e03d      	b.n	80017a4 <HAL_RCC_OscConfig+0x4e0>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8001728:	687b      	ldr	r3, [r7, #4]
 800172a:	699b      	ldr	r3, [r3, #24]
 800172c:	2b01      	cmp	r3, #1
 800172e:	d107      	bne.n	8001740 <HAL_RCC_OscConfig+0x47c>
      {
        return HAL_ERROR;
 8001730:	2301      	movs	r3, #1
 8001732:	e038      	b.n	80017a6 <HAL_RCC_OscConfig+0x4e2>
 8001734:	40023800 	.word	0x40023800
 8001738:	40007000 	.word	0x40007000
 800173c:	42470060 	.word	0x42470060
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->PLLCFGR;
 8001740:	4b1b      	ldr	r3, [pc, #108]	; (80017b0 <HAL_RCC_OscConfig+0x4ec>)
 8001742:	685b      	ldr	r3, [r3, #4]
 8001744:	60fb      	str	r3, [r7, #12]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLR) != (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)))
#else
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8001746:	687b      	ldr	r3, [r7, #4]
 8001748:	699b      	ldr	r3, [r3, #24]
 800174a:	2b01      	cmp	r3, #1
 800174c:	d028      	beq.n	80017a0 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 800174e:	68fb      	ldr	r3, [r7, #12]
 8001750:	f403 0280 	and.w	r2, r3, #4194304	; 0x400000
 8001754:	687b      	ldr	r3, [r7, #4]
 8001756:	69db      	ldr	r3, [r3, #28]
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8001758:	429a      	cmp	r2, r3
 800175a:	d121      	bne.n	80017a0 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 800175c:	68fb      	ldr	r3, [r7, #12]
 800175e:	f003 023f 	and.w	r2, r3, #63	; 0x3f
 8001762:	687b      	ldr	r3, [r7, #4]
 8001764:	6a1b      	ldr	r3, [r3, #32]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8001766:	429a      	cmp	r2, r3
 8001768:	d11a      	bne.n	80017a0 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 800176a:	68fa      	ldr	r2, [r7, #12]
 800176c:	f647 73c0 	movw	r3, #32704	; 0x7fc0
 8001770:	4013      	ands	r3, r2
 8001772:	687a      	ldr	r2, [r7, #4]
 8001774:	6a52      	ldr	r2, [r2, #36]	; 0x24
 8001776:	0192      	lsls	r2, r2, #6
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8001778:	4293      	cmp	r3, r2
 800177a:	d111      	bne.n	80017a0 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 800177c:	68fb      	ldr	r3, [r7, #12]
 800177e:	f403 3240 	and.w	r2, r3, #196608	; 0x30000
 8001782:	687b      	ldr	r3, [r7, #4]
 8001784:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001786:	085b      	lsrs	r3, r3, #1
 8001788:	3b01      	subs	r3, #1
 800178a:	041b      	lsls	r3, r3, #16
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 800178c:	429a      	cmp	r2, r3
 800178e:	d107      	bne.n	80017a0 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
 8001790:	68fb      	ldr	r3, [r7, #12]
 8001792:	f003 6270 	and.w	r2, r3, #251658240	; 0xf000000
 8001796:	687b      	ldr	r3, [r7, #4]
 8001798:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800179a:	061b      	lsls	r3, r3, #24
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 800179c:	429a      	cmp	r2, r3
 800179e:	d001      	beq.n	80017a4 <HAL_RCC_OscConfig+0x4e0>
#endif
        {
          return HAL_ERROR;
 80017a0:	2301      	movs	r3, #1
 80017a2:	e000      	b.n	80017a6 <HAL_RCC_OscConfig+0x4e2>
        }
      }
    }
  }
  return HAL_OK;
 80017a4:	2300      	movs	r3, #0
}
 80017a6:	4618      	mov	r0, r3
 80017a8:	3718      	adds	r7, #24
 80017aa:	46bd      	mov	sp, r7
 80017ac:	bd80      	pop	{r7, pc}
 80017ae:	bf00      	nop
 80017b0:	40023800 	.word	0x40023800

080017b4 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 80017b4:	b580      	push	{r7, lr}
 80017b6:	b084      	sub	sp, #16
 80017b8:	af00      	add	r7, sp, #0
 80017ba:	6078      	str	r0, [r7, #4]
 80017bc:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 80017be:	687b      	ldr	r3, [r7, #4]
 80017c0:	2b00      	cmp	r3, #0
 80017c2:	d101      	bne.n	80017c8 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 80017c4:	2301      	movs	r3, #1
 80017c6:	e0cc      	b.n	8001962 <HAL_RCC_ClockConfig+0x1ae>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 80017c8:	4b68      	ldr	r3, [pc, #416]	; (800196c <HAL_RCC_ClockConfig+0x1b8>)
 80017ca:	681b      	ldr	r3, [r3, #0]
 80017cc:	f003 0307 	and.w	r3, r3, #7
 80017d0:	683a      	ldr	r2, [r7, #0]
 80017d2:	429a      	cmp	r2, r3
 80017d4:	d90c      	bls.n	80017f0 <HAL_RCC_ClockConfig+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80017d6:	4b65      	ldr	r3, [pc, #404]	; (800196c <HAL_RCC_ClockConfig+0x1b8>)
 80017d8:	683a      	ldr	r2, [r7, #0]
 80017da:	b2d2      	uxtb	r2, r2
 80017dc:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 80017de:	4b63      	ldr	r3, [pc, #396]	; (800196c <HAL_RCC_ClockConfig+0x1b8>)
 80017e0:	681b      	ldr	r3, [r3, #0]
 80017e2:	f003 0307 	and.w	r3, r3, #7
 80017e6:	683a      	ldr	r2, [r7, #0]
 80017e8:	429a      	cmp	r2, r3
 80017ea:	d001      	beq.n	80017f0 <HAL_RCC_ClockConfig+0x3c>
    {
      return HAL_ERROR;
 80017ec:	2301      	movs	r3, #1
 80017ee:	e0b8      	b.n	8001962 <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 80017f0:	687b      	ldr	r3, [r7, #4]
 80017f2:	681b      	ldr	r3, [r3, #0]
 80017f4:	f003 0302 	and.w	r3, r3, #2
 80017f8:	2b00      	cmp	r3, #0
 80017fa:	d020      	beq.n	800183e <HAL_RCC_ClockConfig+0x8a>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80017fc:	687b      	ldr	r3, [r7, #4]
 80017fe:	681b      	ldr	r3, [r3, #0]
 8001800:	f003 0304 	and.w	r3, r3, #4
 8001804:	2b00      	cmp	r3, #0
 8001806:	d005      	beq.n	8001814 <HAL_RCC_ClockConfig+0x60>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8001808:	4b59      	ldr	r3, [pc, #356]	; (8001970 <HAL_RCC_ClockConfig+0x1bc>)
 800180a:	689b      	ldr	r3, [r3, #8]
 800180c:	4a58      	ldr	r2, [pc, #352]	; (8001970 <HAL_RCC_ClockConfig+0x1bc>)
 800180e:	f443 53e0 	orr.w	r3, r3, #7168	; 0x1c00
 8001812:	6093      	str	r3, [r2, #8]
    }

    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8001814:	687b      	ldr	r3, [r7, #4]
 8001816:	681b      	ldr	r3, [r3, #0]
 8001818:	f003 0308 	and.w	r3, r3, #8
 800181c:	2b00      	cmp	r3, #0
 800181e:	d005      	beq.n	800182c <HAL_RCC_ClockConfig+0x78>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8001820:	4b53      	ldr	r3, [pc, #332]	; (8001970 <HAL_RCC_ClockConfig+0x1bc>)
 8001822:	689b      	ldr	r3, [r3, #8]
 8001824:	4a52      	ldr	r2, [pc, #328]	; (8001970 <HAL_RCC_ClockConfig+0x1bc>)
 8001826:	f443 4360 	orr.w	r3, r3, #57344	; 0xe000
 800182a:	6093      	str	r3, [r2, #8]
    }

    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 800182c:	4b50      	ldr	r3, [pc, #320]	; (8001970 <HAL_RCC_ClockConfig+0x1bc>)
 800182e:	689b      	ldr	r3, [r3, #8]
 8001830:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8001834:	687b      	ldr	r3, [r7, #4]
 8001836:	689b      	ldr	r3, [r3, #8]
 8001838:	494d      	ldr	r1, [pc, #308]	; (8001970 <HAL_RCC_ClockConfig+0x1bc>)
 800183a:	4313      	orrs	r3, r2
 800183c:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 800183e:	687b      	ldr	r3, [r7, #4]
 8001840:	681b      	ldr	r3, [r3, #0]
 8001842:	f003 0301 	and.w	r3, r3, #1
 8001846:	2b00      	cmp	r3, #0
 8001848:	d044      	beq.n	80018d4 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 800184a:	687b      	ldr	r3, [r7, #4]
 800184c:	685b      	ldr	r3, [r3, #4]
 800184e:	2b01      	cmp	r3, #1
 8001850:	d107      	bne.n	8001862 <HAL_RCC_ClockConfig+0xae>
    {
      /* Check the HSE ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8001852:	4b47      	ldr	r3, [pc, #284]	; (8001970 <HAL_RCC_ClockConfig+0x1bc>)
 8001854:	681b      	ldr	r3, [r3, #0]
 8001856:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800185a:	2b00      	cmp	r3, #0
 800185c:	d119      	bne.n	8001892 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 800185e:	2301      	movs	r3, #1
 8001860:	e07f      	b.n	8001962 <HAL_RCC_ClockConfig+0x1ae>
      }
    }
    /* PLL is selected as System Clock Source */
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8001862:	687b      	ldr	r3, [r7, #4]
 8001864:	685b      	ldr	r3, [r3, #4]
 8001866:	2b02      	cmp	r3, #2
 8001868:	d003      	beq.n	8001872 <HAL_RCC_ClockConfig+0xbe>
            (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLRCLK))
 800186a:	687b      	ldr	r3, [r7, #4]
 800186c:	685b      	ldr	r3, [r3, #4]
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 800186e:	2b03      	cmp	r3, #3
 8001870:	d107      	bne.n	8001882 <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8001872:	4b3f      	ldr	r3, [pc, #252]	; (8001970 <HAL_RCC_ClockConfig+0x1bc>)
 8001874:	681b      	ldr	r3, [r3, #0]
 8001876:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800187a:	2b00      	cmp	r3, #0
 800187c:	d109      	bne.n	8001892 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 800187e:	2301      	movs	r3, #1
 8001880:	e06f      	b.n	8001962 <HAL_RCC_ClockConfig+0x1ae>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8001882:	4b3b      	ldr	r3, [pc, #236]	; (8001970 <HAL_RCC_ClockConfig+0x1bc>)
 8001884:	681b      	ldr	r3, [r3, #0]
 8001886:	f003 0302 	and.w	r3, r3, #2
 800188a:	2b00      	cmp	r3, #0
 800188c:	d101      	bne.n	8001892 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 800188e:	2301      	movs	r3, #1
 8001890:	e067      	b.n	8001962 <HAL_RCC_ClockConfig+0x1ae>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8001892:	4b37      	ldr	r3, [pc, #220]	; (8001970 <HAL_RCC_ClockConfig+0x1bc>)
 8001894:	689b      	ldr	r3, [r3, #8]
 8001896:	f023 0203 	bic.w	r2, r3, #3
 800189a:	687b      	ldr	r3, [r7, #4]
 800189c:	685b      	ldr	r3, [r3, #4]
 800189e:	4934      	ldr	r1, [pc, #208]	; (8001970 <HAL_RCC_ClockConfig+0x1bc>)
 80018a0:	4313      	orrs	r3, r2
 80018a2:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 80018a4:	f7ff fa64 	bl	8000d70 <HAL_GetTick>
 80018a8:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80018aa:	e00a      	b.n	80018c2 <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 80018ac:	f7ff fa60 	bl	8000d70 <HAL_GetTick>
 80018b0:	4602      	mov	r2, r0
 80018b2:	68fb      	ldr	r3, [r7, #12]
 80018b4:	1ad3      	subs	r3, r2, r3
 80018b6:	f241 3288 	movw	r2, #5000	; 0x1388
 80018ba:	4293      	cmp	r3, r2
 80018bc:	d901      	bls.n	80018c2 <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 80018be:	2303      	movs	r3, #3
 80018c0:	e04f      	b.n	8001962 <HAL_RCC_ClockConfig+0x1ae>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80018c2:	4b2b      	ldr	r3, [pc, #172]	; (8001970 <HAL_RCC_ClockConfig+0x1bc>)
 80018c4:	689b      	ldr	r3, [r3, #8]
 80018c6:	f003 020c 	and.w	r2, r3, #12
 80018ca:	687b      	ldr	r3, [r7, #4]
 80018cc:	685b      	ldr	r3, [r3, #4]
 80018ce:	009b      	lsls	r3, r3, #2
 80018d0:	429a      	cmp	r2, r3
 80018d2:	d1eb      	bne.n	80018ac <HAL_RCC_ClockConfig+0xf8>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 80018d4:	4b25      	ldr	r3, [pc, #148]	; (800196c <HAL_RCC_ClockConfig+0x1b8>)
 80018d6:	681b      	ldr	r3, [r3, #0]
 80018d8:	f003 0307 	and.w	r3, r3, #7
 80018dc:	683a      	ldr	r2, [r7, #0]
 80018de:	429a      	cmp	r2, r3
 80018e0:	d20c      	bcs.n	80018fc <HAL_RCC_ClockConfig+0x148>
  {
     /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80018e2:	4b22      	ldr	r3, [pc, #136]	; (800196c <HAL_RCC_ClockConfig+0x1b8>)
 80018e4:	683a      	ldr	r2, [r7, #0]
 80018e6:	b2d2      	uxtb	r2, r2
 80018e8:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 80018ea:	4b20      	ldr	r3, [pc, #128]	; (800196c <HAL_RCC_ClockConfig+0x1b8>)
 80018ec:	681b      	ldr	r3, [r3, #0]
 80018ee:	f003 0307 	and.w	r3, r3, #7
 80018f2:	683a      	ldr	r2, [r7, #0]
 80018f4:	429a      	cmp	r2, r3
 80018f6:	d001      	beq.n	80018fc <HAL_RCC_ClockConfig+0x148>
    {
      return HAL_ERROR;
 80018f8:	2301      	movs	r3, #1
 80018fa:	e032      	b.n	8001962 <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80018fc:	687b      	ldr	r3, [r7, #4]
 80018fe:	681b      	ldr	r3, [r3, #0]
 8001900:	f003 0304 	and.w	r3, r3, #4
 8001904:	2b00      	cmp	r3, #0
 8001906:	d008      	beq.n	800191a <HAL_RCC_ClockConfig+0x166>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8001908:	4b19      	ldr	r3, [pc, #100]	; (8001970 <HAL_RCC_ClockConfig+0x1bc>)
 800190a:	689b      	ldr	r3, [r3, #8]
 800190c:	f423 52e0 	bic.w	r2, r3, #7168	; 0x1c00
 8001910:	687b      	ldr	r3, [r7, #4]
 8001912:	68db      	ldr	r3, [r3, #12]
 8001914:	4916      	ldr	r1, [pc, #88]	; (8001970 <HAL_RCC_ClockConfig+0x1bc>)
 8001916:	4313      	orrs	r3, r2
 8001918:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 800191a:	687b      	ldr	r3, [r7, #4]
 800191c:	681b      	ldr	r3, [r3, #0]
 800191e:	f003 0308 	and.w	r3, r3, #8
 8001922:	2b00      	cmp	r3, #0
 8001924:	d009      	beq.n	800193a <HAL_RCC_ClockConfig+0x186>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 8001926:	4b12      	ldr	r3, [pc, #72]	; (8001970 <HAL_RCC_ClockConfig+0x1bc>)
 8001928:	689b      	ldr	r3, [r3, #8]
 800192a:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 800192e:	687b      	ldr	r3, [r7, #4]
 8001930:	691b      	ldr	r3, [r3, #16]
 8001932:	00db      	lsls	r3, r3, #3
 8001934:	490e      	ldr	r1, [pc, #56]	; (8001970 <HAL_RCC_ClockConfig+0x1bc>)
 8001936:	4313      	orrs	r3, r2
 8001938:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
 800193a:	f000 f821 	bl	8001980 <HAL_RCC_GetSysClockFreq>
 800193e:	4602      	mov	r2, r0
 8001940:	4b0b      	ldr	r3, [pc, #44]	; (8001970 <HAL_RCC_ClockConfig+0x1bc>)
 8001942:	689b      	ldr	r3, [r3, #8]
 8001944:	091b      	lsrs	r3, r3, #4
 8001946:	f003 030f 	and.w	r3, r3, #15
 800194a:	490a      	ldr	r1, [pc, #40]	; (8001974 <HAL_RCC_ClockConfig+0x1c0>)
 800194c:	5ccb      	ldrb	r3, [r1, r3]
 800194e:	fa22 f303 	lsr.w	r3, r2, r3
 8001952:	4a09      	ldr	r2, [pc, #36]	; (8001978 <HAL_RCC_ClockConfig+0x1c4>)
 8001954:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings */
  HAL_InitTick (uwTickPrio);
 8001956:	4b09      	ldr	r3, [pc, #36]	; (800197c <HAL_RCC_ClockConfig+0x1c8>)
 8001958:	681b      	ldr	r3, [r3, #0]
 800195a:	4618      	mov	r0, r3
 800195c:	f7ff f9c4 	bl	8000ce8 <HAL_InitTick>

  return HAL_OK;
 8001960:	2300      	movs	r3, #0
}
 8001962:	4618      	mov	r0, r3
 8001964:	3710      	adds	r7, #16
 8001966:	46bd      	mov	sp, r7
 8001968:	bd80      	pop	{r7, pc}
 800196a:	bf00      	nop
 800196c:	40023c00 	.word	0x40023c00
 8001970:	40023800 	.word	0x40023800
 8001974:	08004c90 	.word	0x08004c90
 8001978:	20000000 	.word	0x20000000
 800197c:	20000004 	.word	0x20000004

08001980 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
__weak uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8001980:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8001984:	b090      	sub	sp, #64	; 0x40
 8001986:	af00      	add	r7, sp, #0
  uint32_t pllm = 0U, pllvco = 0U, pllp = 0U;
 8001988:	2300      	movs	r3, #0
 800198a:	637b      	str	r3, [r7, #52]	; 0x34
 800198c:	2300      	movs	r3, #0
 800198e:	63fb      	str	r3, [r7, #60]	; 0x3c
 8001990:	2300      	movs	r3, #0
 8001992:	633b      	str	r3, [r7, #48]	; 0x30
  uint32_t sysclockfreq = 0U;
 8001994:	2300      	movs	r3, #0
 8001996:	63bb      	str	r3, [r7, #56]	; 0x38

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 8001998:	4b59      	ldr	r3, [pc, #356]	; (8001b00 <HAL_RCC_GetSysClockFreq+0x180>)
 800199a:	689b      	ldr	r3, [r3, #8]
 800199c:	f003 030c 	and.w	r3, r3, #12
 80019a0:	2b08      	cmp	r3, #8
 80019a2:	d00d      	beq.n	80019c0 <HAL_RCC_GetSysClockFreq+0x40>
 80019a4:	2b08      	cmp	r3, #8
 80019a6:	f200 80a1 	bhi.w	8001aec <HAL_RCC_GetSysClockFreq+0x16c>
 80019aa:	2b00      	cmp	r3, #0
 80019ac:	d002      	beq.n	80019b4 <HAL_RCC_GetSysClockFreq+0x34>
 80019ae:	2b04      	cmp	r3, #4
 80019b0:	d003      	beq.n	80019ba <HAL_RCC_GetSysClockFreq+0x3a>
 80019b2:	e09b      	b.n	8001aec <HAL_RCC_GetSysClockFreq+0x16c>
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 80019b4:	4b53      	ldr	r3, [pc, #332]	; (8001b04 <HAL_RCC_GetSysClockFreq+0x184>)
 80019b6:	63bb      	str	r3, [r7, #56]	; 0x38
       break;
 80019b8:	e09b      	b.n	8001af2 <HAL_RCC_GetSysClockFreq+0x172>
    }
    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 80019ba:	4b53      	ldr	r3, [pc, #332]	; (8001b08 <HAL_RCC_GetSysClockFreq+0x188>)
 80019bc:	63bb      	str	r3, [r7, #56]	; 0x38
      break;
 80019be:	e098      	b.n	8001af2 <HAL_RCC_GetSysClockFreq+0x172>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 80019c0:	4b4f      	ldr	r3, [pc, #316]	; (8001b00 <HAL_RCC_GetSysClockFreq+0x180>)
 80019c2:	685b      	ldr	r3, [r3, #4]
 80019c4:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 80019c8:	637b      	str	r3, [r7, #52]	; 0x34
      if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 80019ca:	4b4d      	ldr	r3, [pc, #308]	; (8001b00 <HAL_RCC_GetSysClockFreq+0x180>)
 80019cc:	685b      	ldr	r3, [r3, #4]
 80019ce:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 80019d2:	2b00      	cmp	r3, #0
 80019d4:	d028      	beq.n	8001a28 <HAL_RCC_GetSysClockFreq+0xa8>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 80019d6:	4b4a      	ldr	r3, [pc, #296]	; (8001b00 <HAL_RCC_GetSysClockFreq+0x180>)
 80019d8:	685b      	ldr	r3, [r3, #4]
 80019da:	099b      	lsrs	r3, r3, #6
 80019dc:	2200      	movs	r2, #0
 80019de:	623b      	str	r3, [r7, #32]
 80019e0:	627a      	str	r2, [r7, #36]	; 0x24
 80019e2:	6a3b      	ldr	r3, [r7, #32]
 80019e4:	f3c3 0008 	ubfx	r0, r3, #0, #9
 80019e8:	2100      	movs	r1, #0
 80019ea:	4b47      	ldr	r3, [pc, #284]	; (8001b08 <HAL_RCC_GetSysClockFreq+0x188>)
 80019ec:	fb03 f201 	mul.w	r2, r3, r1
 80019f0:	2300      	movs	r3, #0
 80019f2:	fb00 f303 	mul.w	r3, r0, r3
 80019f6:	4413      	add	r3, r2
 80019f8:	4a43      	ldr	r2, [pc, #268]	; (8001b08 <HAL_RCC_GetSysClockFreq+0x188>)
 80019fa:	fba0 1202 	umull	r1, r2, r0, r2
 80019fe:	62fa      	str	r2, [r7, #44]	; 0x2c
 8001a00:	460a      	mov	r2, r1
 8001a02:	62ba      	str	r2, [r7, #40]	; 0x28
 8001a04:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8001a06:	4413      	add	r3, r2
 8001a08:	62fb      	str	r3, [r7, #44]	; 0x2c
 8001a0a:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8001a0c:	2200      	movs	r2, #0
 8001a0e:	61bb      	str	r3, [r7, #24]
 8001a10:	61fa      	str	r2, [r7, #28]
 8001a12:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 8001a16:	e9d7 010a 	ldrd	r0, r1, [r7, #40]	; 0x28
 8001a1a:	f7fe fbf3 	bl	8000204 <__aeabi_uldivmod>
 8001a1e:	4602      	mov	r2, r0
 8001a20:	460b      	mov	r3, r1
 8001a22:	4613      	mov	r3, r2
 8001a24:	63fb      	str	r3, [r7, #60]	; 0x3c
 8001a26:	e053      	b.n	8001ad0 <HAL_RCC_GetSysClockFreq+0x150>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSI_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8001a28:	4b35      	ldr	r3, [pc, #212]	; (8001b00 <HAL_RCC_GetSysClockFreq+0x180>)
 8001a2a:	685b      	ldr	r3, [r3, #4]
 8001a2c:	099b      	lsrs	r3, r3, #6
 8001a2e:	2200      	movs	r2, #0
 8001a30:	613b      	str	r3, [r7, #16]
 8001a32:	617a      	str	r2, [r7, #20]
 8001a34:	693b      	ldr	r3, [r7, #16]
 8001a36:	f3c3 0a08 	ubfx	sl, r3, #0, #9
 8001a3a:	f04f 0b00 	mov.w	fp, #0
 8001a3e:	4652      	mov	r2, sl
 8001a40:	465b      	mov	r3, fp
 8001a42:	f04f 0000 	mov.w	r0, #0
 8001a46:	f04f 0100 	mov.w	r1, #0
 8001a4a:	0159      	lsls	r1, r3, #5
 8001a4c:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8001a50:	0150      	lsls	r0, r2, #5
 8001a52:	4602      	mov	r2, r0
 8001a54:	460b      	mov	r3, r1
 8001a56:	ebb2 080a 	subs.w	r8, r2, sl
 8001a5a:	eb63 090b 	sbc.w	r9, r3, fp
 8001a5e:	f04f 0200 	mov.w	r2, #0
 8001a62:	f04f 0300 	mov.w	r3, #0
 8001a66:	ea4f 1389 	mov.w	r3, r9, lsl #6
 8001a6a:	ea43 6398 	orr.w	r3, r3, r8, lsr #26
 8001a6e:	ea4f 1288 	mov.w	r2, r8, lsl #6
 8001a72:	ebb2 0408 	subs.w	r4, r2, r8
 8001a76:	eb63 0509 	sbc.w	r5, r3, r9
 8001a7a:	f04f 0200 	mov.w	r2, #0
 8001a7e:	f04f 0300 	mov.w	r3, #0
 8001a82:	00eb      	lsls	r3, r5, #3
 8001a84:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 8001a88:	00e2      	lsls	r2, r4, #3
 8001a8a:	4614      	mov	r4, r2
 8001a8c:	461d      	mov	r5, r3
 8001a8e:	eb14 030a 	adds.w	r3, r4, sl
 8001a92:	603b      	str	r3, [r7, #0]
 8001a94:	eb45 030b 	adc.w	r3, r5, fp
 8001a98:	607b      	str	r3, [r7, #4]
 8001a9a:	f04f 0200 	mov.w	r2, #0
 8001a9e:	f04f 0300 	mov.w	r3, #0
 8001aa2:	e9d7 4500 	ldrd	r4, r5, [r7]
 8001aa6:	4629      	mov	r1, r5
 8001aa8:	028b      	lsls	r3, r1, #10
 8001aaa:	4621      	mov	r1, r4
 8001aac:	ea43 5391 	orr.w	r3, r3, r1, lsr #22
 8001ab0:	4621      	mov	r1, r4
 8001ab2:	028a      	lsls	r2, r1, #10
 8001ab4:	4610      	mov	r0, r2
 8001ab6:	4619      	mov	r1, r3
 8001ab8:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8001aba:	2200      	movs	r2, #0
 8001abc:	60bb      	str	r3, [r7, #8]
 8001abe:	60fa      	str	r2, [r7, #12]
 8001ac0:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 8001ac4:	f7fe fb9e 	bl	8000204 <__aeabi_uldivmod>
 8001ac8:	4602      	mov	r2, r0
 8001aca:	460b      	mov	r3, r1
 8001acc:	4613      	mov	r3, r2
 8001ace:	63fb      	str	r3, [r7, #60]	; 0x3c
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) *2U);
 8001ad0:	4b0b      	ldr	r3, [pc, #44]	; (8001b00 <HAL_RCC_GetSysClockFreq+0x180>)
 8001ad2:	685b      	ldr	r3, [r3, #4]
 8001ad4:	0c1b      	lsrs	r3, r3, #16
 8001ad6:	f003 0303 	and.w	r3, r3, #3
 8001ada:	3301      	adds	r3, #1
 8001adc:	005b      	lsls	r3, r3, #1
 8001ade:	633b      	str	r3, [r7, #48]	; 0x30

      sysclockfreq = pllvco/pllp;
 8001ae0:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 8001ae2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8001ae4:	fbb2 f3f3 	udiv	r3, r2, r3
 8001ae8:	63bb      	str	r3, [r7, #56]	; 0x38
      break;
 8001aea:	e002      	b.n	8001af2 <HAL_RCC_GetSysClockFreq+0x172>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 8001aec:	4b05      	ldr	r3, [pc, #20]	; (8001b04 <HAL_RCC_GetSysClockFreq+0x184>)
 8001aee:	63bb      	str	r3, [r7, #56]	; 0x38
      break;
 8001af0:	bf00      	nop
    }
  }
  return sysclockfreq;
 8001af2:	6bbb      	ldr	r3, [r7, #56]	; 0x38
}
 8001af4:	4618      	mov	r0, r3
 8001af6:	3740      	adds	r7, #64	; 0x40
 8001af8:	46bd      	mov	sp, r7
 8001afa:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8001afe:	bf00      	nop
 8001b00:	40023800 	.word	0x40023800
 8001b04:	00f42400 	.word	0x00f42400
 8001b08:	017d7840 	.word	0x017d7840

08001b0c <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8001b0c:	b480      	push	{r7}
 8001b0e:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8001b10:	4b03      	ldr	r3, [pc, #12]	; (8001b20 <HAL_RCC_GetHCLKFreq+0x14>)
 8001b12:	681b      	ldr	r3, [r3, #0]
}
 8001b14:	4618      	mov	r0, r3
 8001b16:	46bd      	mov	sp, r7
 8001b18:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001b1c:	4770      	bx	lr
 8001b1e:	bf00      	nop
 8001b20:	20000000 	.word	0x20000000

08001b24 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8001b24:	b580      	push	{r7, lr}
 8001b26:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1)>> RCC_CFGR_PPRE1_Pos]);
 8001b28:	f7ff fff0 	bl	8001b0c <HAL_RCC_GetHCLKFreq>
 8001b2c:	4602      	mov	r2, r0
 8001b2e:	4b05      	ldr	r3, [pc, #20]	; (8001b44 <HAL_RCC_GetPCLK1Freq+0x20>)
 8001b30:	689b      	ldr	r3, [r3, #8]
 8001b32:	0a9b      	lsrs	r3, r3, #10
 8001b34:	f003 0307 	and.w	r3, r3, #7
 8001b38:	4903      	ldr	r1, [pc, #12]	; (8001b48 <HAL_RCC_GetPCLK1Freq+0x24>)
 8001b3a:	5ccb      	ldrb	r3, [r1, r3]
 8001b3c:	fa22 f303 	lsr.w	r3, r2, r3
}
 8001b40:	4618      	mov	r0, r3
 8001b42:	bd80      	pop	{r7, pc}
 8001b44:	40023800 	.word	0x40023800
 8001b48:	08004ca0 	.word	0x08004ca0

08001b4c <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8001b4c:	b580      	push	{r7, lr}
 8001b4e:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2)>> RCC_CFGR_PPRE2_Pos]);
 8001b50:	f7ff ffdc 	bl	8001b0c <HAL_RCC_GetHCLKFreq>
 8001b54:	4602      	mov	r2, r0
 8001b56:	4b05      	ldr	r3, [pc, #20]	; (8001b6c <HAL_RCC_GetPCLK2Freq+0x20>)
 8001b58:	689b      	ldr	r3, [r3, #8]
 8001b5a:	0b5b      	lsrs	r3, r3, #13
 8001b5c:	f003 0307 	and.w	r3, r3, #7
 8001b60:	4903      	ldr	r1, [pc, #12]	; (8001b70 <HAL_RCC_GetPCLK2Freq+0x24>)
 8001b62:	5ccb      	ldrb	r3, [r1, r3]
 8001b64:	fa22 f303 	lsr.w	r3, r2, r3
}
 8001b68:	4618      	mov	r0, r3
 8001b6a:	bd80      	pop	{r7, pc}
 8001b6c:	40023800 	.word	0x40023800
 8001b70:	08004ca0 	.word	0x08004ca0

08001b74 <HAL_UART_Init>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8001b74:	b580      	push	{r7, lr}
 8001b76:	b082      	sub	sp, #8
 8001b78:	af00      	add	r7, sp, #0
 8001b7a:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8001b7c:	687b      	ldr	r3, [r7, #4]
 8001b7e:	2b00      	cmp	r3, #0
 8001b80:	d101      	bne.n	8001b86 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8001b82:	2301      	movs	r3, #1
 8001b84:	e03f      	b.n	8001c06 <HAL_UART_Init+0x92>
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));

  if (huart->gState == HAL_UART_STATE_RESET)
 8001b86:	687b      	ldr	r3, [r7, #4]
 8001b88:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8001b8c:	b2db      	uxtb	r3, r3
 8001b8e:	2b00      	cmp	r3, #0
 8001b90:	d106      	bne.n	8001ba0 <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8001b92:	687b      	ldr	r3, [r7, #4]
 8001b94:	2200      	movs	r2, #0
 8001b96:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8001b9a:	6878      	ldr	r0, [r7, #4]
 8001b9c:	f7fe ffda 	bl	8000b54 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8001ba0:	687b      	ldr	r3, [r7, #4]
 8001ba2:	2224      	movs	r2, #36	; 0x24
 8001ba4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 8001ba8:	687b      	ldr	r3, [r7, #4]
 8001baa:	681b      	ldr	r3, [r3, #0]
 8001bac:	68da      	ldr	r2, [r3, #12]
 8001bae:	687b      	ldr	r3, [r7, #4]
 8001bb0:	681b      	ldr	r3, [r3, #0]
 8001bb2:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 8001bb6:	60da      	str	r2, [r3, #12]

  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 8001bb8:	6878      	ldr	r0, [r7, #4]
 8001bba:	f000 f9cb 	bl	8001f54 <UART_SetConfig>

  /* In asynchronous mode, the following bits must be kept cleared:
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8001bbe:	687b      	ldr	r3, [r7, #4]
 8001bc0:	681b      	ldr	r3, [r3, #0]
 8001bc2:	691a      	ldr	r2, [r3, #16]
 8001bc4:	687b      	ldr	r3, [r7, #4]
 8001bc6:	681b      	ldr	r3, [r3, #0]
 8001bc8:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 8001bcc:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8001bce:	687b      	ldr	r3, [r7, #4]
 8001bd0:	681b      	ldr	r3, [r3, #0]
 8001bd2:	695a      	ldr	r2, [r3, #20]
 8001bd4:	687b      	ldr	r3, [r7, #4]
 8001bd6:	681b      	ldr	r3, [r3, #0]
 8001bd8:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 8001bdc:	615a      	str	r2, [r3, #20]

  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 8001bde:	687b      	ldr	r3, [r7, #4]
 8001be0:	681b      	ldr	r3, [r3, #0]
 8001be2:	68da      	ldr	r2, [r3, #12]
 8001be4:	687b      	ldr	r3, [r7, #4]
 8001be6:	681b      	ldr	r3, [r3, #0]
 8001be8:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 8001bec:	60da      	str	r2, [r3, #12]

  /* Initialize the UART state */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8001bee:	687b      	ldr	r3, [r7, #4]
 8001bf0:	2200      	movs	r2, #0
 8001bf2:	641a      	str	r2, [r3, #64]	; 0x40
  huart->gState = HAL_UART_STATE_READY;
 8001bf4:	687b      	ldr	r3, [r7, #4]
 8001bf6:	2220      	movs	r2, #32
 8001bf8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
  huart->RxState = HAL_UART_STATE_READY;
 8001bfc:	687b      	ldr	r3, [r7, #4]
 8001bfe:	2220      	movs	r2, #32
 8001c00:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  return HAL_OK;
 8001c04:	2300      	movs	r3, #0
}
 8001c06:	4618      	mov	r0, r3
 8001c08:	3708      	adds	r7, #8
 8001c0a:	46bd      	mov	sp, r7
 8001c0c:	bd80      	pop	{r7, pc}

08001c0e <HAL_UART_Transmit>:
  * @param  Size  Amount of data elements (u8 or u16) to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8001c0e:	b580      	push	{r7, lr}
 8001c10:	b08a      	sub	sp, #40	; 0x28
 8001c12:	af02      	add	r7, sp, #8
 8001c14:	60f8      	str	r0, [r7, #12]
 8001c16:	60b9      	str	r1, [r7, #8]
 8001c18:	603b      	str	r3, [r7, #0]
 8001c1a:	4613      	mov	r3, r2
 8001c1c:	80fb      	strh	r3, [r7, #6]
  const uint8_t  *pdata8bits;
  const uint16_t *pdata16bits;
  uint32_t tickstart = 0U;
 8001c1e:	2300      	movs	r3, #0
 8001c20:	617b      	str	r3, [r7, #20]

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 8001c22:	68fb      	ldr	r3, [r7, #12]
 8001c24:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8001c28:	b2db      	uxtb	r3, r3
 8001c2a:	2b20      	cmp	r3, #32
 8001c2c:	d17c      	bne.n	8001d28 <HAL_UART_Transmit+0x11a>
  {
    if ((pData == NULL) || (Size == 0U))
 8001c2e:	68bb      	ldr	r3, [r7, #8]
 8001c30:	2b00      	cmp	r3, #0
 8001c32:	d002      	beq.n	8001c3a <HAL_UART_Transmit+0x2c>
 8001c34:	88fb      	ldrh	r3, [r7, #6]
 8001c36:	2b00      	cmp	r3, #0
 8001c38:	d101      	bne.n	8001c3e <HAL_UART_Transmit+0x30>
    {
      return  HAL_ERROR;
 8001c3a:	2301      	movs	r3, #1
 8001c3c:	e075      	b.n	8001d2a <HAL_UART_Transmit+0x11c>
    }

    /* Process Locked */
    __HAL_LOCK(huart);
 8001c3e:	68fb      	ldr	r3, [r7, #12]
 8001c40:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8001c44:	2b01      	cmp	r3, #1
 8001c46:	d101      	bne.n	8001c4c <HAL_UART_Transmit+0x3e>
 8001c48:	2302      	movs	r3, #2
 8001c4a:	e06e      	b.n	8001d2a <HAL_UART_Transmit+0x11c>
 8001c4c:	68fb      	ldr	r3, [r7, #12]
 8001c4e:	2201      	movs	r2, #1
 8001c50:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8001c54:	68fb      	ldr	r3, [r7, #12]
 8001c56:	2200      	movs	r2, #0
 8001c58:	641a      	str	r2, [r3, #64]	; 0x40
    huart->gState = HAL_UART_STATE_BUSY_TX;
 8001c5a:	68fb      	ldr	r3, [r7, #12]
 8001c5c:	2221      	movs	r2, #33	; 0x21
 8001c5e:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 8001c62:	f7ff f885 	bl	8000d70 <HAL_GetTick>
 8001c66:	6178      	str	r0, [r7, #20]

    huart->TxXferSize = Size;
 8001c68:	68fb      	ldr	r3, [r7, #12]
 8001c6a:	88fa      	ldrh	r2, [r7, #6]
 8001c6c:	849a      	strh	r2, [r3, #36]	; 0x24
    huart->TxXferCount = Size;
 8001c6e:	68fb      	ldr	r3, [r7, #12]
 8001c70:	88fa      	ldrh	r2, [r7, #6]
 8001c72:	84da      	strh	r2, [r3, #38]	; 0x26

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8001c74:	68fb      	ldr	r3, [r7, #12]
 8001c76:	689b      	ldr	r3, [r3, #8]
 8001c78:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8001c7c:	d108      	bne.n	8001c90 <HAL_UART_Transmit+0x82>
 8001c7e:	68fb      	ldr	r3, [r7, #12]
 8001c80:	691b      	ldr	r3, [r3, #16]
 8001c82:	2b00      	cmp	r3, #0
 8001c84:	d104      	bne.n	8001c90 <HAL_UART_Transmit+0x82>
    {
      pdata8bits  = NULL;
 8001c86:	2300      	movs	r3, #0
 8001c88:	61fb      	str	r3, [r7, #28]
      pdata16bits = (const uint16_t *) pData;
 8001c8a:	68bb      	ldr	r3, [r7, #8]
 8001c8c:	61bb      	str	r3, [r7, #24]
 8001c8e:	e003      	b.n	8001c98 <HAL_UART_Transmit+0x8a>
    }
    else
    {
      pdata8bits  = pData;
 8001c90:	68bb      	ldr	r3, [r7, #8]
 8001c92:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 8001c94:	2300      	movs	r3, #0
 8001c96:	61bb      	str	r3, [r7, #24]
    }

    /* Process Unlocked */
    __HAL_UNLOCK(huart);
 8001c98:	68fb      	ldr	r3, [r7, #12]
 8001c9a:	2200      	movs	r2, #0
 8001c9c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    while (huart->TxXferCount > 0U)
 8001ca0:	e02a      	b.n	8001cf8 <HAL_UART_Transmit+0xea>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 8001ca2:	683b      	ldr	r3, [r7, #0]
 8001ca4:	9300      	str	r3, [sp, #0]
 8001ca6:	697b      	ldr	r3, [r7, #20]
 8001ca8:	2200      	movs	r2, #0
 8001caa:	2180      	movs	r1, #128	; 0x80
 8001cac:	68f8      	ldr	r0, [r7, #12]
 8001cae:	f000 f8e2 	bl	8001e76 <UART_WaitOnFlagUntilTimeout>
 8001cb2:	4603      	mov	r3, r0
 8001cb4:	2b00      	cmp	r3, #0
 8001cb6:	d001      	beq.n	8001cbc <HAL_UART_Transmit+0xae>
      {
        return HAL_TIMEOUT;
 8001cb8:	2303      	movs	r3, #3
 8001cba:	e036      	b.n	8001d2a <HAL_UART_Transmit+0x11c>
      }
      if (pdata8bits == NULL)
 8001cbc:	69fb      	ldr	r3, [r7, #28]
 8001cbe:	2b00      	cmp	r3, #0
 8001cc0:	d10b      	bne.n	8001cda <HAL_UART_Transmit+0xcc>
      {
        huart->Instance->DR = (uint16_t)(*pdata16bits & 0x01FFU);
 8001cc2:	69bb      	ldr	r3, [r7, #24]
 8001cc4:	881b      	ldrh	r3, [r3, #0]
 8001cc6:	461a      	mov	r2, r3
 8001cc8:	68fb      	ldr	r3, [r7, #12]
 8001cca:	681b      	ldr	r3, [r3, #0]
 8001ccc:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8001cd0:	605a      	str	r2, [r3, #4]
        pdata16bits++;
 8001cd2:	69bb      	ldr	r3, [r7, #24]
 8001cd4:	3302      	adds	r3, #2
 8001cd6:	61bb      	str	r3, [r7, #24]
 8001cd8:	e007      	b.n	8001cea <HAL_UART_Transmit+0xdc>
      }
      else
      {
        huart->Instance->DR = (uint8_t)(*pdata8bits & 0xFFU);
 8001cda:	69fb      	ldr	r3, [r7, #28]
 8001cdc:	781a      	ldrb	r2, [r3, #0]
 8001cde:	68fb      	ldr	r3, [r7, #12]
 8001ce0:	681b      	ldr	r3, [r3, #0]
 8001ce2:	605a      	str	r2, [r3, #4]
        pdata8bits++;
 8001ce4:	69fb      	ldr	r3, [r7, #28]
 8001ce6:	3301      	adds	r3, #1
 8001ce8:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 8001cea:	68fb      	ldr	r3, [r7, #12]
 8001cec:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 8001cee:	b29b      	uxth	r3, r3
 8001cf0:	3b01      	subs	r3, #1
 8001cf2:	b29a      	uxth	r2, r3
 8001cf4:	68fb      	ldr	r3, [r7, #12]
 8001cf6:	84da      	strh	r2, [r3, #38]	; 0x26
    while (huart->TxXferCount > 0U)
 8001cf8:	68fb      	ldr	r3, [r7, #12]
 8001cfa:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 8001cfc:	b29b      	uxth	r3, r3
 8001cfe:	2b00      	cmp	r3, #0
 8001d00:	d1cf      	bne.n	8001ca2 <HAL_UART_Transmit+0x94>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 8001d02:	683b      	ldr	r3, [r7, #0]
 8001d04:	9300      	str	r3, [sp, #0]
 8001d06:	697b      	ldr	r3, [r7, #20]
 8001d08:	2200      	movs	r2, #0
 8001d0a:	2140      	movs	r1, #64	; 0x40
 8001d0c:	68f8      	ldr	r0, [r7, #12]
 8001d0e:	f000 f8b2 	bl	8001e76 <UART_WaitOnFlagUntilTimeout>
 8001d12:	4603      	mov	r3, r0
 8001d14:	2b00      	cmp	r3, #0
 8001d16:	d001      	beq.n	8001d1c <HAL_UART_Transmit+0x10e>
    {
      return HAL_TIMEOUT;
 8001d18:	2303      	movs	r3, #3
 8001d1a:	e006      	b.n	8001d2a <HAL_UART_Transmit+0x11c>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 8001d1c:	68fb      	ldr	r3, [r7, #12]
 8001d1e:	2220      	movs	r2, #32
 8001d20:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

    return HAL_OK;
 8001d24:	2300      	movs	r3, #0
 8001d26:	e000      	b.n	8001d2a <HAL_UART_Transmit+0x11c>
  }
  else
  {
    return HAL_BUSY;
 8001d28:	2302      	movs	r3, #2
  }
}
 8001d2a:	4618      	mov	r0, r3
 8001d2c:	3720      	adds	r7, #32
 8001d2e:	46bd      	mov	sp, r7
 8001d30:	bd80      	pop	{r7, pc}

08001d32 <HAL_UART_Receive>:
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Receive(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8001d32:	b580      	push	{r7, lr}
 8001d34:	b08a      	sub	sp, #40	; 0x28
 8001d36:	af02      	add	r7, sp, #8
 8001d38:	60f8      	str	r0, [r7, #12]
 8001d3a:	60b9      	str	r1, [r7, #8]
 8001d3c:	603b      	str	r3, [r7, #0]
 8001d3e:	4613      	mov	r3, r2
 8001d40:	80fb      	strh	r3, [r7, #6]
  uint8_t  *pdata8bits;
  uint16_t *pdata16bits;
  uint32_t tickstart = 0U;
 8001d42:	2300      	movs	r3, #0
 8001d44:	617b      	str	r3, [r7, #20]

  /* Check that a Rx process is not already ongoing */
  if (huart->RxState == HAL_UART_STATE_READY)
 8001d46:	68fb      	ldr	r3, [r7, #12]
 8001d48:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 8001d4c:	b2db      	uxtb	r3, r3
 8001d4e:	2b20      	cmp	r3, #32
 8001d50:	f040 808c 	bne.w	8001e6c <HAL_UART_Receive+0x13a>
  {
    if ((pData == NULL) || (Size == 0U))
 8001d54:	68bb      	ldr	r3, [r7, #8]
 8001d56:	2b00      	cmp	r3, #0
 8001d58:	d002      	beq.n	8001d60 <HAL_UART_Receive+0x2e>
 8001d5a:	88fb      	ldrh	r3, [r7, #6]
 8001d5c:	2b00      	cmp	r3, #0
 8001d5e:	d101      	bne.n	8001d64 <HAL_UART_Receive+0x32>
    {
      return  HAL_ERROR;
 8001d60:	2301      	movs	r3, #1
 8001d62:	e084      	b.n	8001e6e <HAL_UART_Receive+0x13c>
    }

    /* Process Locked */
    __HAL_LOCK(huart);
 8001d64:	68fb      	ldr	r3, [r7, #12]
 8001d66:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8001d6a:	2b01      	cmp	r3, #1
 8001d6c:	d101      	bne.n	8001d72 <HAL_UART_Receive+0x40>
 8001d6e:	2302      	movs	r3, #2
 8001d70:	e07d      	b.n	8001e6e <HAL_UART_Receive+0x13c>
 8001d72:	68fb      	ldr	r3, [r7, #12]
 8001d74:	2201      	movs	r2, #1
 8001d76:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8001d7a:	68fb      	ldr	r3, [r7, #12]
 8001d7c:	2200      	movs	r2, #0
 8001d7e:	641a      	str	r2, [r3, #64]	; 0x40
    huart->RxState = HAL_UART_STATE_BUSY_RX;
 8001d80:	68fb      	ldr	r3, [r7, #12]
 8001d82:	2222      	movs	r2, #34	; 0x22
 8001d84:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8001d88:	68fb      	ldr	r3, [r7, #12]
 8001d8a:	2200      	movs	r2, #0
 8001d8c:	631a      	str	r2, [r3, #48]	; 0x30

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 8001d8e:	f7fe ffef 	bl	8000d70 <HAL_GetTick>
 8001d92:	6178      	str	r0, [r7, #20]

    huart->RxXferSize = Size;
 8001d94:	68fb      	ldr	r3, [r7, #12]
 8001d96:	88fa      	ldrh	r2, [r7, #6]
 8001d98:	859a      	strh	r2, [r3, #44]	; 0x2c
    huart->RxXferCount = Size;
 8001d9a:	68fb      	ldr	r3, [r7, #12]
 8001d9c:	88fa      	ldrh	r2, [r7, #6]
 8001d9e:	85da      	strh	r2, [r3, #46]	; 0x2e

    /* In case of 9bits/No Parity transfer, pRxData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8001da0:	68fb      	ldr	r3, [r7, #12]
 8001da2:	689b      	ldr	r3, [r3, #8]
 8001da4:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8001da8:	d108      	bne.n	8001dbc <HAL_UART_Receive+0x8a>
 8001daa:	68fb      	ldr	r3, [r7, #12]
 8001dac:	691b      	ldr	r3, [r3, #16]
 8001dae:	2b00      	cmp	r3, #0
 8001db0:	d104      	bne.n	8001dbc <HAL_UART_Receive+0x8a>
    {
      pdata8bits  = NULL;
 8001db2:	2300      	movs	r3, #0
 8001db4:	61fb      	str	r3, [r7, #28]
      pdata16bits = (uint16_t *) pData;
 8001db6:	68bb      	ldr	r3, [r7, #8]
 8001db8:	61bb      	str	r3, [r7, #24]
 8001dba:	e003      	b.n	8001dc4 <HAL_UART_Receive+0x92>
    }
    else
    {
      pdata8bits  = pData;
 8001dbc:	68bb      	ldr	r3, [r7, #8]
 8001dbe:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 8001dc0:	2300      	movs	r3, #0
 8001dc2:	61bb      	str	r3, [r7, #24]
    }

    /* Process Unlocked */
    __HAL_UNLOCK(huart);
 8001dc4:	68fb      	ldr	r3, [r7, #12]
 8001dc6:	2200      	movs	r2, #0
 8001dc8:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Check the remain data to be received */
    while (huart->RxXferCount > 0U)
 8001dcc:	e043      	b.n	8001e56 <HAL_UART_Receive+0x124>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_RXNE, RESET, tickstart, Timeout) != HAL_OK)
 8001dce:	683b      	ldr	r3, [r7, #0]
 8001dd0:	9300      	str	r3, [sp, #0]
 8001dd2:	697b      	ldr	r3, [r7, #20]
 8001dd4:	2200      	movs	r2, #0
 8001dd6:	2120      	movs	r1, #32
 8001dd8:	68f8      	ldr	r0, [r7, #12]
 8001dda:	f000 f84c 	bl	8001e76 <UART_WaitOnFlagUntilTimeout>
 8001dde:	4603      	mov	r3, r0
 8001de0:	2b00      	cmp	r3, #0
 8001de2:	d001      	beq.n	8001de8 <HAL_UART_Receive+0xb6>
      {
        return HAL_TIMEOUT;
 8001de4:	2303      	movs	r3, #3
 8001de6:	e042      	b.n	8001e6e <HAL_UART_Receive+0x13c>
      }
      if (pdata8bits == NULL)
 8001de8:	69fb      	ldr	r3, [r7, #28]
 8001dea:	2b00      	cmp	r3, #0
 8001dec:	d10c      	bne.n	8001e08 <HAL_UART_Receive+0xd6>
      {
        *pdata16bits = (uint16_t)(huart->Instance->DR & 0x01FF);
 8001dee:	68fb      	ldr	r3, [r7, #12]
 8001df0:	681b      	ldr	r3, [r3, #0]
 8001df2:	685b      	ldr	r3, [r3, #4]
 8001df4:	b29b      	uxth	r3, r3
 8001df6:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8001dfa:	b29a      	uxth	r2, r3
 8001dfc:	69bb      	ldr	r3, [r7, #24]
 8001dfe:	801a      	strh	r2, [r3, #0]
        pdata16bits++;
 8001e00:	69bb      	ldr	r3, [r7, #24]
 8001e02:	3302      	adds	r3, #2
 8001e04:	61bb      	str	r3, [r7, #24]
 8001e06:	e01f      	b.n	8001e48 <HAL_UART_Receive+0x116>
      }
      else
      {
        if ((huart->Init.WordLength == UART_WORDLENGTH_9B) || ((huart->Init.WordLength == UART_WORDLENGTH_8B) && (huart->Init.Parity == UART_PARITY_NONE)))
 8001e08:	68fb      	ldr	r3, [r7, #12]
 8001e0a:	689b      	ldr	r3, [r3, #8]
 8001e0c:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8001e10:	d007      	beq.n	8001e22 <HAL_UART_Receive+0xf0>
 8001e12:	68fb      	ldr	r3, [r7, #12]
 8001e14:	689b      	ldr	r3, [r3, #8]
 8001e16:	2b00      	cmp	r3, #0
 8001e18:	d10a      	bne.n	8001e30 <HAL_UART_Receive+0xfe>
 8001e1a:	68fb      	ldr	r3, [r7, #12]
 8001e1c:	691b      	ldr	r3, [r3, #16]
 8001e1e:	2b00      	cmp	r3, #0
 8001e20:	d106      	bne.n	8001e30 <HAL_UART_Receive+0xfe>
        {
          *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x00FF);
 8001e22:	68fb      	ldr	r3, [r7, #12]
 8001e24:	681b      	ldr	r3, [r3, #0]
 8001e26:	685b      	ldr	r3, [r3, #4]
 8001e28:	b2da      	uxtb	r2, r3
 8001e2a:	69fb      	ldr	r3, [r7, #28]
 8001e2c:	701a      	strb	r2, [r3, #0]
 8001e2e:	e008      	b.n	8001e42 <HAL_UART_Receive+0x110>
        }
        else
        {
          *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x007F);
 8001e30:	68fb      	ldr	r3, [r7, #12]
 8001e32:	681b      	ldr	r3, [r3, #0]
 8001e34:	685b      	ldr	r3, [r3, #4]
 8001e36:	b2db      	uxtb	r3, r3
 8001e38:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8001e3c:	b2da      	uxtb	r2, r3
 8001e3e:	69fb      	ldr	r3, [r7, #28]
 8001e40:	701a      	strb	r2, [r3, #0]
        }
        pdata8bits++;
 8001e42:	69fb      	ldr	r3, [r7, #28]
 8001e44:	3301      	adds	r3, #1
 8001e46:	61fb      	str	r3, [r7, #28]
      }
      huart->RxXferCount--;
 8001e48:	68fb      	ldr	r3, [r7, #12]
 8001e4a:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 8001e4c:	b29b      	uxth	r3, r3
 8001e4e:	3b01      	subs	r3, #1
 8001e50:	b29a      	uxth	r2, r3
 8001e52:	68fb      	ldr	r3, [r7, #12]
 8001e54:	85da      	strh	r2, [r3, #46]	; 0x2e
    while (huart->RxXferCount > 0U)
 8001e56:	68fb      	ldr	r3, [r7, #12]
 8001e58:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 8001e5a:	b29b      	uxth	r3, r3
 8001e5c:	2b00      	cmp	r3, #0
 8001e5e:	d1b6      	bne.n	8001dce <HAL_UART_Receive+0x9c>
    }

    /* At end of Rx process, restore huart->RxState to Ready */
    huart->RxState = HAL_UART_STATE_READY;
 8001e60:	68fb      	ldr	r3, [r7, #12]
 8001e62:	2220      	movs	r2, #32
 8001e64:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

    return HAL_OK;
 8001e68:	2300      	movs	r3, #0
 8001e6a:	e000      	b.n	8001e6e <HAL_UART_Receive+0x13c>
  }
  else
  {
    return HAL_BUSY;
 8001e6c:	2302      	movs	r3, #2
  }
}
 8001e6e:	4618      	mov	r0, r3
 8001e70:	3720      	adds	r7, #32
 8001e72:	46bd      	mov	sp, r7
 8001e74:	bd80      	pop	{r7, pc}

08001e76 <UART_WaitOnFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                                     uint32_t Tickstart, uint32_t Timeout)
{
 8001e76:	b580      	push	{r7, lr}
 8001e78:	b090      	sub	sp, #64	; 0x40
 8001e7a:	af00      	add	r7, sp, #0
 8001e7c:	60f8      	str	r0, [r7, #12]
 8001e7e:	60b9      	str	r1, [r7, #8]
 8001e80:	603b      	str	r3, [r7, #0]
 8001e82:	4613      	mov	r3, r2
 8001e84:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8001e86:	e050      	b.n	8001f2a <UART_WaitOnFlagUntilTimeout+0xb4>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8001e88:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8001e8a:	f1b3 3fff 	cmp.w	r3, #4294967295
 8001e8e:	d04c      	beq.n	8001f2a <UART_WaitOnFlagUntilTimeout+0xb4>
    {
      if ((Timeout == 0U) || ((HAL_GetTick() - Tickstart) > Timeout))
 8001e90:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8001e92:	2b00      	cmp	r3, #0
 8001e94:	d007      	beq.n	8001ea6 <UART_WaitOnFlagUntilTimeout+0x30>
 8001e96:	f7fe ff6b 	bl	8000d70 <HAL_GetTick>
 8001e9a:	4602      	mov	r2, r0
 8001e9c:	683b      	ldr	r3, [r7, #0]
 8001e9e:	1ad3      	subs	r3, r2, r3
 8001ea0:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8001ea2:	429a      	cmp	r2, r3
 8001ea4:	d241      	bcs.n	8001f2a <UART_WaitOnFlagUntilTimeout+0xb4>
      {
        /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts for the interrupt process */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 8001ea6:	68fb      	ldr	r3, [r7, #12]
 8001ea8:	681b      	ldr	r3, [r3, #0]
 8001eaa:	330c      	adds	r3, #12
 8001eac:	62bb      	str	r3, [r7, #40]	; 0x28
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8001eae:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8001eb0:	e853 3f00 	ldrex	r3, [r3]
 8001eb4:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 8001eb6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001eb8:	f423 73d0 	bic.w	r3, r3, #416	; 0x1a0
 8001ebc:	63fb      	str	r3, [r7, #60]	; 0x3c
 8001ebe:	68fb      	ldr	r3, [r7, #12]
 8001ec0:	681b      	ldr	r3, [r3, #0]
 8001ec2:	330c      	adds	r3, #12
 8001ec4:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 8001ec6:	637a      	str	r2, [r7, #52]	; 0x34
 8001ec8:	633b      	str	r3, [r7, #48]	; 0x30
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8001eca:	6b39      	ldr	r1, [r7, #48]	; 0x30
 8001ecc:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8001ece:	e841 2300 	strex	r3, r2, [r1]
 8001ed2:	62fb      	str	r3, [r7, #44]	; 0x2c
   return(result);
 8001ed4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8001ed6:	2b00      	cmp	r3, #0
 8001ed8:	d1e5      	bne.n	8001ea6 <UART_WaitOnFlagUntilTimeout+0x30>
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8001eda:	68fb      	ldr	r3, [r7, #12]
 8001edc:	681b      	ldr	r3, [r3, #0]
 8001ede:	3314      	adds	r3, #20
 8001ee0:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8001ee2:	697b      	ldr	r3, [r7, #20]
 8001ee4:	e853 3f00 	ldrex	r3, [r3]
 8001ee8:	613b      	str	r3, [r7, #16]
   return(result);
 8001eea:	693b      	ldr	r3, [r7, #16]
 8001eec:	f023 0301 	bic.w	r3, r3, #1
 8001ef0:	63bb      	str	r3, [r7, #56]	; 0x38
 8001ef2:	68fb      	ldr	r3, [r7, #12]
 8001ef4:	681b      	ldr	r3, [r3, #0]
 8001ef6:	3314      	adds	r3, #20
 8001ef8:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8001efa:	623a      	str	r2, [r7, #32]
 8001efc:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8001efe:	69f9      	ldr	r1, [r7, #28]
 8001f00:	6a3a      	ldr	r2, [r7, #32]
 8001f02:	e841 2300 	strex	r3, r2, [r1]
 8001f06:	61bb      	str	r3, [r7, #24]
   return(result);
 8001f08:	69bb      	ldr	r3, [r7, #24]
 8001f0a:	2b00      	cmp	r3, #0
 8001f0c:	d1e5      	bne.n	8001eda <UART_WaitOnFlagUntilTimeout+0x64>

        huart->gState  = HAL_UART_STATE_READY;
 8001f0e:	68fb      	ldr	r3, [r7, #12]
 8001f10:	2220      	movs	r2, #32
 8001f12:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        huart->RxState = HAL_UART_STATE_READY;
 8001f16:	68fb      	ldr	r3, [r7, #12]
 8001f18:	2220      	movs	r2, #32
 8001f1a:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

        /* Process Unlocked */
        __HAL_UNLOCK(huart);
 8001f1e:	68fb      	ldr	r3, [r7, #12]
 8001f20:	2200      	movs	r2, #0
 8001f22:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_TIMEOUT;
 8001f26:	2303      	movs	r3, #3
 8001f28:	e00f      	b.n	8001f4a <UART_WaitOnFlagUntilTimeout+0xd4>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8001f2a:	68fb      	ldr	r3, [r7, #12]
 8001f2c:	681b      	ldr	r3, [r3, #0]
 8001f2e:	681a      	ldr	r2, [r3, #0]
 8001f30:	68bb      	ldr	r3, [r7, #8]
 8001f32:	4013      	ands	r3, r2
 8001f34:	68ba      	ldr	r2, [r7, #8]
 8001f36:	429a      	cmp	r2, r3
 8001f38:	bf0c      	ite	eq
 8001f3a:	2301      	moveq	r3, #1
 8001f3c:	2300      	movne	r3, #0
 8001f3e:	b2db      	uxtb	r3, r3
 8001f40:	461a      	mov	r2, r3
 8001f42:	79fb      	ldrb	r3, [r7, #7]
 8001f44:	429a      	cmp	r2, r3
 8001f46:	d09f      	beq.n	8001e88 <UART_WaitOnFlagUntilTimeout+0x12>
      }
    }
  }
  return HAL_OK;
 8001f48:	2300      	movs	r3, #0
}
 8001f4a:	4618      	mov	r0, r3
 8001f4c:	3740      	adds	r7, #64	; 0x40
 8001f4e:	46bd      	mov	sp, r7
 8001f50:	bd80      	pop	{r7, pc}
	...

08001f54 <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 8001f54:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8001f58:	b0c0      	sub	sp, #256	; 0x100
 8001f5a:	af00      	add	r7, sp, #0
 8001f5c:	f8c7 00f4 	str.w	r0, [r7, #244]	; 0xf4
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8001f60:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8001f64:	681b      	ldr	r3, [r3, #0]
 8001f66:	691b      	ldr	r3, [r3, #16]
 8001f68:	f423 5040 	bic.w	r0, r3, #12288	; 0x3000
 8001f6c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8001f70:	68d9      	ldr	r1, [r3, #12]
 8001f72:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8001f76:	681a      	ldr	r2, [r3, #0]
 8001f78:	ea40 0301 	orr.w	r3, r0, r1
 8001f7c:	6113      	str	r3, [r2, #16]
     Set the M bits according to huart->Init.WordLength value
     Set PCE and PS bits according to huart->Init.Parity value
     Set TE and RE bits according to huart->Init.Mode value
     Set OVER8 bit according to huart->Init.OverSampling value */

  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
 8001f7e:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8001f82:	689a      	ldr	r2, [r3, #8]
 8001f84:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8001f88:	691b      	ldr	r3, [r3, #16]
 8001f8a:	431a      	orrs	r2, r3
 8001f8c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8001f90:	695b      	ldr	r3, [r3, #20]
 8001f92:	431a      	orrs	r2, r3
 8001f94:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8001f98:	69db      	ldr	r3, [r3, #28]
 8001f9a:	4313      	orrs	r3, r2
 8001f9c:	f8c7 30f8 	str.w	r3, [r7, #248]	; 0xf8
  MODIFY_REG(huart->Instance->CR1,
 8001fa0:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8001fa4:	681b      	ldr	r3, [r3, #0]
 8001fa6:	68db      	ldr	r3, [r3, #12]
 8001fa8:	f423 4116 	bic.w	r1, r3, #38400	; 0x9600
 8001fac:	f021 010c 	bic.w	r1, r1, #12
 8001fb0:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8001fb4:	681a      	ldr	r2, [r3, #0]
 8001fb6:	f8d7 30f8 	ldr.w	r3, [r7, #248]	; 0xf8
 8001fba:	430b      	orrs	r3, r1
 8001fbc:	60d3      	str	r3, [r2, #12]
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 8001fbe:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8001fc2:	681b      	ldr	r3, [r3, #0]
 8001fc4:	695b      	ldr	r3, [r3, #20]
 8001fc6:	f423 7040 	bic.w	r0, r3, #768	; 0x300
 8001fca:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8001fce:	6999      	ldr	r1, [r3, #24]
 8001fd0:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8001fd4:	681a      	ldr	r2, [r3, #0]
 8001fd6:	ea40 0301 	orr.w	r3, r0, r1
 8001fda:	6153      	str	r3, [r2, #20]
    if ((huart->Instance == USART1) || (huart->Instance == USART6) || (huart->Instance == UART9) || (huart->Instance == UART10))
    {
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#elif defined(USART6)
    if ((huart->Instance == USART1) || (huart->Instance == USART6))
 8001fdc:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8001fe0:	681a      	ldr	r2, [r3, #0]
 8001fe2:	4b8f      	ldr	r3, [pc, #572]	; (8002220 <UART_SetConfig+0x2cc>)
 8001fe4:	429a      	cmp	r2, r3
 8001fe6:	d005      	beq.n	8001ff4 <UART_SetConfig+0xa0>
 8001fe8:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8001fec:	681a      	ldr	r2, [r3, #0]
 8001fee:	4b8d      	ldr	r3, [pc, #564]	; (8002224 <UART_SetConfig+0x2d0>)
 8001ff0:	429a      	cmp	r2, r3
 8001ff2:	d104      	bne.n	8001ffe <UART_SetConfig+0xaa>
    {
      pclk = HAL_RCC_GetPCLK2Freq();
 8001ff4:	f7ff fdaa 	bl	8001b4c <HAL_RCC_GetPCLK2Freq>
 8001ff8:	f8c7 00fc 	str.w	r0, [r7, #252]	; 0xfc
 8001ffc:	e003      	b.n	8002006 <UART_SetConfig+0xb2>
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#endif /* USART6 */
    else
    {
      pclk = HAL_RCC_GetPCLK1Freq();
 8001ffe:	f7ff fd91 	bl	8001b24 <HAL_RCC_GetPCLK1Freq>
 8002002:	f8c7 00fc 	str.w	r0, [r7, #252]	; 0xfc
    }
  /*-------------------------- USART BRR Configuration ---------------------*/
  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8002006:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800200a:	69db      	ldr	r3, [r3, #28]
 800200c:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8002010:	f040 810c 	bne.w	800222c <UART_SetConfig+0x2d8>
  {
    huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
 8002014:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8002018:	2200      	movs	r2, #0
 800201a:	f8c7 30e8 	str.w	r3, [r7, #232]	; 0xe8
 800201e:	f8c7 20ec 	str.w	r2, [r7, #236]	; 0xec
 8002022:	e9d7 453a 	ldrd	r4, r5, [r7, #232]	; 0xe8
 8002026:	4622      	mov	r2, r4
 8002028:	462b      	mov	r3, r5
 800202a:	1891      	adds	r1, r2, r2
 800202c:	65b9      	str	r1, [r7, #88]	; 0x58
 800202e:	415b      	adcs	r3, r3
 8002030:	65fb      	str	r3, [r7, #92]	; 0x5c
 8002032:	e9d7 2316 	ldrd	r2, r3, [r7, #88]	; 0x58
 8002036:	4621      	mov	r1, r4
 8002038:	eb12 0801 	adds.w	r8, r2, r1
 800203c:	4629      	mov	r1, r5
 800203e:	eb43 0901 	adc.w	r9, r3, r1
 8002042:	f04f 0200 	mov.w	r2, #0
 8002046:	f04f 0300 	mov.w	r3, #0
 800204a:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 800204e:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 8002052:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 8002056:	4690      	mov	r8, r2
 8002058:	4699      	mov	r9, r3
 800205a:	4623      	mov	r3, r4
 800205c:	eb18 0303 	adds.w	r3, r8, r3
 8002060:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
 8002064:	462b      	mov	r3, r5
 8002066:	eb49 0303 	adc.w	r3, r9, r3
 800206a:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
 800206e:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8002072:	685b      	ldr	r3, [r3, #4]
 8002074:	2200      	movs	r2, #0
 8002076:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
 800207a:	f8c7 20dc 	str.w	r2, [r7, #220]	; 0xdc
 800207e:	e9d7 1236 	ldrd	r1, r2, [r7, #216]	; 0xd8
 8002082:	460b      	mov	r3, r1
 8002084:	18db      	adds	r3, r3, r3
 8002086:	653b      	str	r3, [r7, #80]	; 0x50
 8002088:	4613      	mov	r3, r2
 800208a:	eb42 0303 	adc.w	r3, r2, r3
 800208e:	657b      	str	r3, [r7, #84]	; 0x54
 8002090:	e9d7 2314 	ldrd	r2, r3, [r7, #80]	; 0x50
 8002094:	e9d7 0138 	ldrd	r0, r1, [r7, #224]	; 0xe0
 8002098:	f7fe f8b4 	bl	8000204 <__aeabi_uldivmod>
 800209c:	4602      	mov	r2, r0
 800209e:	460b      	mov	r3, r1
 80020a0:	4b61      	ldr	r3, [pc, #388]	; (8002228 <UART_SetConfig+0x2d4>)
 80020a2:	fba3 2302 	umull	r2, r3, r3, r2
 80020a6:	095b      	lsrs	r3, r3, #5
 80020a8:	011c      	lsls	r4, r3, #4
 80020aa:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 80020ae:	2200      	movs	r2, #0
 80020b0:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
 80020b4:	f8c7 20d4 	str.w	r2, [r7, #212]	; 0xd4
 80020b8:	e9d7 8934 	ldrd	r8, r9, [r7, #208]	; 0xd0
 80020bc:	4642      	mov	r2, r8
 80020be:	464b      	mov	r3, r9
 80020c0:	1891      	adds	r1, r2, r2
 80020c2:	64b9      	str	r1, [r7, #72]	; 0x48
 80020c4:	415b      	adcs	r3, r3
 80020c6:	64fb      	str	r3, [r7, #76]	; 0x4c
 80020c8:	e9d7 2312 	ldrd	r2, r3, [r7, #72]	; 0x48
 80020cc:	4641      	mov	r1, r8
 80020ce:	eb12 0a01 	adds.w	sl, r2, r1
 80020d2:	4649      	mov	r1, r9
 80020d4:	eb43 0b01 	adc.w	fp, r3, r1
 80020d8:	f04f 0200 	mov.w	r2, #0
 80020dc:	f04f 0300 	mov.w	r3, #0
 80020e0:	ea4f 03cb 	mov.w	r3, fp, lsl #3
 80020e4:	ea43 735a 	orr.w	r3, r3, sl, lsr #29
 80020e8:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 80020ec:	4692      	mov	sl, r2
 80020ee:	469b      	mov	fp, r3
 80020f0:	4643      	mov	r3, r8
 80020f2:	eb1a 0303 	adds.w	r3, sl, r3
 80020f6:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
 80020fa:	464b      	mov	r3, r9
 80020fc:	eb4b 0303 	adc.w	r3, fp, r3
 8002100:	f8c7 30cc 	str.w	r3, [r7, #204]	; 0xcc
 8002104:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8002108:	685b      	ldr	r3, [r3, #4]
 800210a:	2200      	movs	r2, #0
 800210c:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
 8002110:	f8c7 20c4 	str.w	r2, [r7, #196]	; 0xc4
 8002114:	e9d7 1230 	ldrd	r1, r2, [r7, #192]	; 0xc0
 8002118:	460b      	mov	r3, r1
 800211a:	18db      	adds	r3, r3, r3
 800211c:	643b      	str	r3, [r7, #64]	; 0x40
 800211e:	4613      	mov	r3, r2
 8002120:	eb42 0303 	adc.w	r3, r2, r3
 8002124:	647b      	str	r3, [r7, #68]	; 0x44
 8002126:	e9d7 2310 	ldrd	r2, r3, [r7, #64]	; 0x40
 800212a:	e9d7 0132 	ldrd	r0, r1, [r7, #200]	; 0xc8
 800212e:	f7fe f869 	bl	8000204 <__aeabi_uldivmod>
 8002132:	4602      	mov	r2, r0
 8002134:	460b      	mov	r3, r1
 8002136:	4611      	mov	r1, r2
 8002138:	4b3b      	ldr	r3, [pc, #236]	; (8002228 <UART_SetConfig+0x2d4>)
 800213a:	fba3 2301 	umull	r2, r3, r3, r1
 800213e:	095b      	lsrs	r3, r3, #5
 8002140:	2264      	movs	r2, #100	; 0x64
 8002142:	fb02 f303 	mul.w	r3, r2, r3
 8002146:	1acb      	subs	r3, r1, r3
 8002148:	00db      	lsls	r3, r3, #3
 800214a:	f103 0232 	add.w	r2, r3, #50	; 0x32
 800214e:	4b36      	ldr	r3, [pc, #216]	; (8002228 <UART_SetConfig+0x2d4>)
 8002150:	fba3 2302 	umull	r2, r3, r3, r2
 8002154:	095b      	lsrs	r3, r3, #5
 8002156:	005b      	lsls	r3, r3, #1
 8002158:	f403 73f8 	and.w	r3, r3, #496	; 0x1f0
 800215c:	441c      	add	r4, r3
 800215e:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8002162:	2200      	movs	r2, #0
 8002164:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
 8002168:	f8c7 20bc 	str.w	r2, [r7, #188]	; 0xbc
 800216c:	e9d7 892e 	ldrd	r8, r9, [r7, #184]	; 0xb8
 8002170:	4642      	mov	r2, r8
 8002172:	464b      	mov	r3, r9
 8002174:	1891      	adds	r1, r2, r2
 8002176:	63b9      	str	r1, [r7, #56]	; 0x38
 8002178:	415b      	adcs	r3, r3
 800217a:	63fb      	str	r3, [r7, #60]	; 0x3c
 800217c:	e9d7 230e 	ldrd	r2, r3, [r7, #56]	; 0x38
 8002180:	4641      	mov	r1, r8
 8002182:	1851      	adds	r1, r2, r1
 8002184:	6339      	str	r1, [r7, #48]	; 0x30
 8002186:	4649      	mov	r1, r9
 8002188:	414b      	adcs	r3, r1
 800218a:	637b      	str	r3, [r7, #52]	; 0x34
 800218c:	f04f 0200 	mov.w	r2, #0
 8002190:	f04f 0300 	mov.w	r3, #0
 8002194:	e9d7 ab0c 	ldrd	sl, fp, [r7, #48]	; 0x30
 8002198:	4659      	mov	r1, fp
 800219a:	00cb      	lsls	r3, r1, #3
 800219c:	4651      	mov	r1, sl
 800219e:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 80021a2:	4651      	mov	r1, sl
 80021a4:	00ca      	lsls	r2, r1, #3
 80021a6:	4610      	mov	r0, r2
 80021a8:	4619      	mov	r1, r3
 80021aa:	4603      	mov	r3, r0
 80021ac:	4642      	mov	r2, r8
 80021ae:	189b      	adds	r3, r3, r2
 80021b0:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
 80021b4:	464b      	mov	r3, r9
 80021b6:	460a      	mov	r2, r1
 80021b8:	eb42 0303 	adc.w	r3, r2, r3
 80021bc:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
 80021c0:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80021c4:	685b      	ldr	r3, [r3, #4]
 80021c6:	2200      	movs	r2, #0
 80021c8:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
 80021cc:	f8c7 20ac 	str.w	r2, [r7, #172]	; 0xac
 80021d0:	e9d7 122a 	ldrd	r1, r2, [r7, #168]	; 0xa8
 80021d4:	460b      	mov	r3, r1
 80021d6:	18db      	adds	r3, r3, r3
 80021d8:	62bb      	str	r3, [r7, #40]	; 0x28
 80021da:	4613      	mov	r3, r2
 80021dc:	eb42 0303 	adc.w	r3, r2, r3
 80021e0:	62fb      	str	r3, [r7, #44]	; 0x2c
 80021e2:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	; 0x28
 80021e6:	e9d7 012c 	ldrd	r0, r1, [r7, #176]	; 0xb0
 80021ea:	f7fe f80b 	bl	8000204 <__aeabi_uldivmod>
 80021ee:	4602      	mov	r2, r0
 80021f0:	460b      	mov	r3, r1
 80021f2:	4b0d      	ldr	r3, [pc, #52]	; (8002228 <UART_SetConfig+0x2d4>)
 80021f4:	fba3 1302 	umull	r1, r3, r3, r2
 80021f8:	095b      	lsrs	r3, r3, #5
 80021fa:	2164      	movs	r1, #100	; 0x64
 80021fc:	fb01 f303 	mul.w	r3, r1, r3
 8002200:	1ad3      	subs	r3, r2, r3
 8002202:	00db      	lsls	r3, r3, #3
 8002204:	3332      	adds	r3, #50	; 0x32
 8002206:	4a08      	ldr	r2, [pc, #32]	; (8002228 <UART_SetConfig+0x2d4>)
 8002208:	fba2 2303 	umull	r2, r3, r2, r3
 800220c:	095b      	lsrs	r3, r3, #5
 800220e:	f003 0207 	and.w	r2, r3, #7
 8002212:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8002216:	681b      	ldr	r3, [r3, #0]
 8002218:	4422      	add	r2, r4
 800221a:	609a      	str	r2, [r3, #8]
  }
  else
  {
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
  }
}
 800221c:	e105      	b.n	800242a <UART_SetConfig+0x4d6>
 800221e:	bf00      	nop
 8002220:	40011000 	.word	0x40011000
 8002224:	40011400 	.word	0x40011400
 8002228:	51eb851f 	.word	0x51eb851f
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 800222c:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8002230:	2200      	movs	r2, #0
 8002232:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
 8002236:	f8c7 20a4 	str.w	r2, [r7, #164]	; 0xa4
 800223a:	e9d7 8928 	ldrd	r8, r9, [r7, #160]	; 0xa0
 800223e:	4642      	mov	r2, r8
 8002240:	464b      	mov	r3, r9
 8002242:	1891      	adds	r1, r2, r2
 8002244:	6239      	str	r1, [r7, #32]
 8002246:	415b      	adcs	r3, r3
 8002248:	627b      	str	r3, [r7, #36]	; 0x24
 800224a:	e9d7 2308 	ldrd	r2, r3, [r7, #32]
 800224e:	4641      	mov	r1, r8
 8002250:	1854      	adds	r4, r2, r1
 8002252:	4649      	mov	r1, r9
 8002254:	eb43 0501 	adc.w	r5, r3, r1
 8002258:	f04f 0200 	mov.w	r2, #0
 800225c:	f04f 0300 	mov.w	r3, #0
 8002260:	00eb      	lsls	r3, r5, #3
 8002262:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 8002266:	00e2      	lsls	r2, r4, #3
 8002268:	4614      	mov	r4, r2
 800226a:	461d      	mov	r5, r3
 800226c:	4643      	mov	r3, r8
 800226e:	18e3      	adds	r3, r4, r3
 8002270:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
 8002274:	464b      	mov	r3, r9
 8002276:	eb45 0303 	adc.w	r3, r5, r3
 800227a:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
 800227e:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8002282:	685b      	ldr	r3, [r3, #4]
 8002284:	2200      	movs	r2, #0
 8002286:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
 800228a:	f8c7 2094 	str.w	r2, [r7, #148]	; 0x94
 800228e:	f04f 0200 	mov.w	r2, #0
 8002292:	f04f 0300 	mov.w	r3, #0
 8002296:	e9d7 4524 	ldrd	r4, r5, [r7, #144]	; 0x90
 800229a:	4629      	mov	r1, r5
 800229c:	008b      	lsls	r3, r1, #2
 800229e:	4621      	mov	r1, r4
 80022a0:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 80022a4:	4621      	mov	r1, r4
 80022a6:	008a      	lsls	r2, r1, #2
 80022a8:	e9d7 0126 	ldrd	r0, r1, [r7, #152]	; 0x98
 80022ac:	f7fd ffaa 	bl	8000204 <__aeabi_uldivmod>
 80022b0:	4602      	mov	r2, r0
 80022b2:	460b      	mov	r3, r1
 80022b4:	4b60      	ldr	r3, [pc, #384]	; (8002438 <UART_SetConfig+0x4e4>)
 80022b6:	fba3 2302 	umull	r2, r3, r3, r2
 80022ba:	095b      	lsrs	r3, r3, #5
 80022bc:	011c      	lsls	r4, r3, #4
 80022be:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 80022c2:	2200      	movs	r2, #0
 80022c4:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
 80022c8:	f8c7 208c 	str.w	r2, [r7, #140]	; 0x8c
 80022cc:	e9d7 8922 	ldrd	r8, r9, [r7, #136]	; 0x88
 80022d0:	4642      	mov	r2, r8
 80022d2:	464b      	mov	r3, r9
 80022d4:	1891      	adds	r1, r2, r2
 80022d6:	61b9      	str	r1, [r7, #24]
 80022d8:	415b      	adcs	r3, r3
 80022da:	61fb      	str	r3, [r7, #28]
 80022dc:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 80022e0:	4641      	mov	r1, r8
 80022e2:	1851      	adds	r1, r2, r1
 80022e4:	6139      	str	r1, [r7, #16]
 80022e6:	4649      	mov	r1, r9
 80022e8:	414b      	adcs	r3, r1
 80022ea:	617b      	str	r3, [r7, #20]
 80022ec:	f04f 0200 	mov.w	r2, #0
 80022f0:	f04f 0300 	mov.w	r3, #0
 80022f4:	e9d7 ab04 	ldrd	sl, fp, [r7, #16]
 80022f8:	4659      	mov	r1, fp
 80022fa:	00cb      	lsls	r3, r1, #3
 80022fc:	4651      	mov	r1, sl
 80022fe:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 8002302:	4651      	mov	r1, sl
 8002304:	00ca      	lsls	r2, r1, #3
 8002306:	4610      	mov	r0, r2
 8002308:	4619      	mov	r1, r3
 800230a:	4603      	mov	r3, r0
 800230c:	4642      	mov	r2, r8
 800230e:	189b      	adds	r3, r3, r2
 8002310:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
 8002314:	464b      	mov	r3, r9
 8002316:	460a      	mov	r2, r1
 8002318:	eb42 0303 	adc.w	r3, r2, r3
 800231c:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
 8002320:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8002324:	685b      	ldr	r3, [r3, #4]
 8002326:	2200      	movs	r2, #0
 8002328:	67bb      	str	r3, [r7, #120]	; 0x78
 800232a:	67fa      	str	r2, [r7, #124]	; 0x7c
 800232c:	f04f 0200 	mov.w	r2, #0
 8002330:	f04f 0300 	mov.w	r3, #0
 8002334:	e9d7 891e 	ldrd	r8, r9, [r7, #120]	; 0x78
 8002338:	4649      	mov	r1, r9
 800233a:	008b      	lsls	r3, r1, #2
 800233c:	4641      	mov	r1, r8
 800233e:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 8002342:	4641      	mov	r1, r8
 8002344:	008a      	lsls	r2, r1, #2
 8002346:	e9d7 0120 	ldrd	r0, r1, [r7, #128]	; 0x80
 800234a:	f7fd ff5b 	bl	8000204 <__aeabi_uldivmod>
 800234e:	4602      	mov	r2, r0
 8002350:	460b      	mov	r3, r1
 8002352:	4b39      	ldr	r3, [pc, #228]	; (8002438 <UART_SetConfig+0x4e4>)
 8002354:	fba3 1302 	umull	r1, r3, r3, r2
 8002358:	095b      	lsrs	r3, r3, #5
 800235a:	2164      	movs	r1, #100	; 0x64
 800235c:	fb01 f303 	mul.w	r3, r1, r3
 8002360:	1ad3      	subs	r3, r2, r3
 8002362:	011b      	lsls	r3, r3, #4
 8002364:	3332      	adds	r3, #50	; 0x32
 8002366:	4a34      	ldr	r2, [pc, #208]	; (8002438 <UART_SetConfig+0x4e4>)
 8002368:	fba2 2303 	umull	r2, r3, r2, r3
 800236c:	095b      	lsrs	r3, r3, #5
 800236e:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8002372:	441c      	add	r4, r3
 8002374:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8002378:	2200      	movs	r2, #0
 800237a:	673b      	str	r3, [r7, #112]	; 0x70
 800237c:	677a      	str	r2, [r7, #116]	; 0x74
 800237e:	e9d7 891c 	ldrd	r8, r9, [r7, #112]	; 0x70
 8002382:	4642      	mov	r2, r8
 8002384:	464b      	mov	r3, r9
 8002386:	1891      	adds	r1, r2, r2
 8002388:	60b9      	str	r1, [r7, #8]
 800238a:	415b      	adcs	r3, r3
 800238c:	60fb      	str	r3, [r7, #12]
 800238e:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 8002392:	4641      	mov	r1, r8
 8002394:	1851      	adds	r1, r2, r1
 8002396:	6039      	str	r1, [r7, #0]
 8002398:	4649      	mov	r1, r9
 800239a:	414b      	adcs	r3, r1
 800239c:	607b      	str	r3, [r7, #4]
 800239e:	f04f 0200 	mov.w	r2, #0
 80023a2:	f04f 0300 	mov.w	r3, #0
 80023a6:	e9d7 ab00 	ldrd	sl, fp, [r7]
 80023aa:	4659      	mov	r1, fp
 80023ac:	00cb      	lsls	r3, r1, #3
 80023ae:	4651      	mov	r1, sl
 80023b0:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 80023b4:	4651      	mov	r1, sl
 80023b6:	00ca      	lsls	r2, r1, #3
 80023b8:	4610      	mov	r0, r2
 80023ba:	4619      	mov	r1, r3
 80023bc:	4603      	mov	r3, r0
 80023be:	4642      	mov	r2, r8
 80023c0:	189b      	adds	r3, r3, r2
 80023c2:	66bb      	str	r3, [r7, #104]	; 0x68
 80023c4:	464b      	mov	r3, r9
 80023c6:	460a      	mov	r2, r1
 80023c8:	eb42 0303 	adc.w	r3, r2, r3
 80023cc:	66fb      	str	r3, [r7, #108]	; 0x6c
 80023ce:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80023d2:	685b      	ldr	r3, [r3, #4]
 80023d4:	2200      	movs	r2, #0
 80023d6:	663b      	str	r3, [r7, #96]	; 0x60
 80023d8:	667a      	str	r2, [r7, #100]	; 0x64
 80023da:	f04f 0200 	mov.w	r2, #0
 80023de:	f04f 0300 	mov.w	r3, #0
 80023e2:	e9d7 8918 	ldrd	r8, r9, [r7, #96]	; 0x60
 80023e6:	4649      	mov	r1, r9
 80023e8:	008b      	lsls	r3, r1, #2
 80023ea:	4641      	mov	r1, r8
 80023ec:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 80023f0:	4641      	mov	r1, r8
 80023f2:	008a      	lsls	r2, r1, #2
 80023f4:	e9d7 011a 	ldrd	r0, r1, [r7, #104]	; 0x68
 80023f8:	f7fd ff04 	bl	8000204 <__aeabi_uldivmod>
 80023fc:	4602      	mov	r2, r0
 80023fe:	460b      	mov	r3, r1
 8002400:	4b0d      	ldr	r3, [pc, #52]	; (8002438 <UART_SetConfig+0x4e4>)
 8002402:	fba3 1302 	umull	r1, r3, r3, r2
 8002406:	095b      	lsrs	r3, r3, #5
 8002408:	2164      	movs	r1, #100	; 0x64
 800240a:	fb01 f303 	mul.w	r3, r1, r3
 800240e:	1ad3      	subs	r3, r2, r3
 8002410:	011b      	lsls	r3, r3, #4
 8002412:	3332      	adds	r3, #50	; 0x32
 8002414:	4a08      	ldr	r2, [pc, #32]	; (8002438 <UART_SetConfig+0x4e4>)
 8002416:	fba2 2303 	umull	r2, r3, r2, r3
 800241a:	095b      	lsrs	r3, r3, #5
 800241c:	f003 020f 	and.w	r2, r3, #15
 8002420:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8002424:	681b      	ldr	r3, [r3, #0]
 8002426:	4422      	add	r2, r4
 8002428:	609a      	str	r2, [r3, #8]
}
 800242a:	bf00      	nop
 800242c:	f507 7780 	add.w	r7, r7, #256	; 0x100
 8002430:	46bd      	mov	sp, r7
 8002432:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8002436:	bf00      	nop
 8002438:	51eb851f 	.word	0x51eb851f

0800243c <vListInitialise>:
/*-----------------------------------------------------------
 * PUBLIC LIST API documented in list.h
 *----------------------------------------------------------*/

void vListInitialise( List_t * const pxList )
{
 800243c:	b480      	push	{r7}
 800243e:	b083      	sub	sp, #12
 8002440:	af00      	add	r7, sp, #0
 8002442:	6078      	str	r0, [r7, #4]
	/* The list structure contains a list item which is used to mark the
	end of the list.  To initialise the list the list end is inserted
	as the only list entry. */
	pxList->pxIndex = ( ListItem_t * ) &( pxList->xListEnd );			/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8002444:	687b      	ldr	r3, [r7, #4]
 8002446:	f103 0208 	add.w	r2, r3, #8
 800244a:	687b      	ldr	r3, [r7, #4]
 800244c:	605a      	str	r2, [r3, #4]

	/* The list end value is the highest possible value in the list to
	ensure it remains at the end of the list. */
	pxList->xListEnd.xItemValue = portMAX_DELAY;
 800244e:	687b      	ldr	r3, [r7, #4]
 8002450:	f04f 32ff 	mov.w	r2, #4294967295
 8002454:	609a      	str	r2, [r3, #8]

	/* The list end next and previous pointers point to itself so we know
	when the list is empty. */
	pxList->xListEnd.pxNext = ( ListItem_t * ) &( pxList->xListEnd );	/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8002456:	687b      	ldr	r3, [r7, #4]
 8002458:	f103 0208 	add.w	r2, r3, #8
 800245c:	687b      	ldr	r3, [r7, #4]
 800245e:	60da      	str	r2, [r3, #12]
	pxList->xListEnd.pxPrevious = ( ListItem_t * ) &( pxList->xListEnd );/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8002460:	687b      	ldr	r3, [r7, #4]
 8002462:	f103 0208 	add.w	r2, r3, #8
 8002466:	687b      	ldr	r3, [r7, #4]
 8002468:	611a      	str	r2, [r3, #16]

	pxList->uxNumberOfItems = ( UBaseType_t ) 0U;
 800246a:	687b      	ldr	r3, [r7, #4]
 800246c:	2200      	movs	r2, #0
 800246e:	601a      	str	r2, [r3, #0]

	/* Write known values into the list if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_LIST_INTEGRITY_CHECK_1_VALUE( pxList );
	listSET_LIST_INTEGRITY_CHECK_2_VALUE( pxList );
}
 8002470:	bf00      	nop
 8002472:	370c      	adds	r7, #12
 8002474:	46bd      	mov	sp, r7
 8002476:	f85d 7b04 	ldr.w	r7, [sp], #4
 800247a:	4770      	bx	lr

0800247c <vListInitialiseItem>:
/*-----------------------------------------------------------*/

void vListInitialiseItem( ListItem_t * const pxItem )
{
 800247c:	b480      	push	{r7}
 800247e:	b083      	sub	sp, #12
 8002480:	af00      	add	r7, sp, #0
 8002482:	6078      	str	r0, [r7, #4]
	/* Make sure the list item is not recorded as being on a list. */
	pxItem->pxContainer = NULL;
 8002484:	687b      	ldr	r3, [r7, #4]
 8002486:	2200      	movs	r2, #0
 8002488:	611a      	str	r2, [r3, #16]

	/* Write known values into the list item if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_FIRST_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
	listSET_SECOND_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
}
 800248a:	bf00      	nop
 800248c:	370c      	adds	r7, #12
 800248e:	46bd      	mov	sp, r7
 8002490:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002494:	4770      	bx	lr

08002496 <vListInsertEnd>:
/*-----------------------------------------------------------*/

void vListInsertEnd( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 8002496:	b480      	push	{r7}
 8002498:	b085      	sub	sp, #20
 800249a:	af00      	add	r7, sp, #0
 800249c:	6078      	str	r0, [r7, #4]
 800249e:	6039      	str	r1, [r7, #0]
ListItem_t * const pxIndex = pxList->pxIndex;
 80024a0:	687b      	ldr	r3, [r7, #4]
 80024a2:	685b      	ldr	r3, [r3, #4]
 80024a4:	60fb      	str	r3, [r7, #12]
	listTEST_LIST_ITEM_INTEGRITY( pxNewListItem );

	/* Insert a new list item into pxList, but rather than sort the list,
	makes the new list item the last item to be removed by a call to
	listGET_OWNER_OF_NEXT_ENTRY(). */
	pxNewListItem->pxNext = pxIndex;
 80024a6:	683b      	ldr	r3, [r7, #0]
 80024a8:	68fa      	ldr	r2, [r7, #12]
 80024aa:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxPrevious = pxIndex->pxPrevious;
 80024ac:	68fb      	ldr	r3, [r7, #12]
 80024ae:	689a      	ldr	r2, [r3, #8]
 80024b0:	683b      	ldr	r3, [r7, #0]
 80024b2:	609a      	str	r2, [r3, #8]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	pxIndex->pxPrevious->pxNext = pxNewListItem;
 80024b4:	68fb      	ldr	r3, [r7, #12]
 80024b6:	689b      	ldr	r3, [r3, #8]
 80024b8:	683a      	ldr	r2, [r7, #0]
 80024ba:	605a      	str	r2, [r3, #4]
	pxIndex->pxPrevious = pxNewListItem;
 80024bc:	68fb      	ldr	r3, [r7, #12]
 80024be:	683a      	ldr	r2, [r7, #0]
 80024c0:	609a      	str	r2, [r3, #8]

	/* Remember which list the item is in. */
	pxNewListItem->pxContainer = pxList;
 80024c2:	683b      	ldr	r3, [r7, #0]
 80024c4:	687a      	ldr	r2, [r7, #4]
 80024c6:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 80024c8:	687b      	ldr	r3, [r7, #4]
 80024ca:	681b      	ldr	r3, [r3, #0]
 80024cc:	1c5a      	adds	r2, r3, #1
 80024ce:	687b      	ldr	r3, [r7, #4]
 80024d0:	601a      	str	r2, [r3, #0]
}
 80024d2:	bf00      	nop
 80024d4:	3714      	adds	r7, #20
 80024d6:	46bd      	mov	sp, r7
 80024d8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80024dc:	4770      	bx	lr

080024de <vListInsert>:
/*-----------------------------------------------------------*/

void vListInsert( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 80024de:	b480      	push	{r7}
 80024e0:	b085      	sub	sp, #20
 80024e2:	af00      	add	r7, sp, #0
 80024e4:	6078      	str	r0, [r7, #4]
 80024e6:	6039      	str	r1, [r7, #0]
ListItem_t *pxIterator;
const TickType_t xValueOfInsertion = pxNewListItem->xItemValue;
 80024e8:	683b      	ldr	r3, [r7, #0]
 80024ea:	681b      	ldr	r3, [r3, #0]
 80024ec:	60bb      	str	r3, [r7, #8]
	new list item should be placed after it.  This ensures that TCBs which are
	stored in ready lists (all of which have the same xItemValue value) get a
	share of the CPU.  However, if the xItemValue is the same as the back marker
	the iteration loop below will not end.  Therefore the value is checked
	first, and the algorithm slightly modified if necessary. */
	if( xValueOfInsertion == portMAX_DELAY )
 80024ee:	68bb      	ldr	r3, [r7, #8]
 80024f0:	f1b3 3fff 	cmp.w	r3, #4294967295
 80024f4:	d103      	bne.n	80024fe <vListInsert+0x20>
	{
		pxIterator = pxList->xListEnd.pxPrevious;
 80024f6:	687b      	ldr	r3, [r7, #4]
 80024f8:	691b      	ldr	r3, [r3, #16]
 80024fa:	60fb      	str	r3, [r7, #12]
 80024fc:	e00c      	b.n	8002518 <vListInsert+0x3a>
			4) Using a queue or semaphore before it has been initialised or
			   before the scheduler has been started (are interrupts firing
			   before vTaskStartScheduler() has been called?).
		**********************************************************************/

		for( pxIterator = ( ListItem_t * ) &( pxList->xListEnd ); pxIterator->pxNext->xItemValue <= xValueOfInsertion; pxIterator = pxIterator->pxNext ) /*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. *//*lint !e440 The iterator moves to a different value, not xValueOfInsertion. */
 80024fe:	687b      	ldr	r3, [r7, #4]
 8002500:	3308      	adds	r3, #8
 8002502:	60fb      	str	r3, [r7, #12]
 8002504:	e002      	b.n	800250c <vListInsert+0x2e>
 8002506:	68fb      	ldr	r3, [r7, #12]
 8002508:	685b      	ldr	r3, [r3, #4]
 800250a:	60fb      	str	r3, [r7, #12]
 800250c:	68fb      	ldr	r3, [r7, #12]
 800250e:	685b      	ldr	r3, [r3, #4]
 8002510:	681b      	ldr	r3, [r3, #0]
 8002512:	68ba      	ldr	r2, [r7, #8]
 8002514:	429a      	cmp	r2, r3
 8002516:	d2f6      	bcs.n	8002506 <vListInsert+0x28>
			/* There is nothing to do here, just iterating to the wanted
			insertion position. */
		}
	}

	pxNewListItem->pxNext = pxIterator->pxNext;
 8002518:	68fb      	ldr	r3, [r7, #12]
 800251a:	685a      	ldr	r2, [r3, #4]
 800251c:	683b      	ldr	r3, [r7, #0]
 800251e:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxNext->pxPrevious = pxNewListItem;
 8002520:	683b      	ldr	r3, [r7, #0]
 8002522:	685b      	ldr	r3, [r3, #4]
 8002524:	683a      	ldr	r2, [r7, #0]
 8002526:	609a      	str	r2, [r3, #8]
	pxNewListItem->pxPrevious = pxIterator;
 8002528:	683b      	ldr	r3, [r7, #0]
 800252a:	68fa      	ldr	r2, [r7, #12]
 800252c:	609a      	str	r2, [r3, #8]
	pxIterator->pxNext = pxNewListItem;
 800252e:	68fb      	ldr	r3, [r7, #12]
 8002530:	683a      	ldr	r2, [r7, #0]
 8002532:	605a      	str	r2, [r3, #4]

	/* Remember which list the item is in.  This allows fast removal of the
	item later. */
	pxNewListItem->pxContainer = pxList;
 8002534:	683b      	ldr	r3, [r7, #0]
 8002536:	687a      	ldr	r2, [r7, #4]
 8002538:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 800253a:	687b      	ldr	r3, [r7, #4]
 800253c:	681b      	ldr	r3, [r3, #0]
 800253e:	1c5a      	adds	r2, r3, #1
 8002540:	687b      	ldr	r3, [r7, #4]
 8002542:	601a      	str	r2, [r3, #0]
}
 8002544:	bf00      	nop
 8002546:	3714      	adds	r7, #20
 8002548:	46bd      	mov	sp, r7
 800254a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800254e:	4770      	bx	lr

08002550 <uxListRemove>:
/*-----------------------------------------------------------*/

UBaseType_t uxListRemove( ListItem_t * const pxItemToRemove )
{
 8002550:	b480      	push	{r7}
 8002552:	b085      	sub	sp, #20
 8002554:	af00      	add	r7, sp, #0
 8002556:	6078      	str	r0, [r7, #4]
/* The list item knows which list it is in.  Obtain the list from the list
item. */
List_t * const pxList = pxItemToRemove->pxContainer;
 8002558:	687b      	ldr	r3, [r7, #4]
 800255a:	691b      	ldr	r3, [r3, #16]
 800255c:	60fb      	str	r3, [r7, #12]

	pxItemToRemove->pxNext->pxPrevious = pxItemToRemove->pxPrevious;
 800255e:	687b      	ldr	r3, [r7, #4]
 8002560:	685b      	ldr	r3, [r3, #4]
 8002562:	687a      	ldr	r2, [r7, #4]
 8002564:	6892      	ldr	r2, [r2, #8]
 8002566:	609a      	str	r2, [r3, #8]
	pxItemToRemove->pxPrevious->pxNext = pxItemToRemove->pxNext;
 8002568:	687b      	ldr	r3, [r7, #4]
 800256a:	689b      	ldr	r3, [r3, #8]
 800256c:	687a      	ldr	r2, [r7, #4]
 800256e:	6852      	ldr	r2, [r2, #4]
 8002570:	605a      	str	r2, [r3, #4]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	/* Make sure the index is left pointing to a valid item. */
	if( pxList->pxIndex == pxItemToRemove )
 8002572:	68fb      	ldr	r3, [r7, #12]
 8002574:	685b      	ldr	r3, [r3, #4]
 8002576:	687a      	ldr	r2, [r7, #4]
 8002578:	429a      	cmp	r2, r3
 800257a:	d103      	bne.n	8002584 <uxListRemove+0x34>
	{
		pxList->pxIndex = pxItemToRemove->pxPrevious;
 800257c:	687b      	ldr	r3, [r7, #4]
 800257e:	689a      	ldr	r2, [r3, #8]
 8002580:	68fb      	ldr	r3, [r7, #12]
 8002582:	605a      	str	r2, [r3, #4]
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxItemToRemove->pxContainer = NULL;
 8002584:	687b      	ldr	r3, [r7, #4]
 8002586:	2200      	movs	r2, #0
 8002588:	611a      	str	r2, [r3, #16]
	( pxList->uxNumberOfItems )--;
 800258a:	68fb      	ldr	r3, [r7, #12]
 800258c:	681b      	ldr	r3, [r3, #0]
 800258e:	1e5a      	subs	r2, r3, #1
 8002590:	68fb      	ldr	r3, [r7, #12]
 8002592:	601a      	str	r2, [r3, #0]

	return pxList->uxNumberOfItems;
 8002594:	68fb      	ldr	r3, [r7, #12]
 8002596:	681b      	ldr	r3, [r3, #0]
}
 8002598:	4618      	mov	r0, r3
 800259a:	3714      	adds	r7, #20
 800259c:	46bd      	mov	sp, r7
 800259e:	f85d 7b04 	ldr.w	r7, [sp], #4
 80025a2:	4770      	bx	lr

080025a4 <xQueueGenericReset>:
	}														\
	taskEXIT_CRITICAL()
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericReset( QueueHandle_t xQueue, BaseType_t xNewQueue )
{
 80025a4:	b580      	push	{r7, lr}
 80025a6:	b084      	sub	sp, #16
 80025a8:	af00      	add	r7, sp, #0
 80025aa:	6078      	str	r0, [r7, #4]
 80025ac:	6039      	str	r1, [r7, #0]
Queue_t * const pxQueue = xQueue;
 80025ae:	687b      	ldr	r3, [r7, #4]
 80025b0:	60fb      	str	r3, [r7, #12]

	configASSERT( pxQueue );
 80025b2:	68fb      	ldr	r3, [r7, #12]
 80025b4:	2b00      	cmp	r3, #0
 80025b6:	d10a      	bne.n	80025ce <xQueueGenericReset+0x2a>

portFORCE_INLINE static void vPortRaiseBASEPRI( void )
{
uint32_t ulNewBASEPRI;

	__asm volatile
 80025b8:	f04f 0350 	mov.w	r3, #80	; 0x50
 80025bc:	f383 8811 	msr	BASEPRI, r3
 80025c0:	f3bf 8f6f 	isb	sy
 80025c4:	f3bf 8f4f 	dsb	sy
 80025c8:	60bb      	str	r3, [r7, #8]
		"	msr basepri, %0											\n" \
		"	isb														\n" \
		"	dsb														\n" \
		:"=r" (ulNewBASEPRI) : "i" ( configMAX_SYSCALL_INTERRUPT_PRIORITY ) : "memory"
	);
}
 80025ca:	bf00      	nop
 80025cc:	e7fe      	b.n	80025cc <xQueueGenericReset+0x28>

	taskENTER_CRITICAL();
 80025ce:	f001 fe31 	bl	8004234 <vPortEnterCritical>
	{
		pxQueue->u.xQueue.pcTail = pxQueue->pcHead + ( pxQueue->uxLength * pxQueue->uxItemSize ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 80025d2:	68fb      	ldr	r3, [r7, #12]
 80025d4:	681a      	ldr	r2, [r3, #0]
 80025d6:	68fb      	ldr	r3, [r7, #12]
 80025d8:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80025da:	68f9      	ldr	r1, [r7, #12]
 80025dc:	6c09      	ldr	r1, [r1, #64]	; 0x40
 80025de:	fb01 f303 	mul.w	r3, r1, r3
 80025e2:	441a      	add	r2, r3
 80025e4:	68fb      	ldr	r3, [r7, #12]
 80025e6:	609a      	str	r2, [r3, #8]
		pxQueue->uxMessagesWaiting = ( UBaseType_t ) 0U;
 80025e8:	68fb      	ldr	r3, [r7, #12]
 80025ea:	2200      	movs	r2, #0
 80025ec:	639a      	str	r2, [r3, #56]	; 0x38
		pxQueue->pcWriteTo = pxQueue->pcHead;
 80025ee:	68fb      	ldr	r3, [r7, #12]
 80025f0:	681a      	ldr	r2, [r3, #0]
 80025f2:	68fb      	ldr	r3, [r7, #12]
 80025f4:	605a      	str	r2, [r3, #4]
		pxQueue->u.xQueue.pcReadFrom = pxQueue->pcHead + ( ( pxQueue->uxLength - 1U ) * pxQueue->uxItemSize ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 80025f6:	68fb      	ldr	r3, [r7, #12]
 80025f8:	681a      	ldr	r2, [r3, #0]
 80025fa:	68fb      	ldr	r3, [r7, #12]
 80025fc:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80025fe:	3b01      	subs	r3, #1
 8002600:	68f9      	ldr	r1, [r7, #12]
 8002602:	6c09      	ldr	r1, [r1, #64]	; 0x40
 8002604:	fb01 f303 	mul.w	r3, r1, r3
 8002608:	441a      	add	r2, r3
 800260a:	68fb      	ldr	r3, [r7, #12]
 800260c:	60da      	str	r2, [r3, #12]
		pxQueue->cRxLock = queueUNLOCKED;
 800260e:	68fb      	ldr	r3, [r7, #12]
 8002610:	22ff      	movs	r2, #255	; 0xff
 8002612:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
		pxQueue->cTxLock = queueUNLOCKED;
 8002616:	68fb      	ldr	r3, [r7, #12]
 8002618:	22ff      	movs	r2, #255	; 0xff
 800261a:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

		if( xNewQueue == pdFALSE )
 800261e:	683b      	ldr	r3, [r7, #0]
 8002620:	2b00      	cmp	r3, #0
 8002622:	d114      	bne.n	800264e <xQueueGenericReset+0xaa>
			/* If there are tasks blocked waiting to read from the queue, then
			the tasks will remain blocked as after this function exits the queue
			will still be empty.  If there are tasks blocked waiting to write to
			the queue, then one should be unblocked as after this function exits
			it will be possible to write to it. */
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 8002624:	68fb      	ldr	r3, [r7, #12]
 8002626:	691b      	ldr	r3, [r3, #16]
 8002628:	2b00      	cmp	r3, #0
 800262a:	d01a      	beq.n	8002662 <xQueueGenericReset+0xbe>
			{
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 800262c:	68fb      	ldr	r3, [r7, #12]
 800262e:	3310      	adds	r3, #16
 8002630:	4618      	mov	r0, r3
 8002632:	f001 f8ed 	bl	8003810 <xTaskRemoveFromEventList>
 8002636:	4603      	mov	r3, r0
 8002638:	2b00      	cmp	r3, #0
 800263a:	d012      	beq.n	8002662 <xQueueGenericReset+0xbe>
				{
					queueYIELD_IF_USING_PREEMPTION();
 800263c:	4b0c      	ldr	r3, [pc, #48]	; (8002670 <xQueueGenericReset+0xcc>)
 800263e:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8002642:	601a      	str	r2, [r3, #0]
 8002644:	f3bf 8f4f 	dsb	sy
 8002648:	f3bf 8f6f 	isb	sy
 800264c:	e009      	b.n	8002662 <xQueueGenericReset+0xbe>
			}
		}
		else
		{
			/* Ensure the event queues start in the correct state. */
			vListInitialise( &( pxQueue->xTasksWaitingToSend ) );
 800264e:	68fb      	ldr	r3, [r7, #12]
 8002650:	3310      	adds	r3, #16
 8002652:	4618      	mov	r0, r3
 8002654:	f7ff fef2 	bl	800243c <vListInitialise>
			vListInitialise( &( pxQueue->xTasksWaitingToReceive ) );
 8002658:	68fb      	ldr	r3, [r7, #12]
 800265a:	3324      	adds	r3, #36	; 0x24
 800265c:	4618      	mov	r0, r3
 800265e:	f7ff feed 	bl	800243c <vListInitialise>
		}
	}
	taskEXIT_CRITICAL();
 8002662:	f001 fe17 	bl	8004294 <vPortExitCritical>

	/* A value is returned for calling semantic consistency with previous
	versions. */
	return pdPASS;
 8002666:	2301      	movs	r3, #1
}
 8002668:	4618      	mov	r0, r3
 800266a:	3710      	adds	r7, #16
 800266c:	46bd      	mov	sp, r7
 800266e:	bd80      	pop	{r7, pc}
 8002670:	e000ed04 	.word	0xe000ed04

08002674 <xQueueGenericCreate>:
/*-----------------------------------------------------------*/

#if( configSUPPORT_DYNAMIC_ALLOCATION == 1 )

	QueueHandle_t xQueueGenericCreate( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, const uint8_t ucQueueType )
	{
 8002674:	b580      	push	{r7, lr}
 8002676:	b08a      	sub	sp, #40	; 0x28
 8002678:	af02      	add	r7, sp, #8
 800267a:	60f8      	str	r0, [r7, #12]
 800267c:	60b9      	str	r1, [r7, #8]
 800267e:	4613      	mov	r3, r2
 8002680:	71fb      	strb	r3, [r7, #7]
	Queue_t *pxNewQueue;
	size_t xQueueSizeInBytes;
	uint8_t *pucQueueStorage;

		configASSERT( uxQueueLength > ( UBaseType_t ) 0 );
 8002682:	68fb      	ldr	r3, [r7, #12]
 8002684:	2b00      	cmp	r3, #0
 8002686:	d10a      	bne.n	800269e <xQueueGenericCreate+0x2a>
	__asm volatile
 8002688:	f04f 0350 	mov.w	r3, #80	; 0x50
 800268c:	f383 8811 	msr	BASEPRI, r3
 8002690:	f3bf 8f6f 	isb	sy
 8002694:	f3bf 8f4f 	dsb	sy
 8002698:	613b      	str	r3, [r7, #16]
}
 800269a:	bf00      	nop
 800269c:	e7fe      	b.n	800269c <xQueueGenericCreate+0x28>

		/* Allocate enough space to hold the maximum number of items that
		can be in the queue at any time.  It is valid for uxItemSize to be
		zero in the case the queue is used as a semaphore. */
		xQueueSizeInBytes = ( size_t ) ( uxQueueLength * uxItemSize ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 800269e:	68fb      	ldr	r3, [r7, #12]
 80026a0:	68ba      	ldr	r2, [r7, #8]
 80026a2:	fb02 f303 	mul.w	r3, r2, r3
 80026a6:	61fb      	str	r3, [r7, #28]
		alignment requirements of the Queue_t structure - which in this case
		is an int8_t *.  Therefore, whenever the stack alignment requirements
		are greater than or equal to the pointer to char requirements the cast
		is safe.  In other cases alignment requirements are not strict (one or
		two bytes). */
		pxNewQueue = ( Queue_t * ) pvPortMalloc( sizeof( Queue_t ) + xQueueSizeInBytes ); /*lint !e9087 !e9079 see comment above. */
 80026a8:	69fb      	ldr	r3, [r7, #28]
 80026aa:	3348      	adds	r3, #72	; 0x48
 80026ac:	4618      	mov	r0, r3
 80026ae:	f001 fea3 	bl	80043f8 <pvPortMalloc>
 80026b2:	61b8      	str	r0, [r7, #24]

		if( pxNewQueue != NULL )
 80026b4:	69bb      	ldr	r3, [r7, #24]
 80026b6:	2b00      	cmp	r3, #0
 80026b8:	d011      	beq.n	80026de <xQueueGenericCreate+0x6a>
		{
			/* Jump past the queue structure to find the location of the queue
			storage area. */
			pucQueueStorage = ( uint8_t * ) pxNewQueue;
 80026ba:	69bb      	ldr	r3, [r7, #24]
 80026bc:	617b      	str	r3, [r7, #20]
			pucQueueStorage += sizeof( Queue_t ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 80026be:	697b      	ldr	r3, [r7, #20]
 80026c0:	3348      	adds	r3, #72	; 0x48
 80026c2:	617b      	str	r3, [r7, #20]
			#if( configSUPPORT_STATIC_ALLOCATION == 1 )
			{
				/* Queues can be created either statically or dynamically, so
				note this task was created dynamically in case it is later
				deleted. */
				pxNewQueue->ucStaticallyAllocated = pdFALSE;
 80026c4:	69bb      	ldr	r3, [r7, #24]
 80026c6:	2200      	movs	r2, #0
 80026c8:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
			}
			#endif /* configSUPPORT_STATIC_ALLOCATION */

			prvInitialiseNewQueue( uxQueueLength, uxItemSize, pucQueueStorage, ucQueueType, pxNewQueue );
 80026cc:	79fa      	ldrb	r2, [r7, #7]
 80026ce:	69bb      	ldr	r3, [r7, #24]
 80026d0:	9300      	str	r3, [sp, #0]
 80026d2:	4613      	mov	r3, r2
 80026d4:	697a      	ldr	r2, [r7, #20]
 80026d6:	68b9      	ldr	r1, [r7, #8]
 80026d8:	68f8      	ldr	r0, [r7, #12]
 80026da:	f000 f805 	bl	80026e8 <prvInitialiseNewQueue>
		{
			traceQUEUE_CREATE_FAILED( ucQueueType );
			mtCOVERAGE_TEST_MARKER();
		}

		return pxNewQueue;
 80026de:	69bb      	ldr	r3, [r7, #24]
	}
 80026e0:	4618      	mov	r0, r3
 80026e2:	3720      	adds	r7, #32
 80026e4:	46bd      	mov	sp, r7
 80026e6:	bd80      	pop	{r7, pc}

080026e8 <prvInitialiseNewQueue>:

#endif /* configSUPPORT_STATIC_ALLOCATION */
/*-----------------------------------------------------------*/

static void prvInitialiseNewQueue( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, uint8_t *pucQueueStorage, const uint8_t ucQueueType, Queue_t *pxNewQueue )
{
 80026e8:	b580      	push	{r7, lr}
 80026ea:	b084      	sub	sp, #16
 80026ec:	af00      	add	r7, sp, #0
 80026ee:	60f8      	str	r0, [r7, #12]
 80026f0:	60b9      	str	r1, [r7, #8]
 80026f2:	607a      	str	r2, [r7, #4]
 80026f4:	70fb      	strb	r3, [r7, #3]
	/* Remove compiler warnings about unused parameters should
	configUSE_TRACE_FACILITY not be set to 1. */
	( void ) ucQueueType;

	if( uxItemSize == ( UBaseType_t ) 0 )
 80026f6:	68bb      	ldr	r3, [r7, #8]
 80026f8:	2b00      	cmp	r3, #0
 80026fa:	d103      	bne.n	8002704 <prvInitialiseNewQueue+0x1c>
	{
		/* No RAM was allocated for the queue storage area, but PC head cannot
		be set to NULL because NULL is used as a key to say the queue is used as
		a mutex.  Therefore just set pcHead to point to the queue as a benign
		value that is known to be within the memory map. */
		pxNewQueue->pcHead = ( int8_t * ) pxNewQueue;
 80026fc:	69bb      	ldr	r3, [r7, #24]
 80026fe:	69ba      	ldr	r2, [r7, #24]
 8002700:	601a      	str	r2, [r3, #0]
 8002702:	e002      	b.n	800270a <prvInitialiseNewQueue+0x22>
	}
	else
	{
		/* Set the head to the start of the queue storage area. */
		pxNewQueue->pcHead = ( int8_t * ) pucQueueStorage;
 8002704:	69bb      	ldr	r3, [r7, #24]
 8002706:	687a      	ldr	r2, [r7, #4]
 8002708:	601a      	str	r2, [r3, #0]
	}

	/* Initialise the queue members as described where the queue type is
	defined. */
	pxNewQueue->uxLength = uxQueueLength;
 800270a:	69bb      	ldr	r3, [r7, #24]
 800270c:	68fa      	ldr	r2, [r7, #12]
 800270e:	63da      	str	r2, [r3, #60]	; 0x3c
	pxNewQueue->uxItemSize = uxItemSize;
 8002710:	69bb      	ldr	r3, [r7, #24]
 8002712:	68ba      	ldr	r2, [r7, #8]
 8002714:	641a      	str	r2, [r3, #64]	; 0x40
	( void ) xQueueGenericReset( pxNewQueue, pdTRUE );
 8002716:	2101      	movs	r1, #1
 8002718:	69b8      	ldr	r0, [r7, #24]
 800271a:	f7ff ff43 	bl	80025a4 <xQueueGenericReset>
		pxNewQueue->pxQueueSetContainer = NULL;
	}
	#endif /* configUSE_QUEUE_SETS */

	traceQUEUE_CREATE( pxNewQueue );
}
 800271e:	bf00      	nop
 8002720:	3710      	adds	r7, #16
 8002722:	46bd      	mov	sp, r7
 8002724:	bd80      	pop	{r7, pc}

08002726 <prvInitialiseMutex>:
/*-----------------------------------------------------------*/

#if( configUSE_MUTEXES == 1 )

	static void prvInitialiseMutex( Queue_t *pxNewQueue )
	{
 8002726:	b580      	push	{r7, lr}
 8002728:	b082      	sub	sp, #8
 800272a:	af00      	add	r7, sp, #0
 800272c:	6078      	str	r0, [r7, #4]
		if( pxNewQueue != NULL )
 800272e:	687b      	ldr	r3, [r7, #4]
 8002730:	2b00      	cmp	r3, #0
 8002732:	d00e      	beq.n	8002752 <prvInitialiseMutex+0x2c>
		{
			/* The queue create function will set all the queue structure members
			correctly for a generic queue, but this function is creating a
			mutex.  Overwrite those members that need to be set differently -
			in particular the information required for priority inheritance. */
			pxNewQueue->u.xSemaphore.xMutexHolder = NULL;
 8002734:	687b      	ldr	r3, [r7, #4]
 8002736:	2200      	movs	r2, #0
 8002738:	609a      	str	r2, [r3, #8]
			pxNewQueue->uxQueueType = queueQUEUE_IS_MUTEX;
 800273a:	687b      	ldr	r3, [r7, #4]
 800273c:	2200      	movs	r2, #0
 800273e:	601a      	str	r2, [r3, #0]

			/* In case this is a recursive mutex. */
			pxNewQueue->u.xSemaphore.uxRecursiveCallCount = 0;
 8002740:	687b      	ldr	r3, [r7, #4]
 8002742:	2200      	movs	r2, #0
 8002744:	60da      	str	r2, [r3, #12]

			traceCREATE_MUTEX( pxNewQueue );

			/* Start with the semaphore in the expected state. */
			( void ) xQueueGenericSend( pxNewQueue, NULL, ( TickType_t ) 0U, queueSEND_TO_BACK );
 8002746:	2300      	movs	r3, #0
 8002748:	2200      	movs	r2, #0
 800274a:	2100      	movs	r1, #0
 800274c:	6878      	ldr	r0, [r7, #4]
 800274e:	f000 f81d 	bl	800278c <xQueueGenericSend>
		}
		else
		{
			traceCREATE_MUTEX_FAILED();
		}
	}
 8002752:	bf00      	nop
 8002754:	3708      	adds	r7, #8
 8002756:	46bd      	mov	sp, r7
 8002758:	bd80      	pop	{r7, pc}

0800275a <xQueueCreateMutex>:
/*-----------------------------------------------------------*/

#if( ( configUSE_MUTEXES == 1 ) && ( configSUPPORT_DYNAMIC_ALLOCATION == 1 ) )

	QueueHandle_t xQueueCreateMutex( const uint8_t ucQueueType )
	{
 800275a:	b580      	push	{r7, lr}
 800275c:	b086      	sub	sp, #24
 800275e:	af00      	add	r7, sp, #0
 8002760:	4603      	mov	r3, r0
 8002762:	71fb      	strb	r3, [r7, #7]
	QueueHandle_t xNewQueue;
	const UBaseType_t uxMutexLength = ( UBaseType_t ) 1, uxMutexSize = ( UBaseType_t ) 0;
 8002764:	2301      	movs	r3, #1
 8002766:	617b      	str	r3, [r7, #20]
 8002768:	2300      	movs	r3, #0
 800276a:	613b      	str	r3, [r7, #16]

		xNewQueue = xQueueGenericCreate( uxMutexLength, uxMutexSize, ucQueueType );
 800276c:	79fb      	ldrb	r3, [r7, #7]
 800276e:	461a      	mov	r2, r3
 8002770:	6939      	ldr	r1, [r7, #16]
 8002772:	6978      	ldr	r0, [r7, #20]
 8002774:	f7ff ff7e 	bl	8002674 <xQueueGenericCreate>
 8002778:	60f8      	str	r0, [r7, #12]
		prvInitialiseMutex( ( Queue_t * ) xNewQueue );
 800277a:	68f8      	ldr	r0, [r7, #12]
 800277c:	f7ff ffd3 	bl	8002726 <prvInitialiseMutex>

		return xNewQueue;
 8002780:	68fb      	ldr	r3, [r7, #12]
	}
 8002782:	4618      	mov	r0, r3
 8002784:	3718      	adds	r7, #24
 8002786:	46bd      	mov	sp, r7
 8002788:	bd80      	pop	{r7, pc}
	...

0800278c <xQueueGenericSend>:

#endif /* ( ( configUSE_COUNTING_SEMAPHORES == 1 ) && ( configSUPPORT_DYNAMIC_ALLOCATION == 1 ) ) */
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericSend( QueueHandle_t xQueue, const void * const pvItemToQueue, TickType_t xTicksToWait, const BaseType_t xCopyPosition )
{
 800278c:	b580      	push	{r7, lr}
 800278e:	b08e      	sub	sp, #56	; 0x38
 8002790:	af00      	add	r7, sp, #0
 8002792:	60f8      	str	r0, [r7, #12]
 8002794:	60b9      	str	r1, [r7, #8]
 8002796:	607a      	str	r2, [r7, #4]
 8002798:	603b      	str	r3, [r7, #0]
BaseType_t xEntryTimeSet = pdFALSE, xYieldRequired;
 800279a:	2300      	movs	r3, #0
 800279c:	637b      	str	r3, [r7, #52]	; 0x34
TimeOut_t xTimeOut;
Queue_t * const pxQueue = xQueue;
 800279e:	68fb      	ldr	r3, [r7, #12]
 80027a0:	633b      	str	r3, [r7, #48]	; 0x30

	configASSERT( pxQueue );
 80027a2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80027a4:	2b00      	cmp	r3, #0
 80027a6:	d10a      	bne.n	80027be <xQueueGenericSend+0x32>
	__asm volatile
 80027a8:	f04f 0350 	mov.w	r3, #80	; 0x50
 80027ac:	f383 8811 	msr	BASEPRI, r3
 80027b0:	f3bf 8f6f 	isb	sy
 80027b4:	f3bf 8f4f 	dsb	sy
 80027b8:	62bb      	str	r3, [r7, #40]	; 0x28
}
 80027ba:	bf00      	nop
 80027bc:	e7fe      	b.n	80027bc <xQueueGenericSend+0x30>
	configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 80027be:	68bb      	ldr	r3, [r7, #8]
 80027c0:	2b00      	cmp	r3, #0
 80027c2:	d103      	bne.n	80027cc <xQueueGenericSend+0x40>
 80027c4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80027c6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80027c8:	2b00      	cmp	r3, #0
 80027ca:	d101      	bne.n	80027d0 <xQueueGenericSend+0x44>
 80027cc:	2301      	movs	r3, #1
 80027ce:	e000      	b.n	80027d2 <xQueueGenericSend+0x46>
 80027d0:	2300      	movs	r3, #0
 80027d2:	2b00      	cmp	r3, #0
 80027d4:	d10a      	bne.n	80027ec <xQueueGenericSend+0x60>
	__asm volatile
 80027d6:	f04f 0350 	mov.w	r3, #80	; 0x50
 80027da:	f383 8811 	msr	BASEPRI, r3
 80027de:	f3bf 8f6f 	isb	sy
 80027e2:	f3bf 8f4f 	dsb	sy
 80027e6:	627b      	str	r3, [r7, #36]	; 0x24
}
 80027e8:	bf00      	nop
 80027ea:	e7fe      	b.n	80027ea <xQueueGenericSend+0x5e>
	configASSERT( !( ( xCopyPosition == queueOVERWRITE ) && ( pxQueue->uxLength != 1 ) ) );
 80027ec:	683b      	ldr	r3, [r7, #0]
 80027ee:	2b02      	cmp	r3, #2
 80027f0:	d103      	bne.n	80027fa <xQueueGenericSend+0x6e>
 80027f2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80027f4:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80027f6:	2b01      	cmp	r3, #1
 80027f8:	d101      	bne.n	80027fe <xQueueGenericSend+0x72>
 80027fa:	2301      	movs	r3, #1
 80027fc:	e000      	b.n	8002800 <xQueueGenericSend+0x74>
 80027fe:	2300      	movs	r3, #0
 8002800:	2b00      	cmp	r3, #0
 8002802:	d10a      	bne.n	800281a <xQueueGenericSend+0x8e>
	__asm volatile
 8002804:	f04f 0350 	mov.w	r3, #80	; 0x50
 8002808:	f383 8811 	msr	BASEPRI, r3
 800280c:	f3bf 8f6f 	isb	sy
 8002810:	f3bf 8f4f 	dsb	sy
 8002814:	623b      	str	r3, [r7, #32]
}
 8002816:	bf00      	nop
 8002818:	e7fe      	b.n	8002818 <xQueueGenericSend+0x8c>
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 800281a:	f001 f9b9 	bl	8003b90 <xTaskGetSchedulerState>
 800281e:	4603      	mov	r3, r0
 8002820:	2b00      	cmp	r3, #0
 8002822:	d102      	bne.n	800282a <xQueueGenericSend+0x9e>
 8002824:	687b      	ldr	r3, [r7, #4]
 8002826:	2b00      	cmp	r3, #0
 8002828:	d101      	bne.n	800282e <xQueueGenericSend+0xa2>
 800282a:	2301      	movs	r3, #1
 800282c:	e000      	b.n	8002830 <xQueueGenericSend+0xa4>
 800282e:	2300      	movs	r3, #0
 8002830:	2b00      	cmp	r3, #0
 8002832:	d10a      	bne.n	800284a <xQueueGenericSend+0xbe>
	__asm volatile
 8002834:	f04f 0350 	mov.w	r3, #80	; 0x50
 8002838:	f383 8811 	msr	BASEPRI, r3
 800283c:	f3bf 8f6f 	isb	sy
 8002840:	f3bf 8f4f 	dsb	sy
 8002844:	61fb      	str	r3, [r7, #28]
}
 8002846:	bf00      	nop
 8002848:	e7fe      	b.n	8002848 <xQueueGenericSend+0xbc>
	/*lint -save -e904 This function relaxes the coding standard somewhat to
	allow return statements within the function itself.  This is done in the
	interest of execution time efficiency. */
	for( ;; )
	{
		taskENTER_CRITICAL();
 800284a:	f001 fcf3 	bl	8004234 <vPortEnterCritical>
		{
			/* Is there room on the queue now?  The running task must be the
			highest priority task wanting to access the queue.  If the head item
			in the queue is to be overwritten then it does not matter if the
			queue is full. */
			if( ( pxQueue->uxMessagesWaiting < pxQueue->uxLength ) || ( xCopyPosition == queueOVERWRITE ) )
 800284e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002850:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8002852:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002854:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8002856:	429a      	cmp	r2, r3
 8002858:	d302      	bcc.n	8002860 <xQueueGenericSend+0xd4>
 800285a:	683b      	ldr	r3, [r7, #0]
 800285c:	2b02      	cmp	r3, #2
 800285e:	d129      	bne.n	80028b4 <xQueueGenericSend+0x128>
						}
					}
				}
				#else /* configUSE_QUEUE_SETS */
				{
					xYieldRequired = prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
 8002860:	683a      	ldr	r2, [r7, #0]
 8002862:	68b9      	ldr	r1, [r7, #8]
 8002864:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8002866:	f000 fa93 	bl	8002d90 <prvCopyDataToQueue>
 800286a:	62f8      	str	r0, [r7, #44]	; 0x2c

					/* If there was a task waiting for data to arrive on the
					queue then unblock it now. */
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 800286c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800286e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002870:	2b00      	cmp	r3, #0
 8002872:	d010      	beq.n	8002896 <xQueueGenericSend+0x10a>
					{
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 8002874:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002876:	3324      	adds	r3, #36	; 0x24
 8002878:	4618      	mov	r0, r3
 800287a:	f000 ffc9 	bl	8003810 <xTaskRemoveFromEventList>
 800287e:	4603      	mov	r3, r0
 8002880:	2b00      	cmp	r3, #0
 8002882:	d013      	beq.n	80028ac <xQueueGenericSend+0x120>
						{
							/* The unblocked task has a priority higher than
							our own so yield immediately.  Yes it is ok to do
							this from within the critical section - the kernel
							takes care of that. */
							queueYIELD_IF_USING_PREEMPTION();
 8002884:	4b3f      	ldr	r3, [pc, #252]	; (8002984 <xQueueGenericSend+0x1f8>)
 8002886:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800288a:	601a      	str	r2, [r3, #0]
 800288c:	f3bf 8f4f 	dsb	sy
 8002890:	f3bf 8f6f 	isb	sy
 8002894:	e00a      	b.n	80028ac <xQueueGenericSend+0x120>
						else
						{
							mtCOVERAGE_TEST_MARKER();
						}
					}
					else if( xYieldRequired != pdFALSE )
 8002896:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8002898:	2b00      	cmp	r3, #0
 800289a:	d007      	beq.n	80028ac <xQueueGenericSend+0x120>
					{
						/* This path is a special case that will only get
						executed if the task was holding multiple mutexes and
						the mutexes were given back in an order that is
						different to that in which they were taken. */
						queueYIELD_IF_USING_PREEMPTION();
 800289c:	4b39      	ldr	r3, [pc, #228]	; (8002984 <xQueueGenericSend+0x1f8>)
 800289e:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 80028a2:	601a      	str	r2, [r3, #0]
 80028a4:	f3bf 8f4f 	dsb	sy
 80028a8:	f3bf 8f6f 	isb	sy
						mtCOVERAGE_TEST_MARKER();
					}
				}
				#endif /* configUSE_QUEUE_SETS */

				taskEXIT_CRITICAL();
 80028ac:	f001 fcf2 	bl	8004294 <vPortExitCritical>
				return pdPASS;
 80028b0:	2301      	movs	r3, #1
 80028b2:	e063      	b.n	800297c <xQueueGenericSend+0x1f0>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
 80028b4:	687b      	ldr	r3, [r7, #4]
 80028b6:	2b00      	cmp	r3, #0
 80028b8:	d103      	bne.n	80028c2 <xQueueGenericSend+0x136>
				{
					/* The queue was full and no block time is specified (or
					the block time has expired) so leave now. */
					taskEXIT_CRITICAL();
 80028ba:	f001 fceb 	bl	8004294 <vPortExitCritical>

					/* Return to the original privilege level before exiting
					the function. */
					traceQUEUE_SEND_FAILED( pxQueue );
					return errQUEUE_FULL;
 80028be:	2300      	movs	r3, #0
 80028c0:	e05c      	b.n	800297c <xQueueGenericSend+0x1f0>
				}
				else if( xEntryTimeSet == pdFALSE )
 80028c2:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80028c4:	2b00      	cmp	r3, #0
 80028c6:	d106      	bne.n	80028d6 <xQueueGenericSend+0x14a>
				{
					/* The queue was full and a block time was specified so
					configure the timeout structure. */
					vTaskInternalSetTimeOutState( &xTimeOut );
 80028c8:	f107 0314 	add.w	r3, r7, #20
 80028cc:	4618      	mov	r0, r3
 80028ce:	f001 f801 	bl	80038d4 <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 80028d2:	2301      	movs	r3, #1
 80028d4:	637b      	str	r3, [r7, #52]	; 0x34
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
 80028d6:	f001 fcdd 	bl	8004294 <vPortExitCritical>

		/* Interrupts and other tasks can send to and receive from the queue
		now the critical section has been exited. */

		vTaskSuspendAll();
 80028da:	f000 fdb1 	bl	8003440 <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 80028de:	f001 fca9 	bl	8004234 <vPortEnterCritical>
 80028e2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80028e4:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 80028e8:	b25b      	sxtb	r3, r3
 80028ea:	f1b3 3fff 	cmp.w	r3, #4294967295
 80028ee:	d103      	bne.n	80028f8 <xQueueGenericSend+0x16c>
 80028f0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80028f2:	2200      	movs	r2, #0
 80028f4:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 80028f8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80028fa:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 80028fe:	b25b      	sxtb	r3, r3
 8002900:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002904:	d103      	bne.n	800290e <xQueueGenericSend+0x182>
 8002906:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002908:	2200      	movs	r2, #0
 800290a:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 800290e:	f001 fcc1 	bl	8004294 <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 8002912:	1d3a      	adds	r2, r7, #4
 8002914:	f107 0314 	add.w	r3, r7, #20
 8002918:	4611      	mov	r1, r2
 800291a:	4618      	mov	r0, r3
 800291c:	f000 fff0 	bl	8003900 <xTaskCheckForTimeOut>
 8002920:	4603      	mov	r3, r0
 8002922:	2b00      	cmp	r3, #0
 8002924:	d124      	bne.n	8002970 <xQueueGenericSend+0x1e4>
		{
			if( prvIsQueueFull( pxQueue ) != pdFALSE )
 8002926:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8002928:	f000 fb2a 	bl	8002f80 <prvIsQueueFull>
 800292c:	4603      	mov	r3, r0
 800292e:	2b00      	cmp	r3, #0
 8002930:	d018      	beq.n	8002964 <xQueueGenericSend+0x1d8>
			{
				traceBLOCKING_ON_QUEUE_SEND( pxQueue );
				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToSend ), xTicksToWait );
 8002932:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002934:	3310      	adds	r3, #16
 8002936:	687a      	ldr	r2, [r7, #4]
 8002938:	4611      	mov	r1, r2
 800293a:	4618      	mov	r0, r3
 800293c:	f000 ff44 	bl	80037c8 <vTaskPlaceOnEventList>
				/* Unlocking the queue means queue events can effect the
				event list.  It is possible that interrupts occurring now
				remove this task from the event list again - but as the
				scheduler is suspended the task will go onto the pending
				ready last instead of the actual ready list. */
				prvUnlockQueue( pxQueue );
 8002940:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8002942:	f000 fab5 	bl	8002eb0 <prvUnlockQueue>
				/* Resuming the scheduler will move tasks from the pending
				ready list into the ready list - so it is feasible that this
				task is already in a ready list before it yields - in which
				case the yield will not cause a context switch unless there
				is also a higher priority task in the pending ready list. */
				if( xTaskResumeAll() == pdFALSE )
 8002946:	f000 fd89 	bl	800345c <xTaskResumeAll>
 800294a:	4603      	mov	r3, r0
 800294c:	2b00      	cmp	r3, #0
 800294e:	f47f af7c 	bne.w	800284a <xQueueGenericSend+0xbe>
				{
					portYIELD_WITHIN_API();
 8002952:	4b0c      	ldr	r3, [pc, #48]	; (8002984 <xQueueGenericSend+0x1f8>)
 8002954:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8002958:	601a      	str	r2, [r3, #0]
 800295a:	f3bf 8f4f 	dsb	sy
 800295e:	f3bf 8f6f 	isb	sy
 8002962:	e772      	b.n	800284a <xQueueGenericSend+0xbe>
				}
			}
			else
			{
				/* Try again. */
				prvUnlockQueue( pxQueue );
 8002964:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8002966:	f000 faa3 	bl	8002eb0 <prvUnlockQueue>
				( void ) xTaskResumeAll();
 800296a:	f000 fd77 	bl	800345c <xTaskResumeAll>
 800296e:	e76c      	b.n	800284a <xQueueGenericSend+0xbe>
			}
		}
		else
		{
			/* The timeout has expired. */
			prvUnlockQueue( pxQueue );
 8002970:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8002972:	f000 fa9d 	bl	8002eb0 <prvUnlockQueue>
			( void ) xTaskResumeAll();
 8002976:	f000 fd71 	bl	800345c <xTaskResumeAll>

			traceQUEUE_SEND_FAILED( pxQueue );
			return errQUEUE_FULL;
 800297a:	2300      	movs	r3, #0
		}
	} /*lint -restore */
}
 800297c:	4618      	mov	r0, r3
 800297e:	3738      	adds	r7, #56	; 0x38
 8002980:	46bd      	mov	sp, r7
 8002982:	bd80      	pop	{r7, pc}
 8002984:	e000ed04 	.word	0xe000ed04

08002988 <xQueueReceive>:
	return xReturn;
}
/*-----------------------------------------------------------*/

BaseType_t xQueueReceive( QueueHandle_t xQueue, void * const pvBuffer, TickType_t xTicksToWait )
{
 8002988:	b580      	push	{r7, lr}
 800298a:	b08c      	sub	sp, #48	; 0x30
 800298c:	af00      	add	r7, sp, #0
 800298e:	60f8      	str	r0, [r7, #12]
 8002990:	60b9      	str	r1, [r7, #8]
 8002992:	607a      	str	r2, [r7, #4]
BaseType_t xEntryTimeSet = pdFALSE;
 8002994:	2300      	movs	r3, #0
 8002996:	62fb      	str	r3, [r7, #44]	; 0x2c
TimeOut_t xTimeOut;
Queue_t * const pxQueue = xQueue;
 8002998:	68fb      	ldr	r3, [r7, #12]
 800299a:	62bb      	str	r3, [r7, #40]	; 0x28

	/* Check the pointer is not NULL. */
	configASSERT( ( pxQueue ) );
 800299c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800299e:	2b00      	cmp	r3, #0
 80029a0:	d10a      	bne.n	80029b8 <xQueueReceive+0x30>
	__asm volatile
 80029a2:	f04f 0350 	mov.w	r3, #80	; 0x50
 80029a6:	f383 8811 	msr	BASEPRI, r3
 80029aa:	f3bf 8f6f 	isb	sy
 80029ae:	f3bf 8f4f 	dsb	sy
 80029b2:	623b      	str	r3, [r7, #32]
}
 80029b4:	bf00      	nop
 80029b6:	e7fe      	b.n	80029b6 <xQueueReceive+0x2e>

	/* The buffer into which data is received can only be NULL if the data size
	is zero (so no data is copied into the buffer. */
	configASSERT( !( ( ( pvBuffer ) == NULL ) && ( ( pxQueue )->uxItemSize != ( UBaseType_t ) 0U ) ) );
 80029b8:	68bb      	ldr	r3, [r7, #8]
 80029ba:	2b00      	cmp	r3, #0
 80029bc:	d103      	bne.n	80029c6 <xQueueReceive+0x3e>
 80029be:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80029c0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80029c2:	2b00      	cmp	r3, #0
 80029c4:	d101      	bne.n	80029ca <xQueueReceive+0x42>
 80029c6:	2301      	movs	r3, #1
 80029c8:	e000      	b.n	80029cc <xQueueReceive+0x44>
 80029ca:	2300      	movs	r3, #0
 80029cc:	2b00      	cmp	r3, #0
 80029ce:	d10a      	bne.n	80029e6 <xQueueReceive+0x5e>
	__asm volatile
 80029d0:	f04f 0350 	mov.w	r3, #80	; 0x50
 80029d4:	f383 8811 	msr	BASEPRI, r3
 80029d8:	f3bf 8f6f 	isb	sy
 80029dc:	f3bf 8f4f 	dsb	sy
 80029e0:	61fb      	str	r3, [r7, #28]
}
 80029e2:	bf00      	nop
 80029e4:	e7fe      	b.n	80029e4 <xQueueReceive+0x5c>

	/* Cannot block if the scheduler is suspended. */
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 80029e6:	f001 f8d3 	bl	8003b90 <xTaskGetSchedulerState>
 80029ea:	4603      	mov	r3, r0
 80029ec:	2b00      	cmp	r3, #0
 80029ee:	d102      	bne.n	80029f6 <xQueueReceive+0x6e>
 80029f0:	687b      	ldr	r3, [r7, #4]
 80029f2:	2b00      	cmp	r3, #0
 80029f4:	d101      	bne.n	80029fa <xQueueReceive+0x72>
 80029f6:	2301      	movs	r3, #1
 80029f8:	e000      	b.n	80029fc <xQueueReceive+0x74>
 80029fa:	2300      	movs	r3, #0
 80029fc:	2b00      	cmp	r3, #0
 80029fe:	d10a      	bne.n	8002a16 <xQueueReceive+0x8e>
	__asm volatile
 8002a00:	f04f 0350 	mov.w	r3, #80	; 0x50
 8002a04:	f383 8811 	msr	BASEPRI, r3
 8002a08:	f3bf 8f6f 	isb	sy
 8002a0c:	f3bf 8f4f 	dsb	sy
 8002a10:	61bb      	str	r3, [r7, #24]
}
 8002a12:	bf00      	nop
 8002a14:	e7fe      	b.n	8002a14 <xQueueReceive+0x8c>
	/*lint -save -e904  This function relaxes the coding standard somewhat to
	allow return statements within the function itself.  This is done in the
	interest of execution time efficiency. */
	for( ;; )
	{
		taskENTER_CRITICAL();
 8002a16:	f001 fc0d 	bl	8004234 <vPortEnterCritical>
		{
			const UBaseType_t uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 8002a1a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002a1c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002a1e:	627b      	str	r3, [r7, #36]	; 0x24

			/* Is there data in the queue now?  To be running the calling task
			must be the highest priority task wanting to access the queue. */
			if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 8002a20:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002a22:	2b00      	cmp	r3, #0
 8002a24:	d01f      	beq.n	8002a66 <xQueueReceive+0xde>
			{
				/* Data available, remove one item. */
				prvCopyDataFromQueue( pxQueue, pvBuffer );
 8002a26:	68b9      	ldr	r1, [r7, #8]
 8002a28:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8002a2a:	f000 fa1b 	bl	8002e64 <prvCopyDataFromQueue>
				traceQUEUE_RECEIVE( pxQueue );
				pxQueue->uxMessagesWaiting = uxMessagesWaiting - ( UBaseType_t ) 1;
 8002a2e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002a30:	1e5a      	subs	r2, r3, #1
 8002a32:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002a34:	639a      	str	r2, [r3, #56]	; 0x38

				/* There is now space in the queue, were any tasks waiting to
				post to the queue?  If so, unblock the highest priority waiting
				task. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 8002a36:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002a38:	691b      	ldr	r3, [r3, #16]
 8002a3a:	2b00      	cmp	r3, #0
 8002a3c:	d00f      	beq.n	8002a5e <xQueueReceive+0xd6>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 8002a3e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002a40:	3310      	adds	r3, #16
 8002a42:	4618      	mov	r0, r3
 8002a44:	f000 fee4 	bl	8003810 <xTaskRemoveFromEventList>
 8002a48:	4603      	mov	r3, r0
 8002a4a:	2b00      	cmp	r3, #0
 8002a4c:	d007      	beq.n	8002a5e <xQueueReceive+0xd6>
					{
						queueYIELD_IF_USING_PREEMPTION();
 8002a4e:	4b3d      	ldr	r3, [pc, #244]	; (8002b44 <xQueueReceive+0x1bc>)
 8002a50:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8002a54:	601a      	str	r2, [r3, #0]
 8002a56:	f3bf 8f4f 	dsb	sy
 8002a5a:	f3bf 8f6f 	isb	sy
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				taskEXIT_CRITICAL();
 8002a5e:	f001 fc19 	bl	8004294 <vPortExitCritical>
				return pdPASS;
 8002a62:	2301      	movs	r3, #1
 8002a64:	e069      	b.n	8002b3a <xQueueReceive+0x1b2>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
 8002a66:	687b      	ldr	r3, [r7, #4]
 8002a68:	2b00      	cmp	r3, #0
 8002a6a:	d103      	bne.n	8002a74 <xQueueReceive+0xec>
				{
					/* The queue was empty and no block time is specified (or
					the block time has expired) so leave now. */
					taskEXIT_CRITICAL();
 8002a6c:	f001 fc12 	bl	8004294 <vPortExitCritical>
					traceQUEUE_RECEIVE_FAILED( pxQueue );
					return errQUEUE_EMPTY;
 8002a70:	2300      	movs	r3, #0
 8002a72:	e062      	b.n	8002b3a <xQueueReceive+0x1b2>
				}
				else if( xEntryTimeSet == pdFALSE )
 8002a74:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8002a76:	2b00      	cmp	r3, #0
 8002a78:	d106      	bne.n	8002a88 <xQueueReceive+0x100>
				{
					/* The queue was empty and a block time was specified so
					configure the timeout structure. */
					vTaskInternalSetTimeOutState( &xTimeOut );
 8002a7a:	f107 0310 	add.w	r3, r7, #16
 8002a7e:	4618      	mov	r0, r3
 8002a80:	f000 ff28 	bl	80038d4 <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 8002a84:	2301      	movs	r3, #1
 8002a86:	62fb      	str	r3, [r7, #44]	; 0x2c
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
 8002a88:	f001 fc04 	bl	8004294 <vPortExitCritical>

		/* Interrupts and other tasks can send to and receive from the queue
		now the critical section has been exited. */

		vTaskSuspendAll();
 8002a8c:	f000 fcd8 	bl	8003440 <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 8002a90:	f001 fbd0 	bl	8004234 <vPortEnterCritical>
 8002a94:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002a96:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 8002a9a:	b25b      	sxtb	r3, r3
 8002a9c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002aa0:	d103      	bne.n	8002aaa <xQueueReceive+0x122>
 8002aa2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002aa4:	2200      	movs	r2, #0
 8002aa6:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8002aaa:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002aac:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 8002ab0:	b25b      	sxtb	r3, r3
 8002ab2:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002ab6:	d103      	bne.n	8002ac0 <xQueueReceive+0x138>
 8002ab8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002aba:	2200      	movs	r2, #0
 8002abc:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 8002ac0:	f001 fbe8 	bl	8004294 <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 8002ac4:	1d3a      	adds	r2, r7, #4
 8002ac6:	f107 0310 	add.w	r3, r7, #16
 8002aca:	4611      	mov	r1, r2
 8002acc:	4618      	mov	r0, r3
 8002ace:	f000 ff17 	bl	8003900 <xTaskCheckForTimeOut>
 8002ad2:	4603      	mov	r3, r0
 8002ad4:	2b00      	cmp	r3, #0
 8002ad6:	d123      	bne.n	8002b20 <xQueueReceive+0x198>
		{
			/* The timeout has not expired.  If the queue is still empty place
			the task on the list of tasks waiting to receive from the queue. */
			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 8002ad8:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8002ada:	f000 fa3b 	bl	8002f54 <prvIsQueueEmpty>
 8002ade:	4603      	mov	r3, r0
 8002ae0:	2b00      	cmp	r3, #0
 8002ae2:	d017      	beq.n	8002b14 <xQueueReceive+0x18c>
			{
				traceBLOCKING_ON_QUEUE_RECEIVE( pxQueue );
				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait );
 8002ae4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002ae6:	3324      	adds	r3, #36	; 0x24
 8002ae8:	687a      	ldr	r2, [r7, #4]
 8002aea:	4611      	mov	r1, r2
 8002aec:	4618      	mov	r0, r3
 8002aee:	f000 fe6b 	bl	80037c8 <vTaskPlaceOnEventList>
				prvUnlockQueue( pxQueue );
 8002af2:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8002af4:	f000 f9dc 	bl	8002eb0 <prvUnlockQueue>
				if( xTaskResumeAll() == pdFALSE )
 8002af8:	f000 fcb0 	bl	800345c <xTaskResumeAll>
 8002afc:	4603      	mov	r3, r0
 8002afe:	2b00      	cmp	r3, #0
 8002b00:	d189      	bne.n	8002a16 <xQueueReceive+0x8e>
				{
					portYIELD_WITHIN_API();
 8002b02:	4b10      	ldr	r3, [pc, #64]	; (8002b44 <xQueueReceive+0x1bc>)
 8002b04:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8002b08:	601a      	str	r2, [r3, #0]
 8002b0a:	f3bf 8f4f 	dsb	sy
 8002b0e:	f3bf 8f6f 	isb	sy
 8002b12:	e780      	b.n	8002a16 <xQueueReceive+0x8e>
			}
			else
			{
				/* The queue contains data again.  Loop back to try and read the
				data. */
				prvUnlockQueue( pxQueue );
 8002b14:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8002b16:	f000 f9cb 	bl	8002eb0 <prvUnlockQueue>
				( void ) xTaskResumeAll();
 8002b1a:	f000 fc9f 	bl	800345c <xTaskResumeAll>
 8002b1e:	e77a      	b.n	8002a16 <xQueueReceive+0x8e>
		}
		else
		{
			/* Timed out.  If there is no data in the queue exit, otherwise loop
			back and attempt to read the data. */
			prvUnlockQueue( pxQueue );
 8002b20:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8002b22:	f000 f9c5 	bl	8002eb0 <prvUnlockQueue>
			( void ) xTaskResumeAll();
 8002b26:	f000 fc99 	bl	800345c <xTaskResumeAll>

			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 8002b2a:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8002b2c:	f000 fa12 	bl	8002f54 <prvIsQueueEmpty>
 8002b30:	4603      	mov	r3, r0
 8002b32:	2b00      	cmp	r3, #0
 8002b34:	f43f af6f 	beq.w	8002a16 <xQueueReceive+0x8e>
			{
				traceQUEUE_RECEIVE_FAILED( pxQueue );
				return errQUEUE_EMPTY;
 8002b38:	2300      	movs	r3, #0
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
	} /*lint -restore */
}
 8002b3a:	4618      	mov	r0, r3
 8002b3c:	3730      	adds	r7, #48	; 0x30
 8002b3e:	46bd      	mov	sp, r7
 8002b40:	bd80      	pop	{r7, pc}
 8002b42:	bf00      	nop
 8002b44:	e000ed04 	.word	0xe000ed04

08002b48 <xQueueSemaphoreTake>:
/*-----------------------------------------------------------*/

BaseType_t xQueueSemaphoreTake( QueueHandle_t xQueue, TickType_t xTicksToWait )
{
 8002b48:	b580      	push	{r7, lr}
 8002b4a:	b08e      	sub	sp, #56	; 0x38
 8002b4c:	af00      	add	r7, sp, #0
 8002b4e:	6078      	str	r0, [r7, #4]
 8002b50:	6039      	str	r1, [r7, #0]
BaseType_t xEntryTimeSet = pdFALSE;
 8002b52:	2300      	movs	r3, #0
 8002b54:	637b      	str	r3, [r7, #52]	; 0x34
TimeOut_t xTimeOut;
Queue_t * const pxQueue = xQueue;
 8002b56:	687b      	ldr	r3, [r7, #4]
 8002b58:	62fb      	str	r3, [r7, #44]	; 0x2c

#if( configUSE_MUTEXES == 1 )
	BaseType_t xInheritanceOccurred = pdFALSE;
 8002b5a:	2300      	movs	r3, #0
 8002b5c:	633b      	str	r3, [r7, #48]	; 0x30
#endif

	/* Check the queue pointer is not NULL. */
	configASSERT( ( pxQueue ) );
 8002b5e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8002b60:	2b00      	cmp	r3, #0
 8002b62:	d10a      	bne.n	8002b7a <xQueueSemaphoreTake+0x32>
	__asm volatile
 8002b64:	f04f 0350 	mov.w	r3, #80	; 0x50
 8002b68:	f383 8811 	msr	BASEPRI, r3
 8002b6c:	f3bf 8f6f 	isb	sy
 8002b70:	f3bf 8f4f 	dsb	sy
 8002b74:	623b      	str	r3, [r7, #32]
}
 8002b76:	bf00      	nop
 8002b78:	e7fe      	b.n	8002b78 <xQueueSemaphoreTake+0x30>

	/* Check this really is a semaphore, in which case the item size will be
	0. */
	configASSERT( pxQueue->uxItemSize == 0 );
 8002b7a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8002b7c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002b7e:	2b00      	cmp	r3, #0
 8002b80:	d00a      	beq.n	8002b98 <xQueueSemaphoreTake+0x50>
	__asm volatile
 8002b82:	f04f 0350 	mov.w	r3, #80	; 0x50
 8002b86:	f383 8811 	msr	BASEPRI, r3
 8002b8a:	f3bf 8f6f 	isb	sy
 8002b8e:	f3bf 8f4f 	dsb	sy
 8002b92:	61fb      	str	r3, [r7, #28]
}
 8002b94:	bf00      	nop
 8002b96:	e7fe      	b.n	8002b96 <xQueueSemaphoreTake+0x4e>

	/* Cannot block if the scheduler is suspended. */
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 8002b98:	f000 fffa 	bl	8003b90 <xTaskGetSchedulerState>
 8002b9c:	4603      	mov	r3, r0
 8002b9e:	2b00      	cmp	r3, #0
 8002ba0:	d102      	bne.n	8002ba8 <xQueueSemaphoreTake+0x60>
 8002ba2:	683b      	ldr	r3, [r7, #0]
 8002ba4:	2b00      	cmp	r3, #0
 8002ba6:	d101      	bne.n	8002bac <xQueueSemaphoreTake+0x64>
 8002ba8:	2301      	movs	r3, #1
 8002baa:	e000      	b.n	8002bae <xQueueSemaphoreTake+0x66>
 8002bac:	2300      	movs	r3, #0
 8002bae:	2b00      	cmp	r3, #0
 8002bb0:	d10a      	bne.n	8002bc8 <xQueueSemaphoreTake+0x80>
	__asm volatile
 8002bb2:	f04f 0350 	mov.w	r3, #80	; 0x50
 8002bb6:	f383 8811 	msr	BASEPRI, r3
 8002bba:	f3bf 8f6f 	isb	sy
 8002bbe:	f3bf 8f4f 	dsb	sy
 8002bc2:	61bb      	str	r3, [r7, #24]
}
 8002bc4:	bf00      	nop
 8002bc6:	e7fe      	b.n	8002bc6 <xQueueSemaphoreTake+0x7e>
	/*lint -save -e904 This function relaxes the coding standard somewhat to allow return
	statements within the function itself.  This is done in the interest
	of execution time efficiency. */
	for( ;; )
	{
		taskENTER_CRITICAL();
 8002bc8:	f001 fb34 	bl	8004234 <vPortEnterCritical>
		{
			/* Semaphores are queues with an item size of 0, and where the
			number of messages in the queue is the semaphore's count value. */
			const UBaseType_t uxSemaphoreCount = pxQueue->uxMessagesWaiting;
 8002bcc:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8002bce:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002bd0:	62bb      	str	r3, [r7, #40]	; 0x28

			/* Is there data in the queue now?  To be running the calling task
			must be the highest priority task wanting to access the queue. */
			if( uxSemaphoreCount > ( UBaseType_t ) 0 )
 8002bd2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002bd4:	2b00      	cmp	r3, #0
 8002bd6:	d024      	beq.n	8002c22 <xQueueSemaphoreTake+0xda>
			{
				traceQUEUE_RECEIVE( pxQueue );

				/* Semaphores are queues with a data size of zero and where the
				messages waiting is the semaphore's count.  Reduce the count. */
				pxQueue->uxMessagesWaiting = uxSemaphoreCount - ( UBaseType_t ) 1;
 8002bd8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002bda:	1e5a      	subs	r2, r3, #1
 8002bdc:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8002bde:	639a      	str	r2, [r3, #56]	; 0x38

				#if ( configUSE_MUTEXES == 1 )
				{
					if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
 8002be0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8002be2:	681b      	ldr	r3, [r3, #0]
 8002be4:	2b00      	cmp	r3, #0
 8002be6:	d104      	bne.n	8002bf2 <xQueueSemaphoreTake+0xaa>
					{
						/* Record the information required to implement
						priority inheritance should it become necessary. */
						pxQueue->u.xSemaphore.xMutexHolder = pvTaskIncrementMutexHeldCount();
 8002be8:	f001 f97a 	bl	8003ee0 <pvTaskIncrementMutexHeldCount>
 8002bec:	4602      	mov	r2, r0
 8002bee:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8002bf0:	609a      	str	r2, [r3, #8]
				}
				#endif /* configUSE_MUTEXES */

				/* Check to see if other tasks are blocked waiting to give the
				semaphore, and if so, unblock the highest priority such task. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 8002bf2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8002bf4:	691b      	ldr	r3, [r3, #16]
 8002bf6:	2b00      	cmp	r3, #0
 8002bf8:	d00f      	beq.n	8002c1a <xQueueSemaphoreTake+0xd2>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 8002bfa:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8002bfc:	3310      	adds	r3, #16
 8002bfe:	4618      	mov	r0, r3
 8002c00:	f000 fe06 	bl	8003810 <xTaskRemoveFromEventList>
 8002c04:	4603      	mov	r3, r0
 8002c06:	2b00      	cmp	r3, #0
 8002c08:	d007      	beq.n	8002c1a <xQueueSemaphoreTake+0xd2>
					{
						queueYIELD_IF_USING_PREEMPTION();
 8002c0a:	4b54      	ldr	r3, [pc, #336]	; (8002d5c <xQueueSemaphoreTake+0x214>)
 8002c0c:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8002c10:	601a      	str	r2, [r3, #0]
 8002c12:	f3bf 8f4f 	dsb	sy
 8002c16:	f3bf 8f6f 	isb	sy
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				taskEXIT_CRITICAL();
 8002c1a:	f001 fb3b 	bl	8004294 <vPortExitCritical>
				return pdPASS;
 8002c1e:	2301      	movs	r3, #1
 8002c20:	e097      	b.n	8002d52 <xQueueSemaphoreTake+0x20a>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
 8002c22:	683b      	ldr	r3, [r7, #0]
 8002c24:	2b00      	cmp	r3, #0
 8002c26:	d111      	bne.n	8002c4c <xQueueSemaphoreTake+0x104>
					/* For inheritance to have occurred there must have been an
					initial timeout, and an adjusted timeout cannot become 0, as
					if it were 0 the function would have exited. */
					#if( configUSE_MUTEXES == 1 )
					{
						configASSERT( xInheritanceOccurred == pdFALSE );
 8002c28:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002c2a:	2b00      	cmp	r3, #0
 8002c2c:	d00a      	beq.n	8002c44 <xQueueSemaphoreTake+0xfc>
	__asm volatile
 8002c2e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8002c32:	f383 8811 	msr	BASEPRI, r3
 8002c36:	f3bf 8f6f 	isb	sy
 8002c3a:	f3bf 8f4f 	dsb	sy
 8002c3e:	617b      	str	r3, [r7, #20]
}
 8002c40:	bf00      	nop
 8002c42:	e7fe      	b.n	8002c42 <xQueueSemaphoreTake+0xfa>
					}
					#endif /* configUSE_MUTEXES */

					/* The semaphore count was 0 and no block time is specified
					(or the block time has expired) so exit now. */
					taskEXIT_CRITICAL();
 8002c44:	f001 fb26 	bl	8004294 <vPortExitCritical>
					traceQUEUE_RECEIVE_FAILED( pxQueue );
					return errQUEUE_EMPTY;
 8002c48:	2300      	movs	r3, #0
 8002c4a:	e082      	b.n	8002d52 <xQueueSemaphoreTake+0x20a>
				}
				else if( xEntryTimeSet == pdFALSE )
 8002c4c:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8002c4e:	2b00      	cmp	r3, #0
 8002c50:	d106      	bne.n	8002c60 <xQueueSemaphoreTake+0x118>
				{
					/* The semaphore count was 0 and a block time was specified
					so configure the timeout structure ready to block. */
					vTaskInternalSetTimeOutState( &xTimeOut );
 8002c52:	f107 030c 	add.w	r3, r7, #12
 8002c56:	4618      	mov	r0, r3
 8002c58:	f000 fe3c 	bl	80038d4 <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 8002c5c:	2301      	movs	r3, #1
 8002c5e:	637b      	str	r3, [r7, #52]	; 0x34
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
 8002c60:	f001 fb18 	bl	8004294 <vPortExitCritical>

		/* Interrupts and other tasks can give to and take from the semaphore
		now the critical section has been exited. */

		vTaskSuspendAll();
 8002c64:	f000 fbec 	bl	8003440 <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 8002c68:	f001 fae4 	bl	8004234 <vPortEnterCritical>
 8002c6c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8002c6e:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 8002c72:	b25b      	sxtb	r3, r3
 8002c74:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002c78:	d103      	bne.n	8002c82 <xQueueSemaphoreTake+0x13a>
 8002c7a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8002c7c:	2200      	movs	r2, #0
 8002c7e:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8002c82:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8002c84:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 8002c88:	b25b      	sxtb	r3, r3
 8002c8a:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002c8e:	d103      	bne.n	8002c98 <xQueueSemaphoreTake+0x150>
 8002c90:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8002c92:	2200      	movs	r2, #0
 8002c94:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 8002c98:	f001 fafc 	bl	8004294 <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 8002c9c:	463a      	mov	r2, r7
 8002c9e:	f107 030c 	add.w	r3, r7, #12
 8002ca2:	4611      	mov	r1, r2
 8002ca4:	4618      	mov	r0, r3
 8002ca6:	f000 fe2b 	bl	8003900 <xTaskCheckForTimeOut>
 8002caa:	4603      	mov	r3, r0
 8002cac:	2b00      	cmp	r3, #0
 8002cae:	d132      	bne.n	8002d16 <xQueueSemaphoreTake+0x1ce>
		{
			/* A block time is specified and not expired.  If the semaphore
			count is 0 then enter the Blocked state to wait for a semaphore to
			become available.  As semaphores are implemented with queues the
			queue being empty is equivalent to the semaphore count being 0. */
			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 8002cb0:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 8002cb2:	f000 f94f 	bl	8002f54 <prvIsQueueEmpty>
 8002cb6:	4603      	mov	r3, r0
 8002cb8:	2b00      	cmp	r3, #0
 8002cba:	d026      	beq.n	8002d0a <xQueueSemaphoreTake+0x1c2>
			{
				traceBLOCKING_ON_QUEUE_RECEIVE( pxQueue );

				#if ( configUSE_MUTEXES == 1 )
				{
					if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
 8002cbc:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8002cbe:	681b      	ldr	r3, [r3, #0]
 8002cc0:	2b00      	cmp	r3, #0
 8002cc2:	d109      	bne.n	8002cd8 <xQueueSemaphoreTake+0x190>
					{
						taskENTER_CRITICAL();
 8002cc4:	f001 fab6 	bl	8004234 <vPortEnterCritical>
						{
							xInheritanceOccurred = xTaskPriorityInherit( pxQueue->u.xSemaphore.xMutexHolder );
 8002cc8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8002cca:	689b      	ldr	r3, [r3, #8]
 8002ccc:	4618      	mov	r0, r3
 8002cce:	f000 ff7d 	bl	8003bcc <xTaskPriorityInherit>
 8002cd2:	6338      	str	r0, [r7, #48]	; 0x30
						}
						taskEXIT_CRITICAL();
 8002cd4:	f001 fade 	bl	8004294 <vPortExitCritical>
						mtCOVERAGE_TEST_MARKER();
					}
				}
				#endif

				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait );
 8002cd8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8002cda:	3324      	adds	r3, #36	; 0x24
 8002cdc:	683a      	ldr	r2, [r7, #0]
 8002cde:	4611      	mov	r1, r2
 8002ce0:	4618      	mov	r0, r3
 8002ce2:	f000 fd71 	bl	80037c8 <vTaskPlaceOnEventList>
				prvUnlockQueue( pxQueue );
 8002ce6:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 8002ce8:	f000 f8e2 	bl	8002eb0 <prvUnlockQueue>
				if( xTaskResumeAll() == pdFALSE )
 8002cec:	f000 fbb6 	bl	800345c <xTaskResumeAll>
 8002cf0:	4603      	mov	r3, r0
 8002cf2:	2b00      	cmp	r3, #0
 8002cf4:	f47f af68 	bne.w	8002bc8 <xQueueSemaphoreTake+0x80>
				{
					portYIELD_WITHIN_API();
 8002cf8:	4b18      	ldr	r3, [pc, #96]	; (8002d5c <xQueueSemaphoreTake+0x214>)
 8002cfa:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8002cfe:	601a      	str	r2, [r3, #0]
 8002d00:	f3bf 8f4f 	dsb	sy
 8002d04:	f3bf 8f6f 	isb	sy
 8002d08:	e75e      	b.n	8002bc8 <xQueueSemaphoreTake+0x80>
			}
			else
			{
				/* There was no timeout and the semaphore count was not 0, so
				attempt to take the semaphore again. */
				prvUnlockQueue( pxQueue );
 8002d0a:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 8002d0c:	f000 f8d0 	bl	8002eb0 <prvUnlockQueue>
				( void ) xTaskResumeAll();
 8002d10:	f000 fba4 	bl	800345c <xTaskResumeAll>
 8002d14:	e758      	b.n	8002bc8 <xQueueSemaphoreTake+0x80>
			}
		}
		else
		{
			/* Timed out. */
			prvUnlockQueue( pxQueue );
 8002d16:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 8002d18:	f000 f8ca 	bl	8002eb0 <prvUnlockQueue>
			( void ) xTaskResumeAll();
 8002d1c:	f000 fb9e 	bl	800345c <xTaskResumeAll>

			/* If the semaphore count is 0 exit now as the timeout has
			expired.  Otherwise return to attempt to take the semaphore that is
			known to be available.  As semaphores are implemented by queues the
			queue being empty is equivalent to the semaphore count being 0. */
			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 8002d20:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 8002d22:	f000 f917 	bl	8002f54 <prvIsQueueEmpty>
 8002d26:	4603      	mov	r3, r0
 8002d28:	2b00      	cmp	r3, #0
 8002d2a:	f43f af4d 	beq.w	8002bc8 <xQueueSemaphoreTake+0x80>
				#if ( configUSE_MUTEXES == 1 )
				{
					/* xInheritanceOccurred could only have be set if
					pxQueue->uxQueueType == queueQUEUE_IS_MUTEX so no need to
					test the mutex type again to check it is actually a mutex. */
					if( xInheritanceOccurred != pdFALSE )
 8002d2e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002d30:	2b00      	cmp	r3, #0
 8002d32:	d00d      	beq.n	8002d50 <xQueueSemaphoreTake+0x208>
					{
						taskENTER_CRITICAL();
 8002d34:	f001 fa7e 	bl	8004234 <vPortEnterCritical>
							/* This task blocking on the mutex caused another
							task to inherit this task's priority.  Now this task
							has timed out the priority should be disinherited
							again, but only as low as the next highest priority
							task that is waiting for the same mutex. */
							uxHighestWaitingPriority = prvGetDisinheritPriorityAfterTimeout( pxQueue );
 8002d38:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 8002d3a:	f000 f811 	bl	8002d60 <prvGetDisinheritPriorityAfterTimeout>
 8002d3e:	6278      	str	r0, [r7, #36]	; 0x24
							vTaskPriorityDisinheritAfterTimeout( pxQueue->u.xSemaphore.xMutexHolder, uxHighestWaitingPriority );
 8002d40:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8002d42:	689b      	ldr	r3, [r3, #8]
 8002d44:	6a79      	ldr	r1, [r7, #36]	; 0x24
 8002d46:	4618      	mov	r0, r3
 8002d48:	f001 f83c 	bl	8003dc4 <vTaskPriorityDisinheritAfterTimeout>
						}
						taskEXIT_CRITICAL();
 8002d4c:	f001 faa2 	bl	8004294 <vPortExitCritical>
					}
				}
				#endif /* configUSE_MUTEXES */

				traceQUEUE_RECEIVE_FAILED( pxQueue );
				return errQUEUE_EMPTY;
 8002d50:	2300      	movs	r3, #0
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
	} /*lint -restore */
}
 8002d52:	4618      	mov	r0, r3
 8002d54:	3738      	adds	r7, #56	; 0x38
 8002d56:	46bd      	mov	sp, r7
 8002d58:	bd80      	pop	{r7, pc}
 8002d5a:	bf00      	nop
 8002d5c:	e000ed04 	.word	0xe000ed04

08002d60 <prvGetDisinheritPriorityAfterTimeout>:
/*-----------------------------------------------------------*/

#if( configUSE_MUTEXES == 1 )

	static UBaseType_t prvGetDisinheritPriorityAfterTimeout( const Queue_t * const pxQueue )
	{
 8002d60:	b480      	push	{r7}
 8002d62:	b085      	sub	sp, #20
 8002d64:	af00      	add	r7, sp, #0
 8002d66:	6078      	str	r0, [r7, #4]
		priority, but the waiting task times out, then the holder should
		disinherit the priority - but only down to the highest priority of any
		other tasks that are waiting for the same mutex.  For this purpose,
		return the priority of the highest priority task that is waiting for the
		mutex. */
		if( listCURRENT_LIST_LENGTH( &( pxQueue->xTasksWaitingToReceive ) ) > 0U )
 8002d68:	687b      	ldr	r3, [r7, #4]
 8002d6a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002d6c:	2b00      	cmp	r3, #0
 8002d6e:	d006      	beq.n	8002d7e <prvGetDisinheritPriorityAfterTimeout+0x1e>
		{
			uxHighestPriorityOfWaitingTasks = ( UBaseType_t ) configMAX_PRIORITIES - ( UBaseType_t ) listGET_ITEM_VALUE_OF_HEAD_ENTRY( &( pxQueue->xTasksWaitingToReceive ) );
 8002d70:	687b      	ldr	r3, [r7, #4]
 8002d72:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002d74:	681b      	ldr	r3, [r3, #0]
 8002d76:	f1c3 0307 	rsb	r3, r3, #7
 8002d7a:	60fb      	str	r3, [r7, #12]
 8002d7c:	e001      	b.n	8002d82 <prvGetDisinheritPriorityAfterTimeout+0x22>
		}
		else
		{
			uxHighestPriorityOfWaitingTasks = tskIDLE_PRIORITY;
 8002d7e:	2300      	movs	r3, #0
 8002d80:	60fb      	str	r3, [r7, #12]
		}

		return uxHighestPriorityOfWaitingTasks;
 8002d82:	68fb      	ldr	r3, [r7, #12]
	}
 8002d84:	4618      	mov	r0, r3
 8002d86:	3714      	adds	r7, #20
 8002d88:	46bd      	mov	sp, r7
 8002d8a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002d8e:	4770      	bx	lr

08002d90 <prvCopyDataToQueue>:

#endif /* configUSE_MUTEXES */
/*-----------------------------------------------------------*/

static BaseType_t prvCopyDataToQueue( Queue_t * const pxQueue, const void *pvItemToQueue, const BaseType_t xPosition )
{
 8002d90:	b580      	push	{r7, lr}
 8002d92:	b086      	sub	sp, #24
 8002d94:	af00      	add	r7, sp, #0
 8002d96:	60f8      	str	r0, [r7, #12]
 8002d98:	60b9      	str	r1, [r7, #8]
 8002d9a:	607a      	str	r2, [r7, #4]
BaseType_t xReturn = pdFALSE;
 8002d9c:	2300      	movs	r3, #0
 8002d9e:	617b      	str	r3, [r7, #20]
UBaseType_t uxMessagesWaiting;

	/* This function is called from a critical section. */

	uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 8002da0:	68fb      	ldr	r3, [r7, #12]
 8002da2:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002da4:	613b      	str	r3, [r7, #16]

	if( pxQueue->uxItemSize == ( UBaseType_t ) 0 )
 8002da6:	68fb      	ldr	r3, [r7, #12]
 8002da8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002daa:	2b00      	cmp	r3, #0
 8002dac:	d10d      	bne.n	8002dca <prvCopyDataToQueue+0x3a>
	{
		#if ( configUSE_MUTEXES == 1 )
		{
			if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
 8002dae:	68fb      	ldr	r3, [r7, #12]
 8002db0:	681b      	ldr	r3, [r3, #0]
 8002db2:	2b00      	cmp	r3, #0
 8002db4:	d14d      	bne.n	8002e52 <prvCopyDataToQueue+0xc2>
			{
				/* The mutex is no longer being held. */
				xReturn = xTaskPriorityDisinherit( pxQueue->u.xSemaphore.xMutexHolder );
 8002db6:	68fb      	ldr	r3, [r7, #12]
 8002db8:	689b      	ldr	r3, [r3, #8]
 8002dba:	4618      	mov	r0, r3
 8002dbc:	f000 ff7c 	bl	8003cb8 <xTaskPriorityDisinherit>
 8002dc0:	6178      	str	r0, [r7, #20]
				pxQueue->u.xSemaphore.xMutexHolder = NULL;
 8002dc2:	68fb      	ldr	r3, [r7, #12]
 8002dc4:	2200      	movs	r2, #0
 8002dc6:	609a      	str	r2, [r3, #8]
 8002dc8:	e043      	b.n	8002e52 <prvCopyDataToQueue+0xc2>
				mtCOVERAGE_TEST_MARKER();
			}
		}
		#endif /* configUSE_MUTEXES */
	}
	else if( xPosition == queueSEND_TO_BACK )
 8002dca:	687b      	ldr	r3, [r7, #4]
 8002dcc:	2b00      	cmp	r3, #0
 8002dce:	d119      	bne.n	8002e04 <prvCopyDataToQueue+0x74>
	{
		( void ) memcpy( ( void * ) pxQueue->pcWriteTo, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 !e9087 MISRA exception as the casts are only redundant for some ports, plus previous logic ensures a null pointer can only be passed to memcpy() if the copy size is 0.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes. */
 8002dd0:	68fb      	ldr	r3, [r7, #12]
 8002dd2:	6858      	ldr	r0, [r3, #4]
 8002dd4:	68fb      	ldr	r3, [r7, #12]
 8002dd6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002dd8:	461a      	mov	r2, r3
 8002dda:	68b9      	ldr	r1, [r7, #8]
 8002ddc:	f001 fd40 	bl	8004860 <memcpy>
		pxQueue->pcWriteTo += pxQueue->uxItemSize; /*lint !e9016 Pointer arithmetic on char types ok, especially in this use case where it is the clearest way of conveying intent. */
 8002de0:	68fb      	ldr	r3, [r7, #12]
 8002de2:	685a      	ldr	r2, [r3, #4]
 8002de4:	68fb      	ldr	r3, [r7, #12]
 8002de6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002de8:	441a      	add	r2, r3
 8002dea:	68fb      	ldr	r3, [r7, #12]
 8002dec:	605a      	str	r2, [r3, #4]
		if( pxQueue->pcWriteTo >= pxQueue->u.xQueue.pcTail ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 8002dee:	68fb      	ldr	r3, [r7, #12]
 8002df0:	685a      	ldr	r2, [r3, #4]
 8002df2:	68fb      	ldr	r3, [r7, #12]
 8002df4:	689b      	ldr	r3, [r3, #8]
 8002df6:	429a      	cmp	r2, r3
 8002df8:	d32b      	bcc.n	8002e52 <prvCopyDataToQueue+0xc2>
		{
			pxQueue->pcWriteTo = pxQueue->pcHead;
 8002dfa:	68fb      	ldr	r3, [r7, #12]
 8002dfc:	681a      	ldr	r2, [r3, #0]
 8002dfe:	68fb      	ldr	r3, [r7, #12]
 8002e00:	605a      	str	r2, [r3, #4]
 8002e02:	e026      	b.n	8002e52 <prvCopyDataToQueue+0xc2>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	else
	{
		( void ) memcpy( ( void * ) pxQueue->u.xQueue.pcReadFrom, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e9087 !e418 MISRA exception as the casts are only redundant for some ports.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes.  Assert checks null pointer only used when length is 0. */
 8002e04:	68fb      	ldr	r3, [r7, #12]
 8002e06:	68d8      	ldr	r0, [r3, #12]
 8002e08:	68fb      	ldr	r3, [r7, #12]
 8002e0a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002e0c:	461a      	mov	r2, r3
 8002e0e:	68b9      	ldr	r1, [r7, #8]
 8002e10:	f001 fd26 	bl	8004860 <memcpy>
		pxQueue->u.xQueue.pcReadFrom -= pxQueue->uxItemSize;
 8002e14:	68fb      	ldr	r3, [r7, #12]
 8002e16:	68da      	ldr	r2, [r3, #12]
 8002e18:	68fb      	ldr	r3, [r7, #12]
 8002e1a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002e1c:	425b      	negs	r3, r3
 8002e1e:	441a      	add	r2, r3
 8002e20:	68fb      	ldr	r3, [r7, #12]
 8002e22:	60da      	str	r2, [r3, #12]
		if( pxQueue->u.xQueue.pcReadFrom < pxQueue->pcHead ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 8002e24:	68fb      	ldr	r3, [r7, #12]
 8002e26:	68da      	ldr	r2, [r3, #12]
 8002e28:	68fb      	ldr	r3, [r7, #12]
 8002e2a:	681b      	ldr	r3, [r3, #0]
 8002e2c:	429a      	cmp	r2, r3
 8002e2e:	d207      	bcs.n	8002e40 <prvCopyDataToQueue+0xb0>
		{
			pxQueue->u.xQueue.pcReadFrom = ( pxQueue->u.xQueue.pcTail - pxQueue->uxItemSize );
 8002e30:	68fb      	ldr	r3, [r7, #12]
 8002e32:	689a      	ldr	r2, [r3, #8]
 8002e34:	68fb      	ldr	r3, [r7, #12]
 8002e36:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002e38:	425b      	negs	r3, r3
 8002e3a:	441a      	add	r2, r3
 8002e3c:	68fb      	ldr	r3, [r7, #12]
 8002e3e:	60da      	str	r2, [r3, #12]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		if( xPosition == queueOVERWRITE )
 8002e40:	687b      	ldr	r3, [r7, #4]
 8002e42:	2b02      	cmp	r3, #2
 8002e44:	d105      	bne.n	8002e52 <prvCopyDataToQueue+0xc2>
		{
			if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 8002e46:	693b      	ldr	r3, [r7, #16]
 8002e48:	2b00      	cmp	r3, #0
 8002e4a:	d002      	beq.n	8002e52 <prvCopyDataToQueue+0xc2>
			{
				/* An item is not being added but overwritten, so subtract
				one from the recorded number of items in the queue so when
				one is added again below the number of recorded items remains
				correct. */
				--uxMessagesWaiting;
 8002e4c:	693b      	ldr	r3, [r7, #16]
 8002e4e:	3b01      	subs	r3, #1
 8002e50:	613b      	str	r3, [r7, #16]
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}

	pxQueue->uxMessagesWaiting = uxMessagesWaiting + ( UBaseType_t ) 1;
 8002e52:	693b      	ldr	r3, [r7, #16]
 8002e54:	1c5a      	adds	r2, r3, #1
 8002e56:	68fb      	ldr	r3, [r7, #12]
 8002e58:	639a      	str	r2, [r3, #56]	; 0x38

	return xReturn;
 8002e5a:	697b      	ldr	r3, [r7, #20]
}
 8002e5c:	4618      	mov	r0, r3
 8002e5e:	3718      	adds	r7, #24
 8002e60:	46bd      	mov	sp, r7
 8002e62:	bd80      	pop	{r7, pc}

08002e64 <prvCopyDataFromQueue>:
/*-----------------------------------------------------------*/

static void prvCopyDataFromQueue( Queue_t * const pxQueue, void * const pvBuffer )
{
 8002e64:	b580      	push	{r7, lr}
 8002e66:	b082      	sub	sp, #8
 8002e68:	af00      	add	r7, sp, #0
 8002e6a:	6078      	str	r0, [r7, #4]
 8002e6c:	6039      	str	r1, [r7, #0]
	if( pxQueue->uxItemSize != ( UBaseType_t ) 0 )
 8002e6e:	687b      	ldr	r3, [r7, #4]
 8002e70:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002e72:	2b00      	cmp	r3, #0
 8002e74:	d018      	beq.n	8002ea8 <prvCopyDataFromQueue+0x44>
	{
		pxQueue->u.xQueue.pcReadFrom += pxQueue->uxItemSize; /*lint !e9016 Pointer arithmetic on char types ok, especially in this use case where it is the clearest way of conveying intent. */
 8002e76:	687b      	ldr	r3, [r7, #4]
 8002e78:	68da      	ldr	r2, [r3, #12]
 8002e7a:	687b      	ldr	r3, [r7, #4]
 8002e7c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002e7e:	441a      	add	r2, r3
 8002e80:	687b      	ldr	r3, [r7, #4]
 8002e82:	60da      	str	r2, [r3, #12]
		if( pxQueue->u.xQueue.pcReadFrom >= pxQueue->u.xQueue.pcTail ) /*lint !e946 MISRA exception justified as use of the relational operator is the cleanest solutions. */
 8002e84:	687b      	ldr	r3, [r7, #4]
 8002e86:	68da      	ldr	r2, [r3, #12]
 8002e88:	687b      	ldr	r3, [r7, #4]
 8002e8a:	689b      	ldr	r3, [r3, #8]
 8002e8c:	429a      	cmp	r2, r3
 8002e8e:	d303      	bcc.n	8002e98 <prvCopyDataFromQueue+0x34>
		{
			pxQueue->u.xQueue.pcReadFrom = pxQueue->pcHead;
 8002e90:	687b      	ldr	r3, [r7, #4]
 8002e92:	681a      	ldr	r2, [r3, #0]
 8002e94:	687b      	ldr	r3, [r7, #4]
 8002e96:	60da      	str	r2, [r3, #12]
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
		( void ) memcpy( ( void * ) pvBuffer, ( void * ) pxQueue->u.xQueue.pcReadFrom, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 !e9087 MISRA exception as the casts are only redundant for some ports.  Also previous logic ensures a null pointer can only be passed to memcpy() when the count is 0.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes. */
 8002e98:	687b      	ldr	r3, [r7, #4]
 8002e9a:	68d9      	ldr	r1, [r3, #12]
 8002e9c:	687b      	ldr	r3, [r7, #4]
 8002e9e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002ea0:	461a      	mov	r2, r3
 8002ea2:	6838      	ldr	r0, [r7, #0]
 8002ea4:	f001 fcdc 	bl	8004860 <memcpy>
	}
}
 8002ea8:	bf00      	nop
 8002eaa:	3708      	adds	r7, #8
 8002eac:	46bd      	mov	sp, r7
 8002eae:	bd80      	pop	{r7, pc}

08002eb0 <prvUnlockQueue>:
/*-----------------------------------------------------------*/

static void prvUnlockQueue( Queue_t * const pxQueue )
{
 8002eb0:	b580      	push	{r7, lr}
 8002eb2:	b084      	sub	sp, #16
 8002eb4:	af00      	add	r7, sp, #0
 8002eb6:	6078      	str	r0, [r7, #4]

	/* The lock counts contains the number of extra data items placed or
	removed from the queue while the queue was locked.  When a queue is
	locked items can be added or removed, but the event lists cannot be
	updated. */
	taskENTER_CRITICAL();
 8002eb8:	f001 f9bc 	bl	8004234 <vPortEnterCritical>
	{
		int8_t cTxLock = pxQueue->cTxLock;
 8002ebc:	687b      	ldr	r3, [r7, #4]
 8002ebe:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 8002ec2:	73fb      	strb	r3, [r7, #15]

		/* See if data was added to the queue while it was locked. */
		while( cTxLock > queueLOCKED_UNMODIFIED )
 8002ec4:	e011      	b.n	8002eea <prvUnlockQueue+0x3a>
			}
			#else /* configUSE_QUEUE_SETS */
			{
				/* Tasks that are removed from the event list will get added to
				the pending ready list as the scheduler is still suspended. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 8002ec6:	687b      	ldr	r3, [r7, #4]
 8002ec8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002eca:	2b00      	cmp	r3, #0
 8002ecc:	d012      	beq.n	8002ef4 <prvUnlockQueue+0x44>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 8002ece:	687b      	ldr	r3, [r7, #4]
 8002ed0:	3324      	adds	r3, #36	; 0x24
 8002ed2:	4618      	mov	r0, r3
 8002ed4:	f000 fc9c 	bl	8003810 <xTaskRemoveFromEventList>
 8002ed8:	4603      	mov	r3, r0
 8002eda:	2b00      	cmp	r3, #0
 8002edc:	d001      	beq.n	8002ee2 <prvUnlockQueue+0x32>
					{
						/* The task waiting has a higher priority so record that
						a context switch is required. */
						vTaskMissedYield();
 8002ede:	f000 fd71 	bl	80039c4 <vTaskMissedYield>
					break;
				}
			}
			#endif /* configUSE_QUEUE_SETS */

			--cTxLock;
 8002ee2:	7bfb      	ldrb	r3, [r7, #15]
 8002ee4:	3b01      	subs	r3, #1
 8002ee6:	b2db      	uxtb	r3, r3
 8002ee8:	73fb      	strb	r3, [r7, #15]
		while( cTxLock > queueLOCKED_UNMODIFIED )
 8002eea:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8002eee:	2b00      	cmp	r3, #0
 8002ef0:	dce9      	bgt.n	8002ec6 <prvUnlockQueue+0x16>
 8002ef2:	e000      	b.n	8002ef6 <prvUnlockQueue+0x46>
					break;
 8002ef4:	bf00      	nop
		}

		pxQueue->cTxLock = queueUNLOCKED;
 8002ef6:	687b      	ldr	r3, [r7, #4]
 8002ef8:	22ff      	movs	r2, #255	; 0xff
 8002efa:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
	}
	taskEXIT_CRITICAL();
 8002efe:	f001 f9c9 	bl	8004294 <vPortExitCritical>

	/* Do the same for the Rx lock. */
	taskENTER_CRITICAL();
 8002f02:	f001 f997 	bl	8004234 <vPortEnterCritical>
	{
		int8_t cRxLock = pxQueue->cRxLock;
 8002f06:	687b      	ldr	r3, [r7, #4]
 8002f08:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 8002f0c:	73bb      	strb	r3, [r7, #14]

		while( cRxLock > queueLOCKED_UNMODIFIED )
 8002f0e:	e011      	b.n	8002f34 <prvUnlockQueue+0x84>
		{
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 8002f10:	687b      	ldr	r3, [r7, #4]
 8002f12:	691b      	ldr	r3, [r3, #16]
 8002f14:	2b00      	cmp	r3, #0
 8002f16:	d012      	beq.n	8002f3e <prvUnlockQueue+0x8e>
			{
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 8002f18:	687b      	ldr	r3, [r7, #4]
 8002f1a:	3310      	adds	r3, #16
 8002f1c:	4618      	mov	r0, r3
 8002f1e:	f000 fc77 	bl	8003810 <xTaskRemoveFromEventList>
 8002f22:	4603      	mov	r3, r0
 8002f24:	2b00      	cmp	r3, #0
 8002f26:	d001      	beq.n	8002f2c <prvUnlockQueue+0x7c>
				{
					vTaskMissedYield();
 8002f28:	f000 fd4c 	bl	80039c4 <vTaskMissedYield>
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				--cRxLock;
 8002f2c:	7bbb      	ldrb	r3, [r7, #14]
 8002f2e:	3b01      	subs	r3, #1
 8002f30:	b2db      	uxtb	r3, r3
 8002f32:	73bb      	strb	r3, [r7, #14]
		while( cRxLock > queueLOCKED_UNMODIFIED )
 8002f34:	f997 300e 	ldrsb.w	r3, [r7, #14]
 8002f38:	2b00      	cmp	r3, #0
 8002f3a:	dce9      	bgt.n	8002f10 <prvUnlockQueue+0x60>
 8002f3c:	e000      	b.n	8002f40 <prvUnlockQueue+0x90>
			}
			else
			{
				break;
 8002f3e:	bf00      	nop
			}
		}

		pxQueue->cRxLock = queueUNLOCKED;
 8002f40:	687b      	ldr	r3, [r7, #4]
 8002f42:	22ff      	movs	r2, #255	; 0xff
 8002f44:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
	}
	taskEXIT_CRITICAL();
 8002f48:	f001 f9a4 	bl	8004294 <vPortExitCritical>
}
 8002f4c:	bf00      	nop
 8002f4e:	3710      	adds	r7, #16
 8002f50:	46bd      	mov	sp, r7
 8002f52:	bd80      	pop	{r7, pc}

08002f54 <prvIsQueueEmpty>:
/*-----------------------------------------------------------*/

static BaseType_t prvIsQueueEmpty( const Queue_t *pxQueue )
{
 8002f54:	b580      	push	{r7, lr}
 8002f56:	b084      	sub	sp, #16
 8002f58:	af00      	add	r7, sp, #0
 8002f5a:	6078      	str	r0, [r7, #4]
BaseType_t xReturn;

	taskENTER_CRITICAL();
 8002f5c:	f001 f96a 	bl	8004234 <vPortEnterCritical>
	{
		if( pxQueue->uxMessagesWaiting == ( UBaseType_t )  0 )
 8002f60:	687b      	ldr	r3, [r7, #4]
 8002f62:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002f64:	2b00      	cmp	r3, #0
 8002f66:	d102      	bne.n	8002f6e <prvIsQueueEmpty+0x1a>
		{
			xReturn = pdTRUE;
 8002f68:	2301      	movs	r3, #1
 8002f6a:	60fb      	str	r3, [r7, #12]
 8002f6c:	e001      	b.n	8002f72 <prvIsQueueEmpty+0x1e>
		}
		else
		{
			xReturn = pdFALSE;
 8002f6e:	2300      	movs	r3, #0
 8002f70:	60fb      	str	r3, [r7, #12]
		}
	}
	taskEXIT_CRITICAL();
 8002f72:	f001 f98f 	bl	8004294 <vPortExitCritical>

	return xReturn;
 8002f76:	68fb      	ldr	r3, [r7, #12]
}
 8002f78:	4618      	mov	r0, r3
 8002f7a:	3710      	adds	r7, #16
 8002f7c:	46bd      	mov	sp, r7
 8002f7e:	bd80      	pop	{r7, pc}

08002f80 <prvIsQueueFull>:
	return xReturn;
} /*lint !e818 xQueue could not be pointer to const because it is a typedef. */
/*-----------------------------------------------------------*/

static BaseType_t prvIsQueueFull( const Queue_t *pxQueue )
{
 8002f80:	b580      	push	{r7, lr}
 8002f82:	b084      	sub	sp, #16
 8002f84:	af00      	add	r7, sp, #0
 8002f86:	6078      	str	r0, [r7, #4]
BaseType_t xReturn;

	taskENTER_CRITICAL();
 8002f88:	f001 f954 	bl	8004234 <vPortEnterCritical>
	{
		if( pxQueue->uxMessagesWaiting == pxQueue->uxLength )
 8002f8c:	687b      	ldr	r3, [r7, #4]
 8002f8e:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8002f90:	687b      	ldr	r3, [r7, #4]
 8002f92:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8002f94:	429a      	cmp	r2, r3
 8002f96:	d102      	bne.n	8002f9e <prvIsQueueFull+0x1e>
		{
			xReturn = pdTRUE;
 8002f98:	2301      	movs	r3, #1
 8002f9a:	60fb      	str	r3, [r7, #12]
 8002f9c:	e001      	b.n	8002fa2 <prvIsQueueFull+0x22>
		}
		else
		{
			xReturn = pdFALSE;
 8002f9e:	2300      	movs	r3, #0
 8002fa0:	60fb      	str	r3, [r7, #12]
		}
	}
	taskEXIT_CRITICAL();
 8002fa2:	f001 f977 	bl	8004294 <vPortExitCritical>

	return xReturn;
 8002fa6:	68fb      	ldr	r3, [r7, #12]
}
 8002fa8:	4618      	mov	r0, r3
 8002faa:	3710      	adds	r7, #16
 8002fac:	46bd      	mov	sp, r7
 8002fae:	bd80      	pop	{r7, pc}

08002fb0 <xTaskCreateStatic>:
									const uint32_t ulStackDepth,
									void * const pvParameters,
									UBaseType_t uxPriority,
									StackType_t * const puxStackBuffer,
									StaticTask_t * const pxTaskBuffer )
	{
 8002fb0:	b580      	push	{r7, lr}
 8002fb2:	b08e      	sub	sp, #56	; 0x38
 8002fb4:	af04      	add	r7, sp, #16
 8002fb6:	60f8      	str	r0, [r7, #12]
 8002fb8:	60b9      	str	r1, [r7, #8]
 8002fba:	607a      	str	r2, [r7, #4]
 8002fbc:	603b      	str	r3, [r7, #0]
	TCB_t *pxNewTCB;
	TaskHandle_t xReturn;

		configASSERT( puxStackBuffer != NULL );
 8002fbe:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8002fc0:	2b00      	cmp	r3, #0
 8002fc2:	d10a      	bne.n	8002fda <xTaskCreateStatic+0x2a>
	__asm volatile
 8002fc4:	f04f 0350 	mov.w	r3, #80	; 0x50
 8002fc8:	f383 8811 	msr	BASEPRI, r3
 8002fcc:	f3bf 8f6f 	isb	sy
 8002fd0:	f3bf 8f4f 	dsb	sy
 8002fd4:	623b      	str	r3, [r7, #32]
}
 8002fd6:	bf00      	nop
 8002fd8:	e7fe      	b.n	8002fd8 <xTaskCreateStatic+0x28>
		configASSERT( pxTaskBuffer != NULL );
 8002fda:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8002fdc:	2b00      	cmp	r3, #0
 8002fde:	d10a      	bne.n	8002ff6 <xTaskCreateStatic+0x46>
	__asm volatile
 8002fe0:	f04f 0350 	mov.w	r3, #80	; 0x50
 8002fe4:	f383 8811 	msr	BASEPRI, r3
 8002fe8:	f3bf 8f6f 	isb	sy
 8002fec:	f3bf 8f4f 	dsb	sy
 8002ff0:	61fb      	str	r3, [r7, #28]
}
 8002ff2:	bf00      	nop
 8002ff4:	e7fe      	b.n	8002ff4 <xTaskCreateStatic+0x44>
		#if( configASSERT_DEFINED == 1 )
		{
			/* Sanity check that the size of the structure used to declare a
			variable of type StaticTask_t equals the size of the real task
			structure. */
			volatile size_t xSize = sizeof( StaticTask_t );
 8002ff6:	23b4      	movs	r3, #180	; 0xb4
 8002ff8:	613b      	str	r3, [r7, #16]
			configASSERT( xSize == sizeof( TCB_t ) );
 8002ffa:	693b      	ldr	r3, [r7, #16]
 8002ffc:	2bb4      	cmp	r3, #180	; 0xb4
 8002ffe:	d00a      	beq.n	8003016 <xTaskCreateStatic+0x66>
	__asm volatile
 8003000:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003004:	f383 8811 	msr	BASEPRI, r3
 8003008:	f3bf 8f6f 	isb	sy
 800300c:	f3bf 8f4f 	dsb	sy
 8003010:	61bb      	str	r3, [r7, #24]
}
 8003012:	bf00      	nop
 8003014:	e7fe      	b.n	8003014 <xTaskCreateStatic+0x64>
			( void ) xSize; /* Prevent lint warning when configASSERT() is not used. */
 8003016:	693b      	ldr	r3, [r7, #16]
		}
		#endif /* configASSERT_DEFINED */


		if( ( pxTaskBuffer != NULL ) && ( puxStackBuffer != NULL ) )
 8003018:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800301a:	2b00      	cmp	r3, #0
 800301c:	d01e      	beq.n	800305c <xTaskCreateStatic+0xac>
 800301e:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8003020:	2b00      	cmp	r3, #0
 8003022:	d01b      	beq.n	800305c <xTaskCreateStatic+0xac>
		{
			/* The memory used for the task's TCB and stack are passed into this
			function - use them. */
			pxNewTCB = ( TCB_t * ) pxTaskBuffer; /*lint !e740 !e9087 Unusual cast is ok as the structures are designed to have the same alignment, and the size is checked by an assert. */
 8003024:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8003026:	627b      	str	r3, [r7, #36]	; 0x24
			pxNewTCB->pxStack = ( StackType_t * ) puxStackBuffer;
 8003028:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800302a:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 800302c:	631a      	str	r2, [r3, #48]	; 0x30

			#if( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 !e9029 Macro has been consolidated for readability reasons. */
			{
				/* Tasks can be created statically or dynamically, so note this
				task was created statically in case the task is later deleted. */
				pxNewTCB->ucStaticallyAllocated = tskSTATICALLY_ALLOCATED_STACK_AND_TCB;
 800302e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003030:	2202      	movs	r2, #2
 8003032:	f883 20b1 	strb.w	r2, [r3, #177]	; 0xb1
			}
			#endif /* tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE */

			prvInitialiseNewTask( pxTaskCode, pcName, ulStackDepth, pvParameters, uxPriority, &xReturn, pxNewTCB, NULL );
 8003036:	2300      	movs	r3, #0
 8003038:	9303      	str	r3, [sp, #12]
 800303a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800303c:	9302      	str	r3, [sp, #8]
 800303e:	f107 0314 	add.w	r3, r7, #20
 8003042:	9301      	str	r3, [sp, #4]
 8003044:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003046:	9300      	str	r3, [sp, #0]
 8003048:	683b      	ldr	r3, [r7, #0]
 800304a:	687a      	ldr	r2, [r7, #4]
 800304c:	68b9      	ldr	r1, [r7, #8]
 800304e:	68f8      	ldr	r0, [r7, #12]
 8003050:	f000 f850 	bl	80030f4 <prvInitialiseNewTask>
			prvAddNewTaskToReadyList( pxNewTCB );
 8003054:	6a78      	ldr	r0, [r7, #36]	; 0x24
 8003056:	f000 f8eb 	bl	8003230 <prvAddNewTaskToReadyList>
 800305a:	e001      	b.n	8003060 <xTaskCreateStatic+0xb0>
		}
		else
		{
			xReturn = NULL;
 800305c:	2300      	movs	r3, #0
 800305e:	617b      	str	r3, [r7, #20]
		}

		return xReturn;
 8003060:	697b      	ldr	r3, [r7, #20]
	}
 8003062:	4618      	mov	r0, r3
 8003064:	3728      	adds	r7, #40	; 0x28
 8003066:	46bd      	mov	sp, r7
 8003068:	bd80      	pop	{r7, pc}

0800306a <xTaskCreate>:
							const char * const pcName,		/*lint !e971 Unqualified char types are allowed for strings and single characters only. */
							const configSTACK_DEPTH_TYPE usStackDepth,
							void * const pvParameters,
							UBaseType_t uxPriority,
							TaskHandle_t * const pxCreatedTask )
	{
 800306a:	b580      	push	{r7, lr}
 800306c:	b08c      	sub	sp, #48	; 0x30
 800306e:	af04      	add	r7, sp, #16
 8003070:	60f8      	str	r0, [r7, #12]
 8003072:	60b9      	str	r1, [r7, #8]
 8003074:	603b      	str	r3, [r7, #0]
 8003076:	4613      	mov	r3, r2
 8003078:	80fb      	strh	r3, [r7, #6]
		#else /* portSTACK_GROWTH */
		{
		StackType_t *pxStack;

			/* Allocate space for the stack used by the task being created. */
			pxStack = pvPortMalloc( ( ( ( size_t ) usStackDepth ) * sizeof( StackType_t ) ) ); /*lint !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack and this allocation is the stack. */
 800307a:	88fb      	ldrh	r3, [r7, #6]
 800307c:	009b      	lsls	r3, r3, #2
 800307e:	4618      	mov	r0, r3
 8003080:	f001 f9ba 	bl	80043f8 <pvPortMalloc>
 8003084:	6178      	str	r0, [r7, #20]

			if( pxStack != NULL )
 8003086:	697b      	ldr	r3, [r7, #20]
 8003088:	2b00      	cmp	r3, #0
 800308a:	d00e      	beq.n	80030aa <xTaskCreate+0x40>
			{
				/* Allocate space for the TCB. */
				pxNewTCB = ( TCB_t * ) pvPortMalloc( sizeof( TCB_t ) ); /*lint !e9087 !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack, and the first member of TCB_t is always a pointer to the task's stack. */
 800308c:	20b4      	movs	r0, #180	; 0xb4
 800308e:	f001 f9b3 	bl	80043f8 <pvPortMalloc>
 8003092:	61f8      	str	r0, [r7, #28]

				if( pxNewTCB != NULL )
 8003094:	69fb      	ldr	r3, [r7, #28]
 8003096:	2b00      	cmp	r3, #0
 8003098:	d003      	beq.n	80030a2 <xTaskCreate+0x38>
				{
					/* Store the stack location in the TCB. */
					pxNewTCB->pxStack = pxStack;
 800309a:	69fb      	ldr	r3, [r7, #28]
 800309c:	697a      	ldr	r2, [r7, #20]
 800309e:	631a      	str	r2, [r3, #48]	; 0x30
 80030a0:	e005      	b.n	80030ae <xTaskCreate+0x44>
				}
				else
				{
					/* The stack cannot be used as the TCB was not created.  Free
					it again. */
					vPortFree( pxStack );
 80030a2:	6978      	ldr	r0, [r7, #20]
 80030a4:	f001 fa74 	bl	8004590 <vPortFree>
 80030a8:	e001      	b.n	80030ae <xTaskCreate+0x44>
				}
			}
			else
			{
				pxNewTCB = NULL;
 80030aa:	2300      	movs	r3, #0
 80030ac:	61fb      	str	r3, [r7, #28]
			}
		}
		#endif /* portSTACK_GROWTH */

		if( pxNewTCB != NULL )
 80030ae:	69fb      	ldr	r3, [r7, #28]
 80030b0:	2b00      	cmp	r3, #0
 80030b2:	d017      	beq.n	80030e4 <xTaskCreate+0x7a>
		{
			#if( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e9029 !e731 Macro has been consolidated for readability reasons. */
			{
				/* Tasks can be created statically or dynamically, so note this
				task was created dynamically in case it is later deleted. */
				pxNewTCB->ucStaticallyAllocated = tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB;
 80030b4:	69fb      	ldr	r3, [r7, #28]
 80030b6:	2200      	movs	r2, #0
 80030b8:	f883 20b1 	strb.w	r2, [r3, #177]	; 0xb1
			}
			#endif /* tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE */

			prvInitialiseNewTask( pxTaskCode, pcName, ( uint32_t ) usStackDepth, pvParameters, uxPriority, pxCreatedTask, pxNewTCB, NULL );
 80030bc:	88fa      	ldrh	r2, [r7, #6]
 80030be:	2300      	movs	r3, #0
 80030c0:	9303      	str	r3, [sp, #12]
 80030c2:	69fb      	ldr	r3, [r7, #28]
 80030c4:	9302      	str	r3, [sp, #8]
 80030c6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80030c8:	9301      	str	r3, [sp, #4]
 80030ca:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80030cc:	9300      	str	r3, [sp, #0]
 80030ce:	683b      	ldr	r3, [r7, #0]
 80030d0:	68b9      	ldr	r1, [r7, #8]
 80030d2:	68f8      	ldr	r0, [r7, #12]
 80030d4:	f000 f80e 	bl	80030f4 <prvInitialiseNewTask>
			prvAddNewTaskToReadyList( pxNewTCB );
 80030d8:	69f8      	ldr	r0, [r7, #28]
 80030da:	f000 f8a9 	bl	8003230 <prvAddNewTaskToReadyList>
			xReturn = pdPASS;
 80030de:	2301      	movs	r3, #1
 80030e0:	61bb      	str	r3, [r7, #24]
 80030e2:	e002      	b.n	80030ea <xTaskCreate+0x80>
		}
		else
		{
			xReturn = errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY;
 80030e4:	f04f 33ff 	mov.w	r3, #4294967295
 80030e8:	61bb      	str	r3, [r7, #24]
		}

		return xReturn;
 80030ea:	69bb      	ldr	r3, [r7, #24]
	}
 80030ec:	4618      	mov	r0, r3
 80030ee:	3720      	adds	r7, #32
 80030f0:	46bd      	mov	sp, r7
 80030f2:	bd80      	pop	{r7, pc}

080030f4 <prvInitialiseNewTask>:
									void * const pvParameters,
									UBaseType_t uxPriority,
									TaskHandle_t * const pxCreatedTask,
									TCB_t *pxNewTCB,
									const MemoryRegion_t * const xRegions )
{
 80030f4:	b580      	push	{r7, lr}
 80030f6:	b088      	sub	sp, #32
 80030f8:	af00      	add	r7, sp, #0
 80030fa:	60f8      	str	r0, [r7, #12]
 80030fc:	60b9      	str	r1, [r7, #8]
 80030fe:	607a      	str	r2, [r7, #4]
 8003100:	603b      	str	r3, [r7, #0]
	grows from high memory to low (as per the 80x86) or vice versa.
	portSTACK_GROWTH is used to make the result positive or negative as required
	by the port. */
	#if( portSTACK_GROWTH < 0 )
	{
		pxTopOfStack = &( pxNewTCB->pxStack[ ulStackDepth - ( uint32_t ) 1 ] );
 8003102:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003104:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8003106:	687b      	ldr	r3, [r7, #4]
 8003108:	f103 4380 	add.w	r3, r3, #1073741824	; 0x40000000
 800310c:	3b01      	subs	r3, #1
 800310e:	009b      	lsls	r3, r3, #2
 8003110:	4413      	add	r3, r2
 8003112:	61bb      	str	r3, [r7, #24]
		pxTopOfStack = ( StackType_t * ) ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack ) & ( ~( ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) ) ); /*lint !e923 !e9033 !e9078 MISRA exception.  Avoiding casts between pointers and integers is not practical.  Size differences accounted for using portPOINTER_SIZE_TYPE type.  Checked by assert(). */
 8003114:	69bb      	ldr	r3, [r7, #24]
 8003116:	f023 0307 	bic.w	r3, r3, #7
 800311a:	61bb      	str	r3, [r7, #24]

		/* Check the alignment of the calculated top of stack is correct. */
		configASSERT( ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack & ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) == 0UL ) );
 800311c:	69bb      	ldr	r3, [r7, #24]
 800311e:	f003 0307 	and.w	r3, r3, #7
 8003122:	2b00      	cmp	r3, #0
 8003124:	d00a      	beq.n	800313c <prvInitialiseNewTask+0x48>
	__asm volatile
 8003126:	f04f 0350 	mov.w	r3, #80	; 0x50
 800312a:	f383 8811 	msr	BASEPRI, r3
 800312e:	f3bf 8f6f 	isb	sy
 8003132:	f3bf 8f4f 	dsb	sy
 8003136:	617b      	str	r3, [r7, #20]
}
 8003138:	bf00      	nop
 800313a:	e7fe      	b.n	800313a <prvInitialiseNewTask+0x46>
		pxNewTCB->pxEndOfStack = pxNewTCB->pxStack + ( ulStackDepth - ( uint32_t ) 1 );
	}
	#endif /* portSTACK_GROWTH */

	/* Store the task name in the TCB. */
	if( pcName != NULL )
 800313c:	68bb      	ldr	r3, [r7, #8]
 800313e:	2b00      	cmp	r3, #0
 8003140:	d01f      	beq.n	8003182 <prvInitialiseNewTask+0x8e>
	{
		for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 8003142:	2300      	movs	r3, #0
 8003144:	61fb      	str	r3, [r7, #28]
 8003146:	e012      	b.n	800316e <prvInitialiseNewTask+0x7a>
		{
			pxNewTCB->pcTaskName[ x ] = pcName[ x ];
 8003148:	68ba      	ldr	r2, [r7, #8]
 800314a:	69fb      	ldr	r3, [r7, #28]
 800314c:	4413      	add	r3, r2
 800314e:	7819      	ldrb	r1, [r3, #0]
 8003150:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8003152:	69fb      	ldr	r3, [r7, #28]
 8003154:	4413      	add	r3, r2
 8003156:	3334      	adds	r3, #52	; 0x34
 8003158:	460a      	mov	r2, r1
 800315a:	701a      	strb	r2, [r3, #0]

			/* Don't copy all configMAX_TASK_NAME_LEN if the string is shorter than
			configMAX_TASK_NAME_LEN characters just in case the memory after the
			string is not accessible (extremely unlikely). */
			if( pcName[ x ] == ( char ) 0x00 )
 800315c:	68ba      	ldr	r2, [r7, #8]
 800315e:	69fb      	ldr	r3, [r7, #28]
 8003160:	4413      	add	r3, r2
 8003162:	781b      	ldrb	r3, [r3, #0]
 8003164:	2b00      	cmp	r3, #0
 8003166:	d006      	beq.n	8003176 <prvInitialiseNewTask+0x82>
		for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 8003168:	69fb      	ldr	r3, [r7, #28]
 800316a:	3301      	adds	r3, #1
 800316c:	61fb      	str	r3, [r7, #28]
 800316e:	69fb      	ldr	r3, [r7, #28]
 8003170:	2b0f      	cmp	r3, #15
 8003172:	d9e9      	bls.n	8003148 <prvInitialiseNewTask+0x54>
 8003174:	e000      	b.n	8003178 <prvInitialiseNewTask+0x84>
			{
				break;
 8003176:	bf00      	nop
			}
		}

		/* Ensure the name string is terminated in the case that the string length
		was greater or equal to configMAX_TASK_NAME_LEN. */
		pxNewTCB->pcTaskName[ configMAX_TASK_NAME_LEN - 1 ] = '\0';
 8003178:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800317a:	2200      	movs	r2, #0
 800317c:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 8003180:	e003      	b.n	800318a <prvInitialiseNewTask+0x96>
	}
	else
	{
		/* The task has not been given a name, so just ensure there is a NULL
		terminator when it is read out. */
		pxNewTCB->pcTaskName[ 0 ] = 0x00;
 8003182:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003184:	2200      	movs	r2, #0
 8003186:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
	}

	/* This is used as an array index so must ensure it's not too large.  First
	remove the privilege bit if one is present. */
	if( uxPriority >= ( UBaseType_t ) configMAX_PRIORITIES )
 800318a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800318c:	2b06      	cmp	r3, #6
 800318e:	d901      	bls.n	8003194 <prvInitialiseNewTask+0xa0>
	{
		uxPriority = ( UBaseType_t ) configMAX_PRIORITIES - ( UBaseType_t ) 1U;
 8003190:	2306      	movs	r3, #6
 8003192:	62bb      	str	r3, [r7, #40]	; 0x28
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxNewTCB->uxPriority = uxPriority;
 8003194:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003196:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8003198:	62da      	str	r2, [r3, #44]	; 0x2c
	#if ( configUSE_MUTEXES == 1 )
	{
		pxNewTCB->uxBasePriority = uxPriority;
 800319a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800319c:	6aba      	ldr	r2, [r7, #40]	; 0x28
 800319e:	645a      	str	r2, [r3, #68]	; 0x44
		pxNewTCB->uxMutexesHeld = 0;
 80031a0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80031a2:	2200      	movs	r2, #0
 80031a4:	649a      	str	r2, [r3, #72]	; 0x48
	}
	#endif /* configUSE_MUTEXES */

	vListInitialiseItem( &( pxNewTCB->xStateListItem ) );
 80031a6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80031a8:	3304      	adds	r3, #4
 80031aa:	4618      	mov	r0, r3
 80031ac:	f7ff f966 	bl	800247c <vListInitialiseItem>
	vListInitialiseItem( &( pxNewTCB->xEventListItem ) );
 80031b0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80031b2:	3318      	adds	r3, #24
 80031b4:	4618      	mov	r0, r3
 80031b6:	f7ff f961 	bl	800247c <vListInitialiseItem>

	/* Set the pxNewTCB as a link back from the ListItem_t.  This is so we can get
	back to	the containing TCB from a generic item in a list. */
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xStateListItem ), pxNewTCB );
 80031ba:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80031bc:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 80031be:	611a      	str	r2, [r3, #16]

	/* Event lists are always in priority order. */
	listSET_LIST_ITEM_VALUE( &( pxNewTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 80031c0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80031c2:	f1c3 0207 	rsb	r2, r3, #7
 80031c6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80031c8:	619a      	str	r2, [r3, #24]
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xEventListItem ), pxNewTCB );
 80031ca:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80031cc:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 80031ce:	625a      	str	r2, [r3, #36]	; 0x24
	}
	#endif

	#if ( configUSE_TASK_NOTIFICATIONS == 1 )
	{
		pxNewTCB->ulNotifiedValue = 0;
 80031d0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80031d2:	2200      	movs	r2, #0
 80031d4:	f8c3 20ac 	str.w	r2, [r3, #172]	; 0xac
		pxNewTCB->ucNotifyState = taskNOT_WAITING_NOTIFICATION;
 80031d8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80031da:	2200      	movs	r2, #0
 80031dc:	f883 20b0 	strb.w	r2, [r3, #176]	; 0xb0
	#if ( configUSE_NEWLIB_REENTRANT == 1 )
	{
		/* Initialise this task's Newlib reent structure.
		See the third party link http://www.nadler.com/embedded/newlibAndFreeRTOS.html
		for additional information. */
		_REENT_INIT_PTR( ( &( pxNewTCB->xNewLib_reent ) ) );
 80031e0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80031e2:	334c      	adds	r3, #76	; 0x4c
 80031e4:	2260      	movs	r2, #96	; 0x60
 80031e6:	2100      	movs	r1, #0
 80031e8:	4618      	mov	r0, r3
 80031ea:	f001 fb47 	bl	800487c <memset>
 80031ee:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80031f0:	4a0c      	ldr	r2, [pc, #48]	; (8003224 <prvInitialiseNewTask+0x130>)
 80031f2:	651a      	str	r2, [r3, #80]	; 0x50
 80031f4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80031f6:	4a0c      	ldr	r2, [pc, #48]	; (8003228 <prvInitialiseNewTask+0x134>)
 80031f8:	655a      	str	r2, [r3, #84]	; 0x54
 80031fa:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80031fc:	4a0b      	ldr	r2, [pc, #44]	; (800322c <prvInitialiseNewTask+0x138>)
 80031fe:	659a      	str	r2, [r3, #88]	; 0x58
			}
			#endif /* portSTACK_GROWTH */
		}
		#else /* portHAS_STACK_OVERFLOW_CHECKING */
		{
			pxNewTCB->pxTopOfStack = pxPortInitialiseStack( pxTopOfStack, pxTaskCode, pvParameters );
 8003200:	683a      	ldr	r2, [r7, #0]
 8003202:	68f9      	ldr	r1, [r7, #12]
 8003204:	69b8      	ldr	r0, [r7, #24]
 8003206:	f000 fee5 	bl	8003fd4 <pxPortInitialiseStack>
 800320a:	4602      	mov	r2, r0
 800320c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800320e:	601a      	str	r2, [r3, #0]
		}
		#endif /* portHAS_STACK_OVERFLOW_CHECKING */
	}
	#endif /* portUSING_MPU_WRAPPERS */

	if( pxCreatedTask != NULL )
 8003210:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8003212:	2b00      	cmp	r3, #0
 8003214:	d002      	beq.n	800321c <prvInitialiseNewTask+0x128>
	{
		/* Pass the handle out in an anonymous way.  The handle can be used to
		change the created task's priority, delete the created task, etc.*/
		*pxCreatedTask = ( TaskHandle_t ) pxNewTCB;
 8003216:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8003218:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800321a:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 800321c:	bf00      	nop
 800321e:	3720      	adds	r7, #32
 8003220:	46bd      	mov	sp, r7
 8003222:	bd80      	pop	{r7, pc}
 8003224:	08004cc8 	.word	0x08004cc8
 8003228:	08004ce8 	.word	0x08004ce8
 800322c:	08004ca8 	.word	0x08004ca8

08003230 <prvAddNewTaskToReadyList>:
/*-----------------------------------------------------------*/

static void prvAddNewTaskToReadyList( TCB_t *pxNewTCB )
{
 8003230:	b580      	push	{r7, lr}
 8003232:	b082      	sub	sp, #8
 8003234:	af00      	add	r7, sp, #0
 8003236:	6078      	str	r0, [r7, #4]
	/* Ensure interrupts don't access the task lists while the lists are being
	updated. */
	taskENTER_CRITICAL();
 8003238:	f000 fffc 	bl	8004234 <vPortEnterCritical>
	{
		uxCurrentNumberOfTasks++;
 800323c:	4b2a      	ldr	r3, [pc, #168]	; (80032e8 <prvAddNewTaskToReadyList+0xb8>)
 800323e:	681b      	ldr	r3, [r3, #0]
 8003240:	3301      	adds	r3, #1
 8003242:	4a29      	ldr	r2, [pc, #164]	; (80032e8 <prvAddNewTaskToReadyList+0xb8>)
 8003244:	6013      	str	r3, [r2, #0]
		if( pxCurrentTCB == NULL )
 8003246:	4b29      	ldr	r3, [pc, #164]	; (80032ec <prvAddNewTaskToReadyList+0xbc>)
 8003248:	681b      	ldr	r3, [r3, #0]
 800324a:	2b00      	cmp	r3, #0
 800324c:	d109      	bne.n	8003262 <prvAddNewTaskToReadyList+0x32>
		{
			/* There are no other tasks, or all the other tasks are in
			the suspended state - make this the current task. */
			pxCurrentTCB = pxNewTCB;
 800324e:	4a27      	ldr	r2, [pc, #156]	; (80032ec <prvAddNewTaskToReadyList+0xbc>)
 8003250:	687b      	ldr	r3, [r7, #4]
 8003252:	6013      	str	r3, [r2, #0]

			if( uxCurrentNumberOfTasks == ( UBaseType_t ) 1 )
 8003254:	4b24      	ldr	r3, [pc, #144]	; (80032e8 <prvAddNewTaskToReadyList+0xb8>)
 8003256:	681b      	ldr	r3, [r3, #0]
 8003258:	2b01      	cmp	r3, #1
 800325a:	d110      	bne.n	800327e <prvAddNewTaskToReadyList+0x4e>
			{
				/* This is the first task to be created so do the preliminary
				initialisation required.  We will not recover if this call
				fails, but we will report the failure. */
				prvInitialiseTaskLists();
 800325c:	f000 fbd6 	bl	8003a0c <prvInitialiseTaskLists>
 8003260:	e00d      	b.n	800327e <prvAddNewTaskToReadyList+0x4e>
		else
		{
			/* If the scheduler is not already running, make this task the
			current task if it is the highest priority task to be created
			so far. */
			if( xSchedulerRunning == pdFALSE )
 8003262:	4b23      	ldr	r3, [pc, #140]	; (80032f0 <prvAddNewTaskToReadyList+0xc0>)
 8003264:	681b      	ldr	r3, [r3, #0]
 8003266:	2b00      	cmp	r3, #0
 8003268:	d109      	bne.n	800327e <prvAddNewTaskToReadyList+0x4e>
			{
				if( pxCurrentTCB->uxPriority <= pxNewTCB->uxPriority )
 800326a:	4b20      	ldr	r3, [pc, #128]	; (80032ec <prvAddNewTaskToReadyList+0xbc>)
 800326c:	681b      	ldr	r3, [r3, #0]
 800326e:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8003270:	687b      	ldr	r3, [r7, #4]
 8003272:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003274:	429a      	cmp	r2, r3
 8003276:	d802      	bhi.n	800327e <prvAddNewTaskToReadyList+0x4e>
				{
					pxCurrentTCB = pxNewTCB;
 8003278:	4a1c      	ldr	r2, [pc, #112]	; (80032ec <prvAddNewTaskToReadyList+0xbc>)
 800327a:	687b      	ldr	r3, [r7, #4]
 800327c:	6013      	str	r3, [r2, #0]
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}

		uxTaskNumber++;
 800327e:	4b1d      	ldr	r3, [pc, #116]	; (80032f4 <prvAddNewTaskToReadyList+0xc4>)
 8003280:	681b      	ldr	r3, [r3, #0]
 8003282:	3301      	adds	r3, #1
 8003284:	4a1b      	ldr	r2, [pc, #108]	; (80032f4 <prvAddNewTaskToReadyList+0xc4>)
 8003286:	6013      	str	r3, [r2, #0]
			pxNewTCB->uxTCBNumber = uxTaskNumber;
		}
		#endif /* configUSE_TRACE_FACILITY */
		traceTASK_CREATE( pxNewTCB );

		prvAddTaskToReadyList( pxNewTCB );
 8003288:	687b      	ldr	r3, [r7, #4]
 800328a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800328c:	2201      	movs	r2, #1
 800328e:	409a      	lsls	r2, r3
 8003290:	4b19      	ldr	r3, [pc, #100]	; (80032f8 <prvAddNewTaskToReadyList+0xc8>)
 8003292:	681b      	ldr	r3, [r3, #0]
 8003294:	4313      	orrs	r3, r2
 8003296:	4a18      	ldr	r2, [pc, #96]	; (80032f8 <prvAddNewTaskToReadyList+0xc8>)
 8003298:	6013      	str	r3, [r2, #0]
 800329a:	687b      	ldr	r3, [r7, #4]
 800329c:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800329e:	4613      	mov	r3, r2
 80032a0:	009b      	lsls	r3, r3, #2
 80032a2:	4413      	add	r3, r2
 80032a4:	009b      	lsls	r3, r3, #2
 80032a6:	4a15      	ldr	r2, [pc, #84]	; (80032fc <prvAddNewTaskToReadyList+0xcc>)
 80032a8:	441a      	add	r2, r3
 80032aa:	687b      	ldr	r3, [r7, #4]
 80032ac:	3304      	adds	r3, #4
 80032ae:	4619      	mov	r1, r3
 80032b0:	4610      	mov	r0, r2
 80032b2:	f7ff f8f0 	bl	8002496 <vListInsertEnd>

		portSETUP_TCB( pxNewTCB );
	}
	taskEXIT_CRITICAL();
 80032b6:	f000 ffed 	bl	8004294 <vPortExitCritical>

	if( xSchedulerRunning != pdFALSE )
 80032ba:	4b0d      	ldr	r3, [pc, #52]	; (80032f0 <prvAddNewTaskToReadyList+0xc0>)
 80032bc:	681b      	ldr	r3, [r3, #0]
 80032be:	2b00      	cmp	r3, #0
 80032c0:	d00e      	beq.n	80032e0 <prvAddNewTaskToReadyList+0xb0>
	{
		/* If the created task is of a higher priority than the current task
		then it should run now. */
		if( pxCurrentTCB->uxPriority < pxNewTCB->uxPriority )
 80032c2:	4b0a      	ldr	r3, [pc, #40]	; (80032ec <prvAddNewTaskToReadyList+0xbc>)
 80032c4:	681b      	ldr	r3, [r3, #0]
 80032c6:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80032c8:	687b      	ldr	r3, [r7, #4]
 80032ca:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80032cc:	429a      	cmp	r2, r3
 80032ce:	d207      	bcs.n	80032e0 <prvAddNewTaskToReadyList+0xb0>
		{
			taskYIELD_IF_USING_PREEMPTION();
 80032d0:	4b0b      	ldr	r3, [pc, #44]	; (8003300 <prvAddNewTaskToReadyList+0xd0>)
 80032d2:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 80032d6:	601a      	str	r2, [r3, #0]
 80032d8:	f3bf 8f4f 	dsb	sy
 80032dc:	f3bf 8f6f 	isb	sy
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 80032e0:	bf00      	nop
 80032e2:	3708      	adds	r7, #8
 80032e4:	46bd      	mov	sp, r7
 80032e6:	bd80      	pop	{r7, pc}
 80032e8:	200004a8 	.word	0x200004a8
 80032ec:	200003a8 	.word	0x200003a8
 80032f0:	200004b4 	.word	0x200004b4
 80032f4:	200004c4 	.word	0x200004c4
 80032f8:	200004b0 	.word	0x200004b0
 80032fc:	200003ac 	.word	0x200003ac
 8003300:	e000ed04 	.word	0xe000ed04

08003304 <vTaskDelay>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelay == 1 )

	void vTaskDelay( const TickType_t xTicksToDelay )
	{
 8003304:	b580      	push	{r7, lr}
 8003306:	b084      	sub	sp, #16
 8003308:	af00      	add	r7, sp, #0
 800330a:	6078      	str	r0, [r7, #4]
	BaseType_t xAlreadyYielded = pdFALSE;
 800330c:	2300      	movs	r3, #0
 800330e:	60fb      	str	r3, [r7, #12]

		/* A delay time of zero just forces a reschedule. */
		if( xTicksToDelay > ( TickType_t ) 0U )
 8003310:	687b      	ldr	r3, [r7, #4]
 8003312:	2b00      	cmp	r3, #0
 8003314:	d017      	beq.n	8003346 <vTaskDelay+0x42>
		{
			configASSERT( uxSchedulerSuspended == 0 );
 8003316:	4b13      	ldr	r3, [pc, #76]	; (8003364 <vTaskDelay+0x60>)
 8003318:	681b      	ldr	r3, [r3, #0]
 800331a:	2b00      	cmp	r3, #0
 800331c:	d00a      	beq.n	8003334 <vTaskDelay+0x30>
	__asm volatile
 800331e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003322:	f383 8811 	msr	BASEPRI, r3
 8003326:	f3bf 8f6f 	isb	sy
 800332a:	f3bf 8f4f 	dsb	sy
 800332e:	60bb      	str	r3, [r7, #8]
}
 8003330:	bf00      	nop
 8003332:	e7fe      	b.n	8003332 <vTaskDelay+0x2e>
			vTaskSuspendAll();
 8003334:	f000 f884 	bl	8003440 <vTaskSuspendAll>
				list or removed from the blocked list until the scheduler
				is resumed.

				This task cannot be in an event list as it is the currently
				executing task. */
				prvAddCurrentTaskToDelayedList( xTicksToDelay, pdFALSE );
 8003338:	2100      	movs	r1, #0
 800333a:	6878      	ldr	r0, [r7, #4]
 800333c:	f000 fde4 	bl	8003f08 <prvAddCurrentTaskToDelayedList>
			}
			xAlreadyYielded = xTaskResumeAll();
 8003340:	f000 f88c 	bl	800345c <xTaskResumeAll>
 8003344:	60f8      	str	r0, [r7, #12]
			mtCOVERAGE_TEST_MARKER();
		}

		/* Force a reschedule if xTaskResumeAll has not already done so, we may
		have put ourselves to sleep. */
		if( xAlreadyYielded == pdFALSE )
 8003346:	68fb      	ldr	r3, [r7, #12]
 8003348:	2b00      	cmp	r3, #0
 800334a:	d107      	bne.n	800335c <vTaskDelay+0x58>
		{
			portYIELD_WITHIN_API();
 800334c:	4b06      	ldr	r3, [pc, #24]	; (8003368 <vTaskDelay+0x64>)
 800334e:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8003352:	601a      	str	r2, [r3, #0]
 8003354:	f3bf 8f4f 	dsb	sy
 8003358:	f3bf 8f6f 	isb	sy
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
 800335c:	bf00      	nop
 800335e:	3710      	adds	r7, #16
 8003360:	46bd      	mov	sp, r7
 8003362:	bd80      	pop	{r7, pc}
 8003364:	200004d0 	.word	0x200004d0
 8003368:	e000ed04 	.word	0xe000ed04

0800336c <vTaskStartScheduler>:

#endif /* ( ( INCLUDE_xTaskResumeFromISR == 1 ) && ( INCLUDE_vTaskSuspend == 1 ) ) */
/*-----------------------------------------------------------*/

void vTaskStartScheduler( void )
{
 800336c:	b580      	push	{r7, lr}
 800336e:	b08a      	sub	sp, #40	; 0x28
 8003370:	af04      	add	r7, sp, #16
BaseType_t xReturn;

	/* Add the idle task at the lowest priority. */
	#if( configSUPPORT_STATIC_ALLOCATION == 1 )
	{
		StaticTask_t *pxIdleTaskTCBBuffer = NULL;
 8003372:	2300      	movs	r3, #0
 8003374:	60bb      	str	r3, [r7, #8]
		StackType_t *pxIdleTaskStackBuffer = NULL;
 8003376:	2300      	movs	r3, #0
 8003378:	607b      	str	r3, [r7, #4]
		uint32_t ulIdleTaskStackSize;

		/* The Idle task is created using user provided RAM - obtain the
		address of the RAM then create the idle task. */
		vApplicationGetIdleTaskMemory( &pxIdleTaskTCBBuffer, &pxIdleTaskStackBuffer, &ulIdleTaskStackSize );
 800337a:	463a      	mov	r2, r7
 800337c:	1d39      	adds	r1, r7, #4
 800337e:	f107 0308 	add.w	r3, r7, #8
 8003382:	4618      	mov	r0, r3
 8003384:	f7fd f8c0 	bl	8000508 <vApplicationGetIdleTaskMemory>
		xIdleTaskHandle = xTaskCreateStatic(	prvIdleTask,
 8003388:	6839      	ldr	r1, [r7, #0]
 800338a:	687b      	ldr	r3, [r7, #4]
 800338c:	68ba      	ldr	r2, [r7, #8]
 800338e:	9202      	str	r2, [sp, #8]
 8003390:	9301      	str	r3, [sp, #4]
 8003392:	2300      	movs	r3, #0
 8003394:	9300      	str	r3, [sp, #0]
 8003396:	2300      	movs	r3, #0
 8003398:	460a      	mov	r2, r1
 800339a:	4921      	ldr	r1, [pc, #132]	; (8003420 <vTaskStartScheduler+0xb4>)
 800339c:	4821      	ldr	r0, [pc, #132]	; (8003424 <vTaskStartScheduler+0xb8>)
 800339e:	f7ff fe07 	bl	8002fb0 <xTaskCreateStatic>
 80033a2:	4603      	mov	r3, r0
 80033a4:	4a20      	ldr	r2, [pc, #128]	; (8003428 <vTaskStartScheduler+0xbc>)
 80033a6:	6013      	str	r3, [r2, #0]
												( void * ) NULL, /*lint !e961.  The cast is not redundant for all compilers. */
												portPRIVILEGE_BIT, /* In effect ( tskIDLE_PRIORITY | portPRIVILEGE_BIT ), but tskIDLE_PRIORITY is zero. */
												pxIdleTaskStackBuffer,
												pxIdleTaskTCBBuffer ); /*lint !e961 MISRA exception, justified as it is not a redundant explicit cast to all supported compilers. */

		if( xIdleTaskHandle != NULL )
 80033a8:	4b1f      	ldr	r3, [pc, #124]	; (8003428 <vTaskStartScheduler+0xbc>)
 80033aa:	681b      	ldr	r3, [r3, #0]
 80033ac:	2b00      	cmp	r3, #0
 80033ae:	d002      	beq.n	80033b6 <vTaskStartScheduler+0x4a>
		{
			xReturn = pdPASS;
 80033b0:	2301      	movs	r3, #1
 80033b2:	617b      	str	r3, [r7, #20]
 80033b4:	e001      	b.n	80033ba <vTaskStartScheduler+0x4e>
		}
		else
		{
			xReturn = pdFAIL;
 80033b6:	2300      	movs	r3, #0
 80033b8:	617b      	str	r3, [r7, #20]
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif /* configUSE_TIMERS */

	if( xReturn == pdPASS )
 80033ba:	697b      	ldr	r3, [r7, #20]
 80033bc:	2b01      	cmp	r3, #1
 80033be:	d11b      	bne.n	80033f8 <vTaskStartScheduler+0x8c>
	__asm volatile
 80033c0:	f04f 0350 	mov.w	r3, #80	; 0x50
 80033c4:	f383 8811 	msr	BASEPRI, r3
 80033c8:	f3bf 8f6f 	isb	sy
 80033cc:	f3bf 8f4f 	dsb	sy
 80033d0:	613b      	str	r3, [r7, #16]
}
 80033d2:	bf00      	nop
		{
			/* Switch Newlib's _impure_ptr variable to point to the _reent
			structure specific to the task that will run first.
			See the third party link http://www.nadler.com/embedded/newlibAndFreeRTOS.html
			for additional information. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
 80033d4:	4b15      	ldr	r3, [pc, #84]	; (800342c <vTaskStartScheduler+0xc0>)
 80033d6:	681b      	ldr	r3, [r3, #0]
 80033d8:	334c      	adds	r3, #76	; 0x4c
 80033da:	4a15      	ldr	r2, [pc, #84]	; (8003430 <vTaskStartScheduler+0xc4>)
 80033dc:	6013      	str	r3, [r2, #0]
		}
		#endif /* configUSE_NEWLIB_REENTRANT */

		xNextTaskUnblockTime = portMAX_DELAY;
 80033de:	4b15      	ldr	r3, [pc, #84]	; (8003434 <vTaskStartScheduler+0xc8>)
 80033e0:	f04f 32ff 	mov.w	r2, #4294967295
 80033e4:	601a      	str	r2, [r3, #0]
		xSchedulerRunning = pdTRUE;
 80033e6:	4b14      	ldr	r3, [pc, #80]	; (8003438 <vTaskStartScheduler+0xcc>)
 80033e8:	2201      	movs	r2, #1
 80033ea:	601a      	str	r2, [r3, #0]
		xTickCount = ( TickType_t ) configINITIAL_TICK_COUNT;
 80033ec:	4b13      	ldr	r3, [pc, #76]	; (800343c <vTaskStartScheduler+0xd0>)
 80033ee:	2200      	movs	r2, #0
 80033f0:	601a      	str	r2, [r3, #0]

		traceTASK_SWITCHED_IN();

		/* Setting up the timer tick is hardware specific and thus in the
		portable interface. */
		if( xPortStartScheduler() != pdFALSE )
 80033f2:	f000 fe7d 	bl	80040f0 <xPortStartScheduler>
	}

	/* Prevent compiler warnings if INCLUDE_xTaskGetIdleTaskHandle is set to 0,
	meaning xIdleTaskHandle is not used anywhere else. */
	( void ) xIdleTaskHandle;
}
 80033f6:	e00e      	b.n	8003416 <vTaskStartScheduler+0xaa>
		configASSERT( xReturn != errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY );
 80033f8:	697b      	ldr	r3, [r7, #20]
 80033fa:	f1b3 3fff 	cmp.w	r3, #4294967295
 80033fe:	d10a      	bne.n	8003416 <vTaskStartScheduler+0xaa>
	__asm volatile
 8003400:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003404:	f383 8811 	msr	BASEPRI, r3
 8003408:	f3bf 8f6f 	isb	sy
 800340c:	f3bf 8f4f 	dsb	sy
 8003410:	60fb      	str	r3, [r7, #12]
}
 8003412:	bf00      	nop
 8003414:	e7fe      	b.n	8003414 <vTaskStartScheduler+0xa8>
}
 8003416:	bf00      	nop
 8003418:	3718      	adds	r7, #24
 800341a:	46bd      	mov	sp, r7
 800341c:	bd80      	pop	{r7, pc}
 800341e:	bf00      	nop
 8003420:	08004c88 	.word	0x08004c88
 8003424:	080039dd 	.word	0x080039dd
 8003428:	200004cc 	.word	0x200004cc
 800342c:	200003a8 	.word	0x200003a8
 8003430:	20000010 	.word	0x20000010
 8003434:	200004c8 	.word	0x200004c8
 8003438:	200004b4 	.word	0x200004b4
 800343c:	200004ac 	.word	0x200004ac

08003440 <vTaskSuspendAll>:
	vPortEndScheduler();
}
/*----------------------------------------------------------*/

void vTaskSuspendAll( void )
{
 8003440:	b480      	push	{r7}
 8003442:	af00      	add	r7, sp, #0
	do not otherwise exhibit real time behaviour. */
	portSOFTWARE_BARRIER();

	/* The scheduler is suspended if uxSchedulerSuspended is non-zero.  An increment
	is used to allow calls to vTaskSuspendAll() to nest. */
	++uxSchedulerSuspended;
 8003444:	4b04      	ldr	r3, [pc, #16]	; (8003458 <vTaskSuspendAll+0x18>)
 8003446:	681b      	ldr	r3, [r3, #0]
 8003448:	3301      	adds	r3, #1
 800344a:	4a03      	ldr	r2, [pc, #12]	; (8003458 <vTaskSuspendAll+0x18>)
 800344c:	6013      	str	r3, [r2, #0]

	/* Enforces ordering for ports and optimised compilers that may otherwise place
	the above increment elsewhere. */
	portMEMORY_BARRIER();
}
 800344e:	bf00      	nop
 8003450:	46bd      	mov	sp, r7
 8003452:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003456:	4770      	bx	lr
 8003458:	200004d0 	.word	0x200004d0

0800345c <xTaskResumeAll>:

#endif /* configUSE_TICKLESS_IDLE */
/*----------------------------------------------------------*/

BaseType_t xTaskResumeAll( void )
{
 800345c:	b580      	push	{r7, lr}
 800345e:	b084      	sub	sp, #16
 8003460:	af00      	add	r7, sp, #0
TCB_t *pxTCB = NULL;
 8003462:	2300      	movs	r3, #0
 8003464:	60fb      	str	r3, [r7, #12]
BaseType_t xAlreadyYielded = pdFALSE;
 8003466:	2300      	movs	r3, #0
 8003468:	60bb      	str	r3, [r7, #8]

	/* If uxSchedulerSuspended is zero then this function does not match a
	previous call to vTaskSuspendAll(). */
	configASSERT( uxSchedulerSuspended );
 800346a:	4b41      	ldr	r3, [pc, #260]	; (8003570 <xTaskResumeAll+0x114>)
 800346c:	681b      	ldr	r3, [r3, #0]
 800346e:	2b00      	cmp	r3, #0
 8003470:	d10a      	bne.n	8003488 <xTaskResumeAll+0x2c>
	__asm volatile
 8003472:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003476:	f383 8811 	msr	BASEPRI, r3
 800347a:	f3bf 8f6f 	isb	sy
 800347e:	f3bf 8f4f 	dsb	sy
 8003482:	603b      	str	r3, [r7, #0]
}
 8003484:	bf00      	nop
 8003486:	e7fe      	b.n	8003486 <xTaskResumeAll+0x2a>
	/* It is possible that an ISR caused a task to be removed from an event
	list while the scheduler was suspended.  If this was the case then the
	removed task will have been added to the xPendingReadyList.  Once the
	scheduler has been resumed it is safe to move all the pending ready
	tasks from this list into their appropriate ready list. */
	taskENTER_CRITICAL();
 8003488:	f000 fed4 	bl	8004234 <vPortEnterCritical>
	{
		--uxSchedulerSuspended;
 800348c:	4b38      	ldr	r3, [pc, #224]	; (8003570 <xTaskResumeAll+0x114>)
 800348e:	681b      	ldr	r3, [r3, #0]
 8003490:	3b01      	subs	r3, #1
 8003492:	4a37      	ldr	r2, [pc, #220]	; (8003570 <xTaskResumeAll+0x114>)
 8003494:	6013      	str	r3, [r2, #0]

		if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8003496:	4b36      	ldr	r3, [pc, #216]	; (8003570 <xTaskResumeAll+0x114>)
 8003498:	681b      	ldr	r3, [r3, #0]
 800349a:	2b00      	cmp	r3, #0
 800349c:	d161      	bne.n	8003562 <xTaskResumeAll+0x106>
		{
			if( uxCurrentNumberOfTasks > ( UBaseType_t ) 0U )
 800349e:	4b35      	ldr	r3, [pc, #212]	; (8003574 <xTaskResumeAll+0x118>)
 80034a0:	681b      	ldr	r3, [r3, #0]
 80034a2:	2b00      	cmp	r3, #0
 80034a4:	d05d      	beq.n	8003562 <xTaskResumeAll+0x106>
			{
				/* Move any readied tasks from the pending list into the
				appropriate ready list. */
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 80034a6:	e02e      	b.n	8003506 <xTaskResumeAll+0xaa>
				{
					pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xPendingReadyList ) ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 80034a8:	4b33      	ldr	r3, [pc, #204]	; (8003578 <xTaskResumeAll+0x11c>)
 80034aa:	68db      	ldr	r3, [r3, #12]
 80034ac:	68db      	ldr	r3, [r3, #12]
 80034ae:	60fb      	str	r3, [r7, #12]
					( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 80034b0:	68fb      	ldr	r3, [r7, #12]
 80034b2:	3318      	adds	r3, #24
 80034b4:	4618      	mov	r0, r3
 80034b6:	f7ff f84b 	bl	8002550 <uxListRemove>
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 80034ba:	68fb      	ldr	r3, [r7, #12]
 80034bc:	3304      	adds	r3, #4
 80034be:	4618      	mov	r0, r3
 80034c0:	f7ff f846 	bl	8002550 <uxListRemove>
					prvAddTaskToReadyList( pxTCB );
 80034c4:	68fb      	ldr	r3, [r7, #12]
 80034c6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80034c8:	2201      	movs	r2, #1
 80034ca:	409a      	lsls	r2, r3
 80034cc:	4b2b      	ldr	r3, [pc, #172]	; (800357c <xTaskResumeAll+0x120>)
 80034ce:	681b      	ldr	r3, [r3, #0]
 80034d0:	4313      	orrs	r3, r2
 80034d2:	4a2a      	ldr	r2, [pc, #168]	; (800357c <xTaskResumeAll+0x120>)
 80034d4:	6013      	str	r3, [r2, #0]
 80034d6:	68fb      	ldr	r3, [r7, #12]
 80034d8:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80034da:	4613      	mov	r3, r2
 80034dc:	009b      	lsls	r3, r3, #2
 80034de:	4413      	add	r3, r2
 80034e0:	009b      	lsls	r3, r3, #2
 80034e2:	4a27      	ldr	r2, [pc, #156]	; (8003580 <xTaskResumeAll+0x124>)
 80034e4:	441a      	add	r2, r3
 80034e6:	68fb      	ldr	r3, [r7, #12]
 80034e8:	3304      	adds	r3, #4
 80034ea:	4619      	mov	r1, r3
 80034ec:	4610      	mov	r0, r2
 80034ee:	f7fe ffd2 	bl	8002496 <vListInsertEnd>

					/* If the moved task has a priority higher than the current
					task then a yield must be performed. */
					if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 80034f2:	68fb      	ldr	r3, [r7, #12]
 80034f4:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80034f6:	4b23      	ldr	r3, [pc, #140]	; (8003584 <xTaskResumeAll+0x128>)
 80034f8:	681b      	ldr	r3, [r3, #0]
 80034fa:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80034fc:	429a      	cmp	r2, r3
 80034fe:	d302      	bcc.n	8003506 <xTaskResumeAll+0xaa>
					{
						xYieldPending = pdTRUE;
 8003500:	4b21      	ldr	r3, [pc, #132]	; (8003588 <xTaskResumeAll+0x12c>)
 8003502:	2201      	movs	r2, #1
 8003504:	601a      	str	r2, [r3, #0]
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 8003506:	4b1c      	ldr	r3, [pc, #112]	; (8003578 <xTaskResumeAll+0x11c>)
 8003508:	681b      	ldr	r3, [r3, #0]
 800350a:	2b00      	cmp	r3, #0
 800350c:	d1cc      	bne.n	80034a8 <xTaskResumeAll+0x4c>
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( pxTCB != NULL )
 800350e:	68fb      	ldr	r3, [r7, #12]
 8003510:	2b00      	cmp	r3, #0
 8003512:	d001      	beq.n	8003518 <xTaskResumeAll+0xbc>
					which may have prevented the next unblock time from being
					re-calculated, in which case re-calculate it now.  Mainly
					important for low power tickless implementations, where
					this can prevent an unnecessary exit from low power
					state. */
					prvResetNextTaskUnblockTime();
 8003514:	f000 fb1c 	bl	8003b50 <prvResetNextTaskUnblockTime>
				/* If any ticks occurred while the scheduler was suspended then
				they should be processed now.  This ensures the tick count does
				not	slip, and that any delayed tasks are resumed at the correct
				time. */
				{
					TickType_t xPendedCounts = xPendedTicks; /* Non-volatile copy. */
 8003518:	4b1c      	ldr	r3, [pc, #112]	; (800358c <xTaskResumeAll+0x130>)
 800351a:	681b      	ldr	r3, [r3, #0]
 800351c:	607b      	str	r3, [r7, #4]

					if( xPendedCounts > ( TickType_t ) 0U )
 800351e:	687b      	ldr	r3, [r7, #4]
 8003520:	2b00      	cmp	r3, #0
 8003522:	d010      	beq.n	8003546 <xTaskResumeAll+0xea>
					{
						do
						{
							if( xTaskIncrementTick() != pdFALSE )
 8003524:	f000 f836 	bl	8003594 <xTaskIncrementTick>
 8003528:	4603      	mov	r3, r0
 800352a:	2b00      	cmp	r3, #0
 800352c:	d002      	beq.n	8003534 <xTaskResumeAll+0xd8>
							{
								xYieldPending = pdTRUE;
 800352e:	4b16      	ldr	r3, [pc, #88]	; (8003588 <xTaskResumeAll+0x12c>)
 8003530:	2201      	movs	r2, #1
 8003532:	601a      	str	r2, [r3, #0]
							}
							else
							{
								mtCOVERAGE_TEST_MARKER();
							}
							--xPendedCounts;
 8003534:	687b      	ldr	r3, [r7, #4]
 8003536:	3b01      	subs	r3, #1
 8003538:	607b      	str	r3, [r7, #4]
						} while( xPendedCounts > ( TickType_t ) 0U );
 800353a:	687b      	ldr	r3, [r7, #4]
 800353c:	2b00      	cmp	r3, #0
 800353e:	d1f1      	bne.n	8003524 <xTaskResumeAll+0xc8>

						xPendedTicks = 0;
 8003540:	4b12      	ldr	r3, [pc, #72]	; (800358c <xTaskResumeAll+0x130>)
 8003542:	2200      	movs	r2, #0
 8003544:	601a      	str	r2, [r3, #0]
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( xYieldPending != pdFALSE )
 8003546:	4b10      	ldr	r3, [pc, #64]	; (8003588 <xTaskResumeAll+0x12c>)
 8003548:	681b      	ldr	r3, [r3, #0]
 800354a:	2b00      	cmp	r3, #0
 800354c:	d009      	beq.n	8003562 <xTaskResumeAll+0x106>
				{
					#if( configUSE_PREEMPTION != 0 )
					{
						xAlreadyYielded = pdTRUE;
 800354e:	2301      	movs	r3, #1
 8003550:	60bb      	str	r3, [r7, #8]
					}
					#endif
					taskYIELD_IF_USING_PREEMPTION();
 8003552:	4b0f      	ldr	r3, [pc, #60]	; (8003590 <xTaskResumeAll+0x134>)
 8003554:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8003558:	601a      	str	r2, [r3, #0]
 800355a:	f3bf 8f4f 	dsb	sy
 800355e:	f3bf 8f6f 	isb	sy
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
	taskEXIT_CRITICAL();
 8003562:	f000 fe97 	bl	8004294 <vPortExitCritical>

	return xAlreadyYielded;
 8003566:	68bb      	ldr	r3, [r7, #8]
}
 8003568:	4618      	mov	r0, r3
 800356a:	3710      	adds	r7, #16
 800356c:	46bd      	mov	sp, r7
 800356e:	bd80      	pop	{r7, pc}
 8003570:	200004d0 	.word	0x200004d0
 8003574:	200004a8 	.word	0x200004a8
 8003578:	20000468 	.word	0x20000468
 800357c:	200004b0 	.word	0x200004b0
 8003580:	200003ac 	.word	0x200003ac
 8003584:	200003a8 	.word	0x200003a8
 8003588:	200004bc 	.word	0x200004bc
 800358c:	200004b8 	.word	0x200004b8
 8003590:	e000ed04 	.word	0xe000ed04

08003594 <xTaskIncrementTick>:

#endif /* INCLUDE_xTaskAbortDelay */
/*----------------------------------------------------------*/

BaseType_t xTaskIncrementTick( void )
{
 8003594:	b580      	push	{r7, lr}
 8003596:	b086      	sub	sp, #24
 8003598:	af00      	add	r7, sp, #0
TCB_t * pxTCB;
TickType_t xItemValue;
BaseType_t xSwitchRequired = pdFALSE;
 800359a:	2300      	movs	r3, #0
 800359c:	617b      	str	r3, [r7, #20]

	/* Called by the portable layer each time a tick interrupt occurs.
	Increments the tick then checks to see if the new tick value will cause any
	tasks to be unblocked. */
	traceTASK_INCREMENT_TICK( xTickCount );
	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 800359e:	4b4e      	ldr	r3, [pc, #312]	; (80036d8 <xTaskIncrementTick+0x144>)
 80035a0:	681b      	ldr	r3, [r3, #0]
 80035a2:	2b00      	cmp	r3, #0
 80035a4:	f040 808e 	bne.w	80036c4 <xTaskIncrementTick+0x130>
	{
		/* Minor optimisation.  The tick count cannot change in this
		block. */
		const TickType_t xConstTickCount = xTickCount + ( TickType_t ) 1;
 80035a8:	4b4c      	ldr	r3, [pc, #304]	; (80036dc <xTaskIncrementTick+0x148>)
 80035aa:	681b      	ldr	r3, [r3, #0]
 80035ac:	3301      	adds	r3, #1
 80035ae:	613b      	str	r3, [r7, #16]

		/* Increment the RTOS tick, switching the delayed and overflowed
		delayed lists if it wraps to 0. */
		xTickCount = xConstTickCount;
 80035b0:	4a4a      	ldr	r2, [pc, #296]	; (80036dc <xTaskIncrementTick+0x148>)
 80035b2:	693b      	ldr	r3, [r7, #16]
 80035b4:	6013      	str	r3, [r2, #0]

		if( xConstTickCount == ( TickType_t ) 0U ) /*lint !e774 'if' does not always evaluate to false as it is looking for an overflow. */
 80035b6:	693b      	ldr	r3, [r7, #16]
 80035b8:	2b00      	cmp	r3, #0
 80035ba:	d120      	bne.n	80035fe <xTaskIncrementTick+0x6a>
		{
			taskSWITCH_DELAYED_LISTS();
 80035bc:	4b48      	ldr	r3, [pc, #288]	; (80036e0 <xTaskIncrementTick+0x14c>)
 80035be:	681b      	ldr	r3, [r3, #0]
 80035c0:	681b      	ldr	r3, [r3, #0]
 80035c2:	2b00      	cmp	r3, #0
 80035c4:	d00a      	beq.n	80035dc <xTaskIncrementTick+0x48>
	__asm volatile
 80035c6:	f04f 0350 	mov.w	r3, #80	; 0x50
 80035ca:	f383 8811 	msr	BASEPRI, r3
 80035ce:	f3bf 8f6f 	isb	sy
 80035d2:	f3bf 8f4f 	dsb	sy
 80035d6:	603b      	str	r3, [r7, #0]
}
 80035d8:	bf00      	nop
 80035da:	e7fe      	b.n	80035da <xTaskIncrementTick+0x46>
 80035dc:	4b40      	ldr	r3, [pc, #256]	; (80036e0 <xTaskIncrementTick+0x14c>)
 80035de:	681b      	ldr	r3, [r3, #0]
 80035e0:	60fb      	str	r3, [r7, #12]
 80035e2:	4b40      	ldr	r3, [pc, #256]	; (80036e4 <xTaskIncrementTick+0x150>)
 80035e4:	681b      	ldr	r3, [r3, #0]
 80035e6:	4a3e      	ldr	r2, [pc, #248]	; (80036e0 <xTaskIncrementTick+0x14c>)
 80035e8:	6013      	str	r3, [r2, #0]
 80035ea:	4a3e      	ldr	r2, [pc, #248]	; (80036e4 <xTaskIncrementTick+0x150>)
 80035ec:	68fb      	ldr	r3, [r7, #12]
 80035ee:	6013      	str	r3, [r2, #0]
 80035f0:	4b3d      	ldr	r3, [pc, #244]	; (80036e8 <xTaskIncrementTick+0x154>)
 80035f2:	681b      	ldr	r3, [r3, #0]
 80035f4:	3301      	adds	r3, #1
 80035f6:	4a3c      	ldr	r2, [pc, #240]	; (80036e8 <xTaskIncrementTick+0x154>)
 80035f8:	6013      	str	r3, [r2, #0]
 80035fa:	f000 faa9 	bl	8003b50 <prvResetNextTaskUnblockTime>

		/* See if this tick has made a timeout expire.  Tasks are stored in
		the	queue in the order of their wake time - meaning once one task
		has been found whose block time has not expired there is no need to
		look any further down the list. */
		if( xConstTickCount >= xNextTaskUnblockTime )
 80035fe:	4b3b      	ldr	r3, [pc, #236]	; (80036ec <xTaskIncrementTick+0x158>)
 8003600:	681b      	ldr	r3, [r3, #0]
 8003602:	693a      	ldr	r2, [r7, #16]
 8003604:	429a      	cmp	r2, r3
 8003606:	d348      	bcc.n	800369a <xTaskIncrementTick+0x106>
		{
			for( ;; )
			{
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 8003608:	4b35      	ldr	r3, [pc, #212]	; (80036e0 <xTaskIncrementTick+0x14c>)
 800360a:	681b      	ldr	r3, [r3, #0]
 800360c:	681b      	ldr	r3, [r3, #0]
 800360e:	2b00      	cmp	r3, #0
 8003610:	d104      	bne.n	800361c <xTaskIncrementTick+0x88>
					/* The delayed list is empty.  Set xNextTaskUnblockTime
					to the maximum possible value so it is extremely
					unlikely that the
					if( xTickCount >= xNextTaskUnblockTime ) test will pass
					next time through. */
					xNextTaskUnblockTime = portMAX_DELAY; /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8003612:	4b36      	ldr	r3, [pc, #216]	; (80036ec <xTaskIncrementTick+0x158>)
 8003614:	f04f 32ff 	mov.w	r2, #4294967295
 8003618:	601a      	str	r2, [r3, #0]
					break;
 800361a:	e03e      	b.n	800369a <xTaskIncrementTick+0x106>
				{
					/* The delayed list is not empty, get the value of the
					item at the head of the delayed list.  This is the time
					at which the task at the head of the delayed list must
					be removed from the Blocked state. */
					pxTCB = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800361c:	4b30      	ldr	r3, [pc, #192]	; (80036e0 <xTaskIncrementTick+0x14c>)
 800361e:	681b      	ldr	r3, [r3, #0]
 8003620:	68db      	ldr	r3, [r3, #12]
 8003622:	68db      	ldr	r3, [r3, #12]
 8003624:	60bb      	str	r3, [r7, #8]
					xItemValue = listGET_LIST_ITEM_VALUE( &( pxTCB->xStateListItem ) );
 8003626:	68bb      	ldr	r3, [r7, #8]
 8003628:	685b      	ldr	r3, [r3, #4]
 800362a:	607b      	str	r3, [r7, #4]

					if( xConstTickCount < xItemValue )
 800362c:	693a      	ldr	r2, [r7, #16]
 800362e:	687b      	ldr	r3, [r7, #4]
 8003630:	429a      	cmp	r2, r3
 8003632:	d203      	bcs.n	800363c <xTaskIncrementTick+0xa8>
						/* It is not time to unblock this item yet, but the
						item value is the time at which the task at the head
						of the blocked list must be removed from the Blocked
						state -	so record the item value in
						xNextTaskUnblockTime. */
						xNextTaskUnblockTime = xItemValue;
 8003634:	4a2d      	ldr	r2, [pc, #180]	; (80036ec <xTaskIncrementTick+0x158>)
 8003636:	687b      	ldr	r3, [r7, #4]
 8003638:	6013      	str	r3, [r2, #0]
						break; /*lint !e9011 Code structure here is deedmed easier to understand with multiple breaks. */
 800363a:	e02e      	b.n	800369a <xTaskIncrementTick+0x106>
					{
						mtCOVERAGE_TEST_MARKER();
					}

					/* It is time to remove the item from the Blocked state. */
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 800363c:	68bb      	ldr	r3, [r7, #8]
 800363e:	3304      	adds	r3, #4
 8003640:	4618      	mov	r0, r3
 8003642:	f7fe ff85 	bl	8002550 <uxListRemove>

					/* Is the task waiting on an event also?  If so remove
					it from the event list. */
					if( listLIST_ITEM_CONTAINER( &( pxTCB->xEventListItem ) ) != NULL )
 8003646:	68bb      	ldr	r3, [r7, #8]
 8003648:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800364a:	2b00      	cmp	r3, #0
 800364c:	d004      	beq.n	8003658 <xTaskIncrementTick+0xc4>
					{
						( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 800364e:	68bb      	ldr	r3, [r7, #8]
 8003650:	3318      	adds	r3, #24
 8003652:	4618      	mov	r0, r3
 8003654:	f7fe ff7c 	bl	8002550 <uxListRemove>
						mtCOVERAGE_TEST_MARKER();
					}

					/* Place the unblocked task into the appropriate ready
					list. */
					prvAddTaskToReadyList( pxTCB );
 8003658:	68bb      	ldr	r3, [r7, #8]
 800365a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800365c:	2201      	movs	r2, #1
 800365e:	409a      	lsls	r2, r3
 8003660:	4b23      	ldr	r3, [pc, #140]	; (80036f0 <xTaskIncrementTick+0x15c>)
 8003662:	681b      	ldr	r3, [r3, #0]
 8003664:	4313      	orrs	r3, r2
 8003666:	4a22      	ldr	r2, [pc, #136]	; (80036f0 <xTaskIncrementTick+0x15c>)
 8003668:	6013      	str	r3, [r2, #0]
 800366a:	68bb      	ldr	r3, [r7, #8]
 800366c:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800366e:	4613      	mov	r3, r2
 8003670:	009b      	lsls	r3, r3, #2
 8003672:	4413      	add	r3, r2
 8003674:	009b      	lsls	r3, r3, #2
 8003676:	4a1f      	ldr	r2, [pc, #124]	; (80036f4 <xTaskIncrementTick+0x160>)
 8003678:	441a      	add	r2, r3
 800367a:	68bb      	ldr	r3, [r7, #8]
 800367c:	3304      	adds	r3, #4
 800367e:	4619      	mov	r1, r3
 8003680:	4610      	mov	r0, r2
 8003682:	f7fe ff08 	bl	8002496 <vListInsertEnd>
					{
						/* Preemption is on, but a context switch should
						only be performed if the unblocked task has a
						priority that is equal to or higher than the
						currently executing task. */
						if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 8003686:	68bb      	ldr	r3, [r7, #8]
 8003688:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800368a:	4b1b      	ldr	r3, [pc, #108]	; (80036f8 <xTaskIncrementTick+0x164>)
 800368c:	681b      	ldr	r3, [r3, #0]
 800368e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003690:	429a      	cmp	r2, r3
 8003692:	d3b9      	bcc.n	8003608 <xTaskIncrementTick+0x74>
						{
							xSwitchRequired = pdTRUE;
 8003694:	2301      	movs	r3, #1
 8003696:	617b      	str	r3, [r7, #20]
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 8003698:	e7b6      	b.n	8003608 <xTaskIncrementTick+0x74>
		/* Tasks of equal priority to the currently running task will share
		processing time (time slice) if preemption is on, and the application
		writer has not explicitly turned time slicing off. */
		#if ( ( configUSE_PREEMPTION == 1 ) && ( configUSE_TIME_SLICING == 1 ) )
		{
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ pxCurrentTCB->uxPriority ] ) ) > ( UBaseType_t ) 1 )
 800369a:	4b17      	ldr	r3, [pc, #92]	; (80036f8 <xTaskIncrementTick+0x164>)
 800369c:	681b      	ldr	r3, [r3, #0]
 800369e:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80036a0:	4914      	ldr	r1, [pc, #80]	; (80036f4 <xTaskIncrementTick+0x160>)
 80036a2:	4613      	mov	r3, r2
 80036a4:	009b      	lsls	r3, r3, #2
 80036a6:	4413      	add	r3, r2
 80036a8:	009b      	lsls	r3, r3, #2
 80036aa:	440b      	add	r3, r1
 80036ac:	681b      	ldr	r3, [r3, #0]
 80036ae:	2b01      	cmp	r3, #1
 80036b0:	d901      	bls.n	80036b6 <xTaskIncrementTick+0x122>
			{
				xSwitchRequired = pdTRUE;
 80036b2:	2301      	movs	r3, #1
 80036b4:	617b      	str	r3, [r7, #20]
		}
		#endif /* configUSE_TICK_HOOK */

		#if ( configUSE_PREEMPTION == 1 )
		{
			if( xYieldPending != pdFALSE )
 80036b6:	4b11      	ldr	r3, [pc, #68]	; (80036fc <xTaskIncrementTick+0x168>)
 80036b8:	681b      	ldr	r3, [r3, #0]
 80036ba:	2b00      	cmp	r3, #0
 80036bc:	d007      	beq.n	80036ce <xTaskIncrementTick+0x13a>
			{
				xSwitchRequired = pdTRUE;
 80036be:	2301      	movs	r3, #1
 80036c0:	617b      	str	r3, [r7, #20]
 80036c2:	e004      	b.n	80036ce <xTaskIncrementTick+0x13a>
		}
		#endif /* configUSE_PREEMPTION */
	}
	else
	{
		++xPendedTicks;
 80036c4:	4b0e      	ldr	r3, [pc, #56]	; (8003700 <xTaskIncrementTick+0x16c>)
 80036c6:	681b      	ldr	r3, [r3, #0]
 80036c8:	3301      	adds	r3, #1
 80036ca:	4a0d      	ldr	r2, [pc, #52]	; (8003700 <xTaskIncrementTick+0x16c>)
 80036cc:	6013      	str	r3, [r2, #0]
			vApplicationTickHook();
		}
		#endif
	}

	return xSwitchRequired;
 80036ce:	697b      	ldr	r3, [r7, #20]
}
 80036d0:	4618      	mov	r0, r3
 80036d2:	3718      	adds	r7, #24
 80036d4:	46bd      	mov	sp, r7
 80036d6:	bd80      	pop	{r7, pc}
 80036d8:	200004d0 	.word	0x200004d0
 80036dc:	200004ac 	.word	0x200004ac
 80036e0:	20000460 	.word	0x20000460
 80036e4:	20000464 	.word	0x20000464
 80036e8:	200004c0 	.word	0x200004c0
 80036ec:	200004c8 	.word	0x200004c8
 80036f0:	200004b0 	.word	0x200004b0
 80036f4:	200003ac 	.word	0x200003ac
 80036f8:	200003a8 	.word	0x200003a8
 80036fc:	200004bc 	.word	0x200004bc
 8003700:	200004b8 	.word	0x200004b8

08003704 <vTaskSwitchContext>:

#endif /* configUSE_APPLICATION_TASK_TAG */
/*-----------------------------------------------------------*/

void vTaskSwitchContext( void )
{
 8003704:	b480      	push	{r7}
 8003706:	b087      	sub	sp, #28
 8003708:	af00      	add	r7, sp, #0
	if( uxSchedulerSuspended != ( UBaseType_t ) pdFALSE )
 800370a:	4b29      	ldr	r3, [pc, #164]	; (80037b0 <vTaskSwitchContext+0xac>)
 800370c:	681b      	ldr	r3, [r3, #0]
 800370e:	2b00      	cmp	r3, #0
 8003710:	d003      	beq.n	800371a <vTaskSwitchContext+0x16>
	{
		/* The scheduler is currently suspended - do not allow a context
		switch. */
		xYieldPending = pdTRUE;
 8003712:	4b28      	ldr	r3, [pc, #160]	; (80037b4 <vTaskSwitchContext+0xb0>)
 8003714:	2201      	movs	r2, #1
 8003716:	601a      	str	r2, [r3, #0]
			for additional information. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
		}
		#endif /* configUSE_NEWLIB_REENTRANT */
	}
}
 8003718:	e044      	b.n	80037a4 <vTaskSwitchContext+0xa0>
		xYieldPending = pdFALSE;
 800371a:	4b26      	ldr	r3, [pc, #152]	; (80037b4 <vTaskSwitchContext+0xb0>)
 800371c:	2200      	movs	r2, #0
 800371e:	601a      	str	r2, [r3, #0]
		taskSELECT_HIGHEST_PRIORITY_TASK(); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8003720:	4b25      	ldr	r3, [pc, #148]	; (80037b8 <vTaskSwitchContext+0xb4>)
 8003722:	681b      	ldr	r3, [r3, #0]
 8003724:	60fb      	str	r3, [r7, #12]
		__asm volatile ( "clz %0, %1" : "=r" ( ucReturn ) : "r" ( ulBitmap ) : "memory" );
 8003726:	68fb      	ldr	r3, [r7, #12]
 8003728:	fab3 f383 	clz	r3, r3
 800372c:	72fb      	strb	r3, [r7, #11]
		return ucReturn;
 800372e:	7afb      	ldrb	r3, [r7, #11]
 8003730:	f1c3 031f 	rsb	r3, r3, #31
 8003734:	617b      	str	r3, [r7, #20]
 8003736:	4921      	ldr	r1, [pc, #132]	; (80037bc <vTaskSwitchContext+0xb8>)
 8003738:	697a      	ldr	r2, [r7, #20]
 800373a:	4613      	mov	r3, r2
 800373c:	009b      	lsls	r3, r3, #2
 800373e:	4413      	add	r3, r2
 8003740:	009b      	lsls	r3, r3, #2
 8003742:	440b      	add	r3, r1
 8003744:	681b      	ldr	r3, [r3, #0]
 8003746:	2b00      	cmp	r3, #0
 8003748:	d10a      	bne.n	8003760 <vTaskSwitchContext+0x5c>
	__asm volatile
 800374a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800374e:	f383 8811 	msr	BASEPRI, r3
 8003752:	f3bf 8f6f 	isb	sy
 8003756:	f3bf 8f4f 	dsb	sy
 800375a:	607b      	str	r3, [r7, #4]
}
 800375c:	bf00      	nop
 800375e:	e7fe      	b.n	800375e <vTaskSwitchContext+0x5a>
 8003760:	697a      	ldr	r2, [r7, #20]
 8003762:	4613      	mov	r3, r2
 8003764:	009b      	lsls	r3, r3, #2
 8003766:	4413      	add	r3, r2
 8003768:	009b      	lsls	r3, r3, #2
 800376a:	4a14      	ldr	r2, [pc, #80]	; (80037bc <vTaskSwitchContext+0xb8>)
 800376c:	4413      	add	r3, r2
 800376e:	613b      	str	r3, [r7, #16]
 8003770:	693b      	ldr	r3, [r7, #16]
 8003772:	685b      	ldr	r3, [r3, #4]
 8003774:	685a      	ldr	r2, [r3, #4]
 8003776:	693b      	ldr	r3, [r7, #16]
 8003778:	605a      	str	r2, [r3, #4]
 800377a:	693b      	ldr	r3, [r7, #16]
 800377c:	685a      	ldr	r2, [r3, #4]
 800377e:	693b      	ldr	r3, [r7, #16]
 8003780:	3308      	adds	r3, #8
 8003782:	429a      	cmp	r2, r3
 8003784:	d104      	bne.n	8003790 <vTaskSwitchContext+0x8c>
 8003786:	693b      	ldr	r3, [r7, #16]
 8003788:	685b      	ldr	r3, [r3, #4]
 800378a:	685a      	ldr	r2, [r3, #4]
 800378c:	693b      	ldr	r3, [r7, #16]
 800378e:	605a      	str	r2, [r3, #4]
 8003790:	693b      	ldr	r3, [r7, #16]
 8003792:	685b      	ldr	r3, [r3, #4]
 8003794:	68db      	ldr	r3, [r3, #12]
 8003796:	4a0a      	ldr	r2, [pc, #40]	; (80037c0 <vTaskSwitchContext+0xbc>)
 8003798:	6013      	str	r3, [r2, #0]
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
 800379a:	4b09      	ldr	r3, [pc, #36]	; (80037c0 <vTaskSwitchContext+0xbc>)
 800379c:	681b      	ldr	r3, [r3, #0]
 800379e:	334c      	adds	r3, #76	; 0x4c
 80037a0:	4a08      	ldr	r2, [pc, #32]	; (80037c4 <vTaskSwitchContext+0xc0>)
 80037a2:	6013      	str	r3, [r2, #0]
}
 80037a4:	bf00      	nop
 80037a6:	371c      	adds	r7, #28
 80037a8:	46bd      	mov	sp, r7
 80037aa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80037ae:	4770      	bx	lr
 80037b0:	200004d0 	.word	0x200004d0
 80037b4:	200004bc 	.word	0x200004bc
 80037b8:	200004b0 	.word	0x200004b0
 80037bc:	200003ac 	.word	0x200003ac
 80037c0:	200003a8 	.word	0x200003a8
 80037c4:	20000010 	.word	0x20000010

080037c8 <vTaskPlaceOnEventList>:
/*-----------------------------------------------------------*/

void vTaskPlaceOnEventList( List_t * const pxEventList, const TickType_t xTicksToWait )
{
 80037c8:	b580      	push	{r7, lr}
 80037ca:	b084      	sub	sp, #16
 80037cc:	af00      	add	r7, sp, #0
 80037ce:	6078      	str	r0, [r7, #4]
 80037d0:	6039      	str	r1, [r7, #0]
	configASSERT( pxEventList );
 80037d2:	687b      	ldr	r3, [r7, #4]
 80037d4:	2b00      	cmp	r3, #0
 80037d6:	d10a      	bne.n	80037ee <vTaskPlaceOnEventList+0x26>
	__asm volatile
 80037d8:	f04f 0350 	mov.w	r3, #80	; 0x50
 80037dc:	f383 8811 	msr	BASEPRI, r3
 80037e0:	f3bf 8f6f 	isb	sy
 80037e4:	f3bf 8f4f 	dsb	sy
 80037e8:	60fb      	str	r3, [r7, #12]
}
 80037ea:	bf00      	nop
 80037ec:	e7fe      	b.n	80037ec <vTaskPlaceOnEventList+0x24>

	/* Place the event list item of the TCB in the appropriate event list.
	This is placed in the list in priority order so the highest priority task
	is the first to be woken by the event.  The queue that contains the event
	list is locked, preventing simultaneous access from interrupts. */
	vListInsert( pxEventList, &( pxCurrentTCB->xEventListItem ) );
 80037ee:	4b07      	ldr	r3, [pc, #28]	; (800380c <vTaskPlaceOnEventList+0x44>)
 80037f0:	681b      	ldr	r3, [r3, #0]
 80037f2:	3318      	adds	r3, #24
 80037f4:	4619      	mov	r1, r3
 80037f6:	6878      	ldr	r0, [r7, #4]
 80037f8:	f7fe fe71 	bl	80024de <vListInsert>

	prvAddCurrentTaskToDelayedList( xTicksToWait, pdTRUE );
 80037fc:	2101      	movs	r1, #1
 80037fe:	6838      	ldr	r0, [r7, #0]
 8003800:	f000 fb82 	bl	8003f08 <prvAddCurrentTaskToDelayedList>
}
 8003804:	bf00      	nop
 8003806:	3710      	adds	r7, #16
 8003808:	46bd      	mov	sp, r7
 800380a:	bd80      	pop	{r7, pc}
 800380c:	200003a8 	.word	0x200003a8

08003810 <xTaskRemoveFromEventList>:

#endif /* configUSE_TIMERS */
/*-----------------------------------------------------------*/

BaseType_t xTaskRemoveFromEventList( const List_t * const pxEventList )
{
 8003810:	b580      	push	{r7, lr}
 8003812:	b086      	sub	sp, #24
 8003814:	af00      	add	r7, sp, #0
 8003816:	6078      	str	r0, [r7, #4]
	get called - the lock count on the queue will get modified instead.  This
	means exclusive access to the event list is guaranteed here.

	This function assumes that a check has already been made to ensure that
	pxEventList is not empty. */
	pxUnblockedTCB = listGET_OWNER_OF_HEAD_ENTRY( pxEventList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8003818:	687b      	ldr	r3, [r7, #4]
 800381a:	68db      	ldr	r3, [r3, #12]
 800381c:	68db      	ldr	r3, [r3, #12]
 800381e:	613b      	str	r3, [r7, #16]
	configASSERT( pxUnblockedTCB );
 8003820:	693b      	ldr	r3, [r7, #16]
 8003822:	2b00      	cmp	r3, #0
 8003824:	d10a      	bne.n	800383c <xTaskRemoveFromEventList+0x2c>
	__asm volatile
 8003826:	f04f 0350 	mov.w	r3, #80	; 0x50
 800382a:	f383 8811 	msr	BASEPRI, r3
 800382e:	f3bf 8f6f 	isb	sy
 8003832:	f3bf 8f4f 	dsb	sy
 8003836:	60fb      	str	r3, [r7, #12]
}
 8003838:	bf00      	nop
 800383a:	e7fe      	b.n	800383a <xTaskRemoveFromEventList+0x2a>
	( void ) uxListRemove( &( pxUnblockedTCB->xEventListItem ) );
 800383c:	693b      	ldr	r3, [r7, #16]
 800383e:	3318      	adds	r3, #24
 8003840:	4618      	mov	r0, r3
 8003842:	f7fe fe85 	bl	8002550 <uxListRemove>

	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8003846:	4b1d      	ldr	r3, [pc, #116]	; (80038bc <xTaskRemoveFromEventList+0xac>)
 8003848:	681b      	ldr	r3, [r3, #0]
 800384a:	2b00      	cmp	r3, #0
 800384c:	d11c      	bne.n	8003888 <xTaskRemoveFromEventList+0x78>
	{
		( void ) uxListRemove( &( pxUnblockedTCB->xStateListItem ) );
 800384e:	693b      	ldr	r3, [r7, #16]
 8003850:	3304      	adds	r3, #4
 8003852:	4618      	mov	r0, r3
 8003854:	f7fe fe7c 	bl	8002550 <uxListRemove>
		prvAddTaskToReadyList( pxUnblockedTCB );
 8003858:	693b      	ldr	r3, [r7, #16]
 800385a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800385c:	2201      	movs	r2, #1
 800385e:	409a      	lsls	r2, r3
 8003860:	4b17      	ldr	r3, [pc, #92]	; (80038c0 <xTaskRemoveFromEventList+0xb0>)
 8003862:	681b      	ldr	r3, [r3, #0]
 8003864:	4313      	orrs	r3, r2
 8003866:	4a16      	ldr	r2, [pc, #88]	; (80038c0 <xTaskRemoveFromEventList+0xb0>)
 8003868:	6013      	str	r3, [r2, #0]
 800386a:	693b      	ldr	r3, [r7, #16]
 800386c:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800386e:	4613      	mov	r3, r2
 8003870:	009b      	lsls	r3, r3, #2
 8003872:	4413      	add	r3, r2
 8003874:	009b      	lsls	r3, r3, #2
 8003876:	4a13      	ldr	r2, [pc, #76]	; (80038c4 <xTaskRemoveFromEventList+0xb4>)
 8003878:	441a      	add	r2, r3
 800387a:	693b      	ldr	r3, [r7, #16]
 800387c:	3304      	adds	r3, #4
 800387e:	4619      	mov	r1, r3
 8003880:	4610      	mov	r0, r2
 8003882:	f7fe fe08 	bl	8002496 <vListInsertEnd>
 8003886:	e005      	b.n	8003894 <xTaskRemoveFromEventList+0x84>
	}
	else
	{
		/* The delayed and ready lists cannot be accessed, so hold this task
		pending until the scheduler is resumed. */
		vListInsertEnd( &( xPendingReadyList ), &( pxUnblockedTCB->xEventListItem ) );
 8003888:	693b      	ldr	r3, [r7, #16]
 800388a:	3318      	adds	r3, #24
 800388c:	4619      	mov	r1, r3
 800388e:	480e      	ldr	r0, [pc, #56]	; (80038c8 <xTaskRemoveFromEventList+0xb8>)
 8003890:	f7fe fe01 	bl	8002496 <vListInsertEnd>
	}

	if( pxUnblockedTCB->uxPriority > pxCurrentTCB->uxPriority )
 8003894:	693b      	ldr	r3, [r7, #16]
 8003896:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8003898:	4b0c      	ldr	r3, [pc, #48]	; (80038cc <xTaskRemoveFromEventList+0xbc>)
 800389a:	681b      	ldr	r3, [r3, #0]
 800389c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800389e:	429a      	cmp	r2, r3
 80038a0:	d905      	bls.n	80038ae <xTaskRemoveFromEventList+0x9e>
	{
		/* Return true if the task removed from the event list has a higher
		priority than the calling task.  This allows the calling task to know if
		it should force a context switch now. */
		xReturn = pdTRUE;
 80038a2:	2301      	movs	r3, #1
 80038a4:	617b      	str	r3, [r7, #20]

		/* Mark that a yield is pending in case the user is not using the
		"xHigherPriorityTaskWoken" parameter to an ISR safe FreeRTOS function. */
		xYieldPending = pdTRUE;
 80038a6:	4b0a      	ldr	r3, [pc, #40]	; (80038d0 <xTaskRemoveFromEventList+0xc0>)
 80038a8:	2201      	movs	r2, #1
 80038aa:	601a      	str	r2, [r3, #0]
 80038ac:	e001      	b.n	80038b2 <xTaskRemoveFromEventList+0xa2>
	}
	else
	{
		xReturn = pdFALSE;
 80038ae:	2300      	movs	r3, #0
 80038b0:	617b      	str	r3, [r7, #20]
	}

	return xReturn;
 80038b2:	697b      	ldr	r3, [r7, #20]
}
 80038b4:	4618      	mov	r0, r3
 80038b6:	3718      	adds	r7, #24
 80038b8:	46bd      	mov	sp, r7
 80038ba:	bd80      	pop	{r7, pc}
 80038bc:	200004d0 	.word	0x200004d0
 80038c0:	200004b0 	.word	0x200004b0
 80038c4:	200003ac 	.word	0x200003ac
 80038c8:	20000468 	.word	0x20000468
 80038cc:	200003a8 	.word	0x200003a8
 80038d0:	200004bc 	.word	0x200004bc

080038d4 <vTaskInternalSetTimeOutState>:
	taskEXIT_CRITICAL();
}
/*-----------------------------------------------------------*/

void vTaskInternalSetTimeOutState( TimeOut_t * const pxTimeOut )
{
 80038d4:	b480      	push	{r7}
 80038d6:	b083      	sub	sp, #12
 80038d8:	af00      	add	r7, sp, #0
 80038da:	6078      	str	r0, [r7, #4]
	/* For internal use only as it does not use a critical section. */
	pxTimeOut->xOverflowCount = xNumOfOverflows;
 80038dc:	4b06      	ldr	r3, [pc, #24]	; (80038f8 <vTaskInternalSetTimeOutState+0x24>)
 80038de:	681a      	ldr	r2, [r3, #0]
 80038e0:	687b      	ldr	r3, [r7, #4]
 80038e2:	601a      	str	r2, [r3, #0]
	pxTimeOut->xTimeOnEntering = xTickCount;
 80038e4:	4b05      	ldr	r3, [pc, #20]	; (80038fc <vTaskInternalSetTimeOutState+0x28>)
 80038e6:	681a      	ldr	r2, [r3, #0]
 80038e8:	687b      	ldr	r3, [r7, #4]
 80038ea:	605a      	str	r2, [r3, #4]
}
 80038ec:	bf00      	nop
 80038ee:	370c      	adds	r7, #12
 80038f0:	46bd      	mov	sp, r7
 80038f2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80038f6:	4770      	bx	lr
 80038f8:	200004c0 	.word	0x200004c0
 80038fc:	200004ac 	.word	0x200004ac

08003900 <xTaskCheckForTimeOut>:
/*-----------------------------------------------------------*/

BaseType_t xTaskCheckForTimeOut( TimeOut_t * const pxTimeOut, TickType_t * const pxTicksToWait )
{
 8003900:	b580      	push	{r7, lr}
 8003902:	b088      	sub	sp, #32
 8003904:	af00      	add	r7, sp, #0
 8003906:	6078      	str	r0, [r7, #4]
 8003908:	6039      	str	r1, [r7, #0]
BaseType_t xReturn;

	configASSERT( pxTimeOut );
 800390a:	687b      	ldr	r3, [r7, #4]
 800390c:	2b00      	cmp	r3, #0
 800390e:	d10a      	bne.n	8003926 <xTaskCheckForTimeOut+0x26>
	__asm volatile
 8003910:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003914:	f383 8811 	msr	BASEPRI, r3
 8003918:	f3bf 8f6f 	isb	sy
 800391c:	f3bf 8f4f 	dsb	sy
 8003920:	613b      	str	r3, [r7, #16]
}
 8003922:	bf00      	nop
 8003924:	e7fe      	b.n	8003924 <xTaskCheckForTimeOut+0x24>
	configASSERT( pxTicksToWait );
 8003926:	683b      	ldr	r3, [r7, #0]
 8003928:	2b00      	cmp	r3, #0
 800392a:	d10a      	bne.n	8003942 <xTaskCheckForTimeOut+0x42>
	__asm volatile
 800392c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003930:	f383 8811 	msr	BASEPRI, r3
 8003934:	f3bf 8f6f 	isb	sy
 8003938:	f3bf 8f4f 	dsb	sy
 800393c:	60fb      	str	r3, [r7, #12]
}
 800393e:	bf00      	nop
 8003940:	e7fe      	b.n	8003940 <xTaskCheckForTimeOut+0x40>

	taskENTER_CRITICAL();
 8003942:	f000 fc77 	bl	8004234 <vPortEnterCritical>
	{
		/* Minor optimisation.  The tick count cannot change in this block. */
		const TickType_t xConstTickCount = xTickCount;
 8003946:	4b1d      	ldr	r3, [pc, #116]	; (80039bc <xTaskCheckForTimeOut+0xbc>)
 8003948:	681b      	ldr	r3, [r3, #0]
 800394a:	61bb      	str	r3, [r7, #24]
		const TickType_t xElapsedTime = xConstTickCount - pxTimeOut->xTimeOnEntering;
 800394c:	687b      	ldr	r3, [r7, #4]
 800394e:	685b      	ldr	r3, [r3, #4]
 8003950:	69ba      	ldr	r2, [r7, #24]
 8003952:	1ad3      	subs	r3, r2, r3
 8003954:	617b      	str	r3, [r7, #20]
			}
			else
		#endif

		#if ( INCLUDE_vTaskSuspend == 1 )
			if( *pxTicksToWait == portMAX_DELAY )
 8003956:	683b      	ldr	r3, [r7, #0]
 8003958:	681b      	ldr	r3, [r3, #0]
 800395a:	f1b3 3fff 	cmp.w	r3, #4294967295
 800395e:	d102      	bne.n	8003966 <xTaskCheckForTimeOut+0x66>
			{
				/* If INCLUDE_vTaskSuspend is set to 1 and the block time
				specified is the maximum block time then the task should block
				indefinitely, and therefore never time out. */
				xReturn = pdFALSE;
 8003960:	2300      	movs	r3, #0
 8003962:	61fb      	str	r3, [r7, #28]
 8003964:	e023      	b.n	80039ae <xTaskCheckForTimeOut+0xae>
			}
			else
		#endif

		if( ( xNumOfOverflows != pxTimeOut->xOverflowCount ) && ( xConstTickCount >= pxTimeOut->xTimeOnEntering ) ) /*lint !e525 Indentation preferred as is to make code within pre-processor directives clearer. */
 8003966:	687b      	ldr	r3, [r7, #4]
 8003968:	681a      	ldr	r2, [r3, #0]
 800396a:	4b15      	ldr	r3, [pc, #84]	; (80039c0 <xTaskCheckForTimeOut+0xc0>)
 800396c:	681b      	ldr	r3, [r3, #0]
 800396e:	429a      	cmp	r2, r3
 8003970:	d007      	beq.n	8003982 <xTaskCheckForTimeOut+0x82>
 8003972:	687b      	ldr	r3, [r7, #4]
 8003974:	685b      	ldr	r3, [r3, #4]
 8003976:	69ba      	ldr	r2, [r7, #24]
 8003978:	429a      	cmp	r2, r3
 800397a:	d302      	bcc.n	8003982 <xTaskCheckForTimeOut+0x82>
			/* The tick count is greater than the time at which
			vTaskSetTimeout() was called, but has also overflowed since
			vTaskSetTimeOut() was called.  It must have wrapped all the way
			around and gone past again. This passed since vTaskSetTimeout()
			was called. */
			xReturn = pdTRUE;
 800397c:	2301      	movs	r3, #1
 800397e:	61fb      	str	r3, [r7, #28]
 8003980:	e015      	b.n	80039ae <xTaskCheckForTimeOut+0xae>
		}
		else if( xElapsedTime < *pxTicksToWait ) /*lint !e961 Explicit casting is only redundant with some compilers, whereas others require it to prevent integer conversion errors. */
 8003982:	683b      	ldr	r3, [r7, #0]
 8003984:	681b      	ldr	r3, [r3, #0]
 8003986:	697a      	ldr	r2, [r7, #20]
 8003988:	429a      	cmp	r2, r3
 800398a:	d20b      	bcs.n	80039a4 <xTaskCheckForTimeOut+0xa4>
		{
			/* Not a genuine timeout. Adjust parameters for time remaining. */
			*pxTicksToWait -= xElapsedTime;
 800398c:	683b      	ldr	r3, [r7, #0]
 800398e:	681a      	ldr	r2, [r3, #0]
 8003990:	697b      	ldr	r3, [r7, #20]
 8003992:	1ad2      	subs	r2, r2, r3
 8003994:	683b      	ldr	r3, [r7, #0]
 8003996:	601a      	str	r2, [r3, #0]
			vTaskInternalSetTimeOutState( pxTimeOut );
 8003998:	6878      	ldr	r0, [r7, #4]
 800399a:	f7ff ff9b 	bl	80038d4 <vTaskInternalSetTimeOutState>
			xReturn = pdFALSE;
 800399e:	2300      	movs	r3, #0
 80039a0:	61fb      	str	r3, [r7, #28]
 80039a2:	e004      	b.n	80039ae <xTaskCheckForTimeOut+0xae>
		}
		else
		{
			*pxTicksToWait = 0;
 80039a4:	683b      	ldr	r3, [r7, #0]
 80039a6:	2200      	movs	r2, #0
 80039a8:	601a      	str	r2, [r3, #0]
			xReturn = pdTRUE;
 80039aa:	2301      	movs	r3, #1
 80039ac:	61fb      	str	r3, [r7, #28]
		}
	}
	taskEXIT_CRITICAL();
 80039ae:	f000 fc71 	bl	8004294 <vPortExitCritical>

	return xReturn;
 80039b2:	69fb      	ldr	r3, [r7, #28]
}
 80039b4:	4618      	mov	r0, r3
 80039b6:	3720      	adds	r7, #32
 80039b8:	46bd      	mov	sp, r7
 80039ba:	bd80      	pop	{r7, pc}
 80039bc:	200004ac 	.word	0x200004ac
 80039c0:	200004c0 	.word	0x200004c0

080039c4 <vTaskMissedYield>:
/*-----------------------------------------------------------*/

void vTaskMissedYield( void )
{
 80039c4:	b480      	push	{r7}
 80039c6:	af00      	add	r7, sp, #0
	xYieldPending = pdTRUE;
 80039c8:	4b03      	ldr	r3, [pc, #12]	; (80039d8 <vTaskMissedYield+0x14>)
 80039ca:	2201      	movs	r2, #1
 80039cc:	601a      	str	r2, [r3, #0]
}
 80039ce:	bf00      	nop
 80039d0:	46bd      	mov	sp, r7
 80039d2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80039d6:	4770      	bx	lr
 80039d8:	200004bc 	.word	0x200004bc

080039dc <prvIdleTask>:
 *
 * void prvIdleTask( void *pvParameters );
 *
 */
static portTASK_FUNCTION( prvIdleTask, pvParameters )
{
 80039dc:	b580      	push	{r7, lr}
 80039de:	b082      	sub	sp, #8
 80039e0:	af00      	add	r7, sp, #0
 80039e2:	6078      	str	r0, [r7, #4]

	for( ;; )
	{
		/* See if any tasks have deleted themselves - if so then the idle task
		is responsible for freeing the deleted task's TCB and stack. */
		prvCheckTasksWaitingTermination();
 80039e4:	f000 f852 	bl	8003a8c <prvCheckTasksWaitingTermination>

			A critical region is not required here as we are just reading from
			the list, and an occasional incorrect value will not matter.  If
			the ready list at the idle priority contains more than one task
			then a task other than the idle task is ready to execute. */
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ tskIDLE_PRIORITY ] ) ) > ( UBaseType_t ) 1 )
 80039e8:	4b06      	ldr	r3, [pc, #24]	; (8003a04 <prvIdleTask+0x28>)
 80039ea:	681b      	ldr	r3, [r3, #0]
 80039ec:	2b01      	cmp	r3, #1
 80039ee:	d9f9      	bls.n	80039e4 <prvIdleTask+0x8>
			{
				taskYIELD();
 80039f0:	4b05      	ldr	r3, [pc, #20]	; (8003a08 <prvIdleTask+0x2c>)
 80039f2:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 80039f6:	601a      	str	r2, [r3, #0]
 80039f8:	f3bf 8f4f 	dsb	sy
 80039fc:	f3bf 8f6f 	isb	sy
		prvCheckTasksWaitingTermination();
 8003a00:	e7f0      	b.n	80039e4 <prvIdleTask+0x8>
 8003a02:	bf00      	nop
 8003a04:	200003ac 	.word	0x200003ac
 8003a08:	e000ed04 	.word	0xe000ed04

08003a0c <prvInitialiseTaskLists>:

#endif /* portUSING_MPU_WRAPPERS */
/*-----------------------------------------------------------*/

static void prvInitialiseTaskLists( void )
{
 8003a0c:	b580      	push	{r7, lr}
 8003a0e:	b082      	sub	sp, #8
 8003a10:	af00      	add	r7, sp, #0
UBaseType_t uxPriority;

	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 8003a12:	2300      	movs	r3, #0
 8003a14:	607b      	str	r3, [r7, #4]
 8003a16:	e00c      	b.n	8003a32 <prvInitialiseTaskLists+0x26>
	{
		vListInitialise( &( pxReadyTasksLists[ uxPriority ] ) );
 8003a18:	687a      	ldr	r2, [r7, #4]
 8003a1a:	4613      	mov	r3, r2
 8003a1c:	009b      	lsls	r3, r3, #2
 8003a1e:	4413      	add	r3, r2
 8003a20:	009b      	lsls	r3, r3, #2
 8003a22:	4a12      	ldr	r2, [pc, #72]	; (8003a6c <prvInitialiseTaskLists+0x60>)
 8003a24:	4413      	add	r3, r2
 8003a26:	4618      	mov	r0, r3
 8003a28:	f7fe fd08 	bl	800243c <vListInitialise>
	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 8003a2c:	687b      	ldr	r3, [r7, #4]
 8003a2e:	3301      	adds	r3, #1
 8003a30:	607b      	str	r3, [r7, #4]
 8003a32:	687b      	ldr	r3, [r7, #4]
 8003a34:	2b06      	cmp	r3, #6
 8003a36:	d9ef      	bls.n	8003a18 <prvInitialiseTaskLists+0xc>
	}

	vListInitialise( &xDelayedTaskList1 );
 8003a38:	480d      	ldr	r0, [pc, #52]	; (8003a70 <prvInitialiseTaskLists+0x64>)
 8003a3a:	f7fe fcff 	bl	800243c <vListInitialise>
	vListInitialise( &xDelayedTaskList2 );
 8003a3e:	480d      	ldr	r0, [pc, #52]	; (8003a74 <prvInitialiseTaskLists+0x68>)
 8003a40:	f7fe fcfc 	bl	800243c <vListInitialise>
	vListInitialise( &xPendingReadyList );
 8003a44:	480c      	ldr	r0, [pc, #48]	; (8003a78 <prvInitialiseTaskLists+0x6c>)
 8003a46:	f7fe fcf9 	bl	800243c <vListInitialise>

	#if ( INCLUDE_vTaskDelete == 1 )
	{
		vListInitialise( &xTasksWaitingTermination );
 8003a4a:	480c      	ldr	r0, [pc, #48]	; (8003a7c <prvInitialiseTaskLists+0x70>)
 8003a4c:	f7fe fcf6 	bl	800243c <vListInitialise>
	}
	#endif /* INCLUDE_vTaskDelete */

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		vListInitialise( &xSuspendedTaskList );
 8003a50:	480b      	ldr	r0, [pc, #44]	; (8003a80 <prvInitialiseTaskLists+0x74>)
 8003a52:	f7fe fcf3 	bl	800243c <vListInitialise>
	}
	#endif /* INCLUDE_vTaskSuspend */

	/* Start with pxDelayedTaskList using list1 and the pxOverflowDelayedTaskList
	using list2. */
	pxDelayedTaskList = &xDelayedTaskList1;
 8003a56:	4b0b      	ldr	r3, [pc, #44]	; (8003a84 <prvInitialiseTaskLists+0x78>)
 8003a58:	4a05      	ldr	r2, [pc, #20]	; (8003a70 <prvInitialiseTaskLists+0x64>)
 8003a5a:	601a      	str	r2, [r3, #0]
	pxOverflowDelayedTaskList = &xDelayedTaskList2;
 8003a5c:	4b0a      	ldr	r3, [pc, #40]	; (8003a88 <prvInitialiseTaskLists+0x7c>)
 8003a5e:	4a05      	ldr	r2, [pc, #20]	; (8003a74 <prvInitialiseTaskLists+0x68>)
 8003a60:	601a      	str	r2, [r3, #0]
}
 8003a62:	bf00      	nop
 8003a64:	3708      	adds	r7, #8
 8003a66:	46bd      	mov	sp, r7
 8003a68:	bd80      	pop	{r7, pc}
 8003a6a:	bf00      	nop
 8003a6c:	200003ac 	.word	0x200003ac
 8003a70:	20000438 	.word	0x20000438
 8003a74:	2000044c 	.word	0x2000044c
 8003a78:	20000468 	.word	0x20000468
 8003a7c:	2000047c 	.word	0x2000047c
 8003a80:	20000494 	.word	0x20000494
 8003a84:	20000460 	.word	0x20000460
 8003a88:	20000464 	.word	0x20000464

08003a8c <prvCheckTasksWaitingTermination>:
/*-----------------------------------------------------------*/

static void prvCheckTasksWaitingTermination( void )
{
 8003a8c:	b580      	push	{r7, lr}
 8003a8e:	b082      	sub	sp, #8
 8003a90:	af00      	add	r7, sp, #0
	{
		TCB_t *pxTCB;

		/* uxDeletedTasksWaitingCleanUp is used to prevent taskENTER_CRITICAL()
		being called too often in the idle task. */
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 8003a92:	e019      	b.n	8003ac8 <prvCheckTasksWaitingTermination+0x3c>
		{
			taskENTER_CRITICAL();
 8003a94:	f000 fbce 	bl	8004234 <vPortEnterCritical>
			{
				pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xTasksWaitingTermination ) ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8003a98:	4b10      	ldr	r3, [pc, #64]	; (8003adc <prvCheckTasksWaitingTermination+0x50>)
 8003a9a:	68db      	ldr	r3, [r3, #12]
 8003a9c:	68db      	ldr	r3, [r3, #12]
 8003a9e:	607b      	str	r3, [r7, #4]
				( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 8003aa0:	687b      	ldr	r3, [r7, #4]
 8003aa2:	3304      	adds	r3, #4
 8003aa4:	4618      	mov	r0, r3
 8003aa6:	f7fe fd53 	bl	8002550 <uxListRemove>
				--uxCurrentNumberOfTasks;
 8003aaa:	4b0d      	ldr	r3, [pc, #52]	; (8003ae0 <prvCheckTasksWaitingTermination+0x54>)
 8003aac:	681b      	ldr	r3, [r3, #0]
 8003aae:	3b01      	subs	r3, #1
 8003ab0:	4a0b      	ldr	r2, [pc, #44]	; (8003ae0 <prvCheckTasksWaitingTermination+0x54>)
 8003ab2:	6013      	str	r3, [r2, #0]
				--uxDeletedTasksWaitingCleanUp;
 8003ab4:	4b0b      	ldr	r3, [pc, #44]	; (8003ae4 <prvCheckTasksWaitingTermination+0x58>)
 8003ab6:	681b      	ldr	r3, [r3, #0]
 8003ab8:	3b01      	subs	r3, #1
 8003aba:	4a0a      	ldr	r2, [pc, #40]	; (8003ae4 <prvCheckTasksWaitingTermination+0x58>)
 8003abc:	6013      	str	r3, [r2, #0]
			}
			taskEXIT_CRITICAL();
 8003abe:	f000 fbe9 	bl	8004294 <vPortExitCritical>

			prvDeleteTCB( pxTCB );
 8003ac2:	6878      	ldr	r0, [r7, #4]
 8003ac4:	f000 f810 	bl	8003ae8 <prvDeleteTCB>
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 8003ac8:	4b06      	ldr	r3, [pc, #24]	; (8003ae4 <prvCheckTasksWaitingTermination+0x58>)
 8003aca:	681b      	ldr	r3, [r3, #0]
 8003acc:	2b00      	cmp	r3, #0
 8003ace:	d1e1      	bne.n	8003a94 <prvCheckTasksWaitingTermination+0x8>
		}
	}
	#endif /* INCLUDE_vTaskDelete */
}
 8003ad0:	bf00      	nop
 8003ad2:	bf00      	nop
 8003ad4:	3708      	adds	r7, #8
 8003ad6:	46bd      	mov	sp, r7
 8003ad8:	bd80      	pop	{r7, pc}
 8003ada:	bf00      	nop
 8003adc:	2000047c 	.word	0x2000047c
 8003ae0:	200004a8 	.word	0x200004a8
 8003ae4:	20000490 	.word	0x20000490

08003ae8 <prvDeleteTCB>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelete == 1 )

	static void prvDeleteTCB( TCB_t *pxTCB )
	{
 8003ae8:	b580      	push	{r7, lr}
 8003aea:	b084      	sub	sp, #16
 8003aec:	af00      	add	r7, sp, #0
 8003aee:	6078      	str	r0, [r7, #4]
		to the task to free any memory allocated at the application level.
		See the third party link http://www.nadler.com/embedded/newlibAndFreeRTOS.html
		for additional information. */
		#if ( configUSE_NEWLIB_REENTRANT == 1 )
		{
			_reclaim_reent( &( pxTCB->xNewLib_reent ) );
 8003af0:	687b      	ldr	r3, [r7, #4]
 8003af2:	334c      	adds	r3, #76	; 0x4c
 8003af4:	4618      	mov	r0, r3
 8003af6:	f000 fed7 	bl	80048a8 <_reclaim_reent>
		#elif( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 !e9029 Macro has been consolidated for readability reasons. */
		{
			/* The task could have been allocated statically or dynamically, so
			check what was statically allocated before trying to free the
			memory. */
			if( pxTCB->ucStaticallyAllocated == tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB )
 8003afa:	687b      	ldr	r3, [r7, #4]
 8003afc:	f893 30b1 	ldrb.w	r3, [r3, #177]	; 0xb1
 8003b00:	2b00      	cmp	r3, #0
 8003b02:	d108      	bne.n	8003b16 <prvDeleteTCB+0x2e>
			{
				/* Both the stack and TCB were allocated dynamically, so both
				must be freed. */
				vPortFree( pxTCB->pxStack );
 8003b04:	687b      	ldr	r3, [r7, #4]
 8003b06:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003b08:	4618      	mov	r0, r3
 8003b0a:	f000 fd41 	bl	8004590 <vPortFree>
				vPortFree( pxTCB );
 8003b0e:	6878      	ldr	r0, [r7, #4]
 8003b10:	f000 fd3e 	bl	8004590 <vPortFree>
				configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB	);
				mtCOVERAGE_TEST_MARKER();
			}
		}
		#endif /* configSUPPORT_DYNAMIC_ALLOCATION */
	}
 8003b14:	e018      	b.n	8003b48 <prvDeleteTCB+0x60>
			else if( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_ONLY )
 8003b16:	687b      	ldr	r3, [r7, #4]
 8003b18:	f893 30b1 	ldrb.w	r3, [r3, #177]	; 0xb1
 8003b1c:	2b01      	cmp	r3, #1
 8003b1e:	d103      	bne.n	8003b28 <prvDeleteTCB+0x40>
				vPortFree( pxTCB );
 8003b20:	6878      	ldr	r0, [r7, #4]
 8003b22:	f000 fd35 	bl	8004590 <vPortFree>
	}
 8003b26:	e00f      	b.n	8003b48 <prvDeleteTCB+0x60>
				configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB	);
 8003b28:	687b      	ldr	r3, [r7, #4]
 8003b2a:	f893 30b1 	ldrb.w	r3, [r3, #177]	; 0xb1
 8003b2e:	2b02      	cmp	r3, #2
 8003b30:	d00a      	beq.n	8003b48 <prvDeleteTCB+0x60>
	__asm volatile
 8003b32:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003b36:	f383 8811 	msr	BASEPRI, r3
 8003b3a:	f3bf 8f6f 	isb	sy
 8003b3e:	f3bf 8f4f 	dsb	sy
 8003b42:	60fb      	str	r3, [r7, #12]
}
 8003b44:	bf00      	nop
 8003b46:	e7fe      	b.n	8003b46 <prvDeleteTCB+0x5e>
	}
 8003b48:	bf00      	nop
 8003b4a:	3710      	adds	r7, #16
 8003b4c:	46bd      	mov	sp, r7
 8003b4e:	bd80      	pop	{r7, pc}

08003b50 <prvResetNextTaskUnblockTime>:

#endif /* INCLUDE_vTaskDelete */
/*-----------------------------------------------------------*/

static void prvResetNextTaskUnblockTime( void )
{
 8003b50:	b480      	push	{r7}
 8003b52:	b083      	sub	sp, #12
 8003b54:	af00      	add	r7, sp, #0
TCB_t *pxTCB;

	if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 8003b56:	4b0c      	ldr	r3, [pc, #48]	; (8003b88 <prvResetNextTaskUnblockTime+0x38>)
 8003b58:	681b      	ldr	r3, [r3, #0]
 8003b5a:	681b      	ldr	r3, [r3, #0]
 8003b5c:	2b00      	cmp	r3, #0
 8003b5e:	d104      	bne.n	8003b6a <prvResetNextTaskUnblockTime+0x1a>
	{
		/* The new current delayed list is empty.  Set xNextTaskUnblockTime to
		the maximum possible value so it is	extremely unlikely that the
		if( xTickCount >= xNextTaskUnblockTime ) test will pass until
		there is an item in the delayed list. */
		xNextTaskUnblockTime = portMAX_DELAY;
 8003b60:	4b0a      	ldr	r3, [pc, #40]	; (8003b8c <prvResetNextTaskUnblockTime+0x3c>)
 8003b62:	f04f 32ff 	mov.w	r2, #4294967295
 8003b66:	601a      	str	r2, [r3, #0]
		which the task at the head of the delayed list should be removed
		from the Blocked state. */
		( pxTCB ) = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
	}
}
 8003b68:	e008      	b.n	8003b7c <prvResetNextTaskUnblockTime+0x2c>
		( pxTCB ) = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8003b6a:	4b07      	ldr	r3, [pc, #28]	; (8003b88 <prvResetNextTaskUnblockTime+0x38>)
 8003b6c:	681b      	ldr	r3, [r3, #0]
 8003b6e:	68db      	ldr	r3, [r3, #12]
 8003b70:	68db      	ldr	r3, [r3, #12]
 8003b72:	607b      	str	r3, [r7, #4]
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
 8003b74:	687b      	ldr	r3, [r7, #4]
 8003b76:	685b      	ldr	r3, [r3, #4]
 8003b78:	4a04      	ldr	r2, [pc, #16]	; (8003b8c <prvResetNextTaskUnblockTime+0x3c>)
 8003b7a:	6013      	str	r3, [r2, #0]
}
 8003b7c:	bf00      	nop
 8003b7e:	370c      	adds	r7, #12
 8003b80:	46bd      	mov	sp, r7
 8003b82:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003b86:	4770      	bx	lr
 8003b88:	20000460 	.word	0x20000460
 8003b8c:	200004c8 	.word	0x200004c8

08003b90 <xTaskGetSchedulerState>:
/*-----------------------------------------------------------*/

#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )

	BaseType_t xTaskGetSchedulerState( void )
	{
 8003b90:	b480      	push	{r7}
 8003b92:	b083      	sub	sp, #12
 8003b94:	af00      	add	r7, sp, #0
	BaseType_t xReturn;

		if( xSchedulerRunning == pdFALSE )
 8003b96:	4b0b      	ldr	r3, [pc, #44]	; (8003bc4 <xTaskGetSchedulerState+0x34>)
 8003b98:	681b      	ldr	r3, [r3, #0]
 8003b9a:	2b00      	cmp	r3, #0
 8003b9c:	d102      	bne.n	8003ba4 <xTaskGetSchedulerState+0x14>
		{
			xReturn = taskSCHEDULER_NOT_STARTED;
 8003b9e:	2301      	movs	r3, #1
 8003ba0:	607b      	str	r3, [r7, #4]
 8003ba2:	e008      	b.n	8003bb6 <xTaskGetSchedulerState+0x26>
		}
		else
		{
			if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8003ba4:	4b08      	ldr	r3, [pc, #32]	; (8003bc8 <xTaskGetSchedulerState+0x38>)
 8003ba6:	681b      	ldr	r3, [r3, #0]
 8003ba8:	2b00      	cmp	r3, #0
 8003baa:	d102      	bne.n	8003bb2 <xTaskGetSchedulerState+0x22>
			{
				xReturn = taskSCHEDULER_RUNNING;
 8003bac:	2302      	movs	r3, #2
 8003bae:	607b      	str	r3, [r7, #4]
 8003bb0:	e001      	b.n	8003bb6 <xTaskGetSchedulerState+0x26>
			}
			else
			{
				xReturn = taskSCHEDULER_SUSPENDED;
 8003bb2:	2300      	movs	r3, #0
 8003bb4:	607b      	str	r3, [r7, #4]
			}
		}

		return xReturn;
 8003bb6:	687b      	ldr	r3, [r7, #4]
	}
 8003bb8:	4618      	mov	r0, r3
 8003bba:	370c      	adds	r7, #12
 8003bbc:	46bd      	mov	sp, r7
 8003bbe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003bc2:	4770      	bx	lr
 8003bc4:	200004b4 	.word	0x200004b4
 8003bc8:	200004d0 	.word	0x200004d0

08003bcc <xTaskPriorityInherit>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	BaseType_t xTaskPriorityInherit( TaskHandle_t const pxMutexHolder )
	{
 8003bcc:	b580      	push	{r7, lr}
 8003bce:	b084      	sub	sp, #16
 8003bd0:	af00      	add	r7, sp, #0
 8003bd2:	6078      	str	r0, [r7, #4]
	TCB_t * const pxMutexHolderTCB = pxMutexHolder;
 8003bd4:	687b      	ldr	r3, [r7, #4]
 8003bd6:	60bb      	str	r3, [r7, #8]
	BaseType_t xReturn = pdFALSE;
 8003bd8:	2300      	movs	r3, #0
 8003bda:	60fb      	str	r3, [r7, #12]

		/* If the mutex was given back by an interrupt while the queue was
		locked then the mutex holder might now be NULL.  _RB_ Is this still
		needed as interrupts can no longer use mutexes? */
		if( pxMutexHolder != NULL )
 8003bdc:	687b      	ldr	r3, [r7, #4]
 8003bde:	2b00      	cmp	r3, #0
 8003be0:	d05e      	beq.n	8003ca0 <xTaskPriorityInherit+0xd4>
		{
			/* If the holder of the mutex has a priority below the priority of
			the task attempting to obtain the mutex then it will temporarily
			inherit the priority of the task attempting to obtain the mutex. */
			if( pxMutexHolderTCB->uxPriority < pxCurrentTCB->uxPriority )
 8003be2:	68bb      	ldr	r3, [r7, #8]
 8003be4:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8003be6:	4b31      	ldr	r3, [pc, #196]	; (8003cac <xTaskPriorityInherit+0xe0>)
 8003be8:	681b      	ldr	r3, [r3, #0]
 8003bea:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003bec:	429a      	cmp	r2, r3
 8003bee:	d24e      	bcs.n	8003c8e <xTaskPriorityInherit+0xc2>
			{
				/* Adjust the mutex holder state to account for its new
				priority.  Only reset the event list item value if the value is
				not being used for anything else. */
				if( ( listGET_LIST_ITEM_VALUE( &( pxMutexHolderTCB->xEventListItem ) ) & taskEVENT_LIST_ITEM_VALUE_IN_USE ) == 0UL )
 8003bf0:	68bb      	ldr	r3, [r7, #8]
 8003bf2:	699b      	ldr	r3, [r3, #24]
 8003bf4:	2b00      	cmp	r3, #0
 8003bf6:	db06      	blt.n	8003c06 <xTaskPriorityInherit+0x3a>
				{
					listSET_LIST_ITEM_VALUE( &( pxMutexHolderTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) pxCurrentTCB->uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8003bf8:	4b2c      	ldr	r3, [pc, #176]	; (8003cac <xTaskPriorityInherit+0xe0>)
 8003bfa:	681b      	ldr	r3, [r3, #0]
 8003bfc:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003bfe:	f1c3 0207 	rsb	r2, r3, #7
 8003c02:	68bb      	ldr	r3, [r7, #8]
 8003c04:	619a      	str	r2, [r3, #24]
					mtCOVERAGE_TEST_MARKER();
				}

				/* If the task being modified is in the ready state it will need
				to be moved into a new list. */
				if( listIS_CONTAINED_WITHIN( &( pxReadyTasksLists[ pxMutexHolderTCB->uxPriority ] ), &( pxMutexHolderTCB->xStateListItem ) ) != pdFALSE )
 8003c06:	68bb      	ldr	r3, [r7, #8]
 8003c08:	6959      	ldr	r1, [r3, #20]
 8003c0a:	68bb      	ldr	r3, [r7, #8]
 8003c0c:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8003c0e:	4613      	mov	r3, r2
 8003c10:	009b      	lsls	r3, r3, #2
 8003c12:	4413      	add	r3, r2
 8003c14:	009b      	lsls	r3, r3, #2
 8003c16:	4a26      	ldr	r2, [pc, #152]	; (8003cb0 <xTaskPriorityInherit+0xe4>)
 8003c18:	4413      	add	r3, r2
 8003c1a:	4299      	cmp	r1, r3
 8003c1c:	d12f      	bne.n	8003c7e <xTaskPriorityInherit+0xb2>
				{
					if( uxListRemove( &( pxMutexHolderTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 8003c1e:	68bb      	ldr	r3, [r7, #8]
 8003c20:	3304      	adds	r3, #4
 8003c22:	4618      	mov	r0, r3
 8003c24:	f7fe fc94 	bl	8002550 <uxListRemove>
 8003c28:	4603      	mov	r3, r0
 8003c2a:	2b00      	cmp	r3, #0
 8003c2c:	d10a      	bne.n	8003c44 <xTaskPriorityInherit+0x78>
					{
						/* It is known that the task is in its ready list so
						there is no need to check again and the port level
						reset macro can be called directly. */
						portRESET_READY_PRIORITY( pxMutexHolderTCB->uxPriority, uxTopReadyPriority );
 8003c2e:	68bb      	ldr	r3, [r7, #8]
 8003c30:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003c32:	2201      	movs	r2, #1
 8003c34:	fa02 f303 	lsl.w	r3, r2, r3
 8003c38:	43da      	mvns	r2, r3
 8003c3a:	4b1e      	ldr	r3, [pc, #120]	; (8003cb4 <xTaskPriorityInherit+0xe8>)
 8003c3c:	681b      	ldr	r3, [r3, #0]
 8003c3e:	4013      	ands	r3, r2
 8003c40:	4a1c      	ldr	r2, [pc, #112]	; (8003cb4 <xTaskPriorityInherit+0xe8>)
 8003c42:	6013      	str	r3, [r2, #0]
					{
						mtCOVERAGE_TEST_MARKER();
					}

					/* Inherit the priority before being moved into the new list. */
					pxMutexHolderTCB->uxPriority = pxCurrentTCB->uxPriority;
 8003c44:	4b19      	ldr	r3, [pc, #100]	; (8003cac <xTaskPriorityInherit+0xe0>)
 8003c46:	681b      	ldr	r3, [r3, #0]
 8003c48:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8003c4a:	68bb      	ldr	r3, [r7, #8]
 8003c4c:	62da      	str	r2, [r3, #44]	; 0x2c
					prvAddTaskToReadyList( pxMutexHolderTCB );
 8003c4e:	68bb      	ldr	r3, [r7, #8]
 8003c50:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003c52:	2201      	movs	r2, #1
 8003c54:	409a      	lsls	r2, r3
 8003c56:	4b17      	ldr	r3, [pc, #92]	; (8003cb4 <xTaskPriorityInherit+0xe8>)
 8003c58:	681b      	ldr	r3, [r3, #0]
 8003c5a:	4313      	orrs	r3, r2
 8003c5c:	4a15      	ldr	r2, [pc, #84]	; (8003cb4 <xTaskPriorityInherit+0xe8>)
 8003c5e:	6013      	str	r3, [r2, #0]
 8003c60:	68bb      	ldr	r3, [r7, #8]
 8003c62:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8003c64:	4613      	mov	r3, r2
 8003c66:	009b      	lsls	r3, r3, #2
 8003c68:	4413      	add	r3, r2
 8003c6a:	009b      	lsls	r3, r3, #2
 8003c6c:	4a10      	ldr	r2, [pc, #64]	; (8003cb0 <xTaskPriorityInherit+0xe4>)
 8003c6e:	441a      	add	r2, r3
 8003c70:	68bb      	ldr	r3, [r7, #8]
 8003c72:	3304      	adds	r3, #4
 8003c74:	4619      	mov	r1, r3
 8003c76:	4610      	mov	r0, r2
 8003c78:	f7fe fc0d 	bl	8002496 <vListInsertEnd>
 8003c7c:	e004      	b.n	8003c88 <xTaskPriorityInherit+0xbc>
				}
				else
				{
					/* Just inherit the priority. */
					pxMutexHolderTCB->uxPriority = pxCurrentTCB->uxPriority;
 8003c7e:	4b0b      	ldr	r3, [pc, #44]	; (8003cac <xTaskPriorityInherit+0xe0>)
 8003c80:	681b      	ldr	r3, [r3, #0]
 8003c82:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8003c84:	68bb      	ldr	r3, [r7, #8]
 8003c86:	62da      	str	r2, [r3, #44]	; 0x2c
				}

				traceTASK_PRIORITY_INHERIT( pxMutexHolderTCB, pxCurrentTCB->uxPriority );

				/* Inheritance occurred. */
				xReturn = pdTRUE;
 8003c88:	2301      	movs	r3, #1
 8003c8a:	60fb      	str	r3, [r7, #12]
 8003c8c:	e008      	b.n	8003ca0 <xTaskPriorityInherit+0xd4>
			}
			else
			{
				if( pxMutexHolderTCB->uxBasePriority < pxCurrentTCB->uxPriority )
 8003c8e:	68bb      	ldr	r3, [r7, #8]
 8003c90:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8003c92:	4b06      	ldr	r3, [pc, #24]	; (8003cac <xTaskPriorityInherit+0xe0>)
 8003c94:	681b      	ldr	r3, [r3, #0]
 8003c96:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003c98:	429a      	cmp	r2, r3
 8003c9a:	d201      	bcs.n	8003ca0 <xTaskPriorityInherit+0xd4>
					current priority of the mutex holder is not lower than the
					priority of the task attempting to take the mutex.
					Therefore the mutex holder must have already inherited a
					priority, but inheritance would have occurred if that had
					not been the case. */
					xReturn = pdTRUE;
 8003c9c:	2301      	movs	r3, #1
 8003c9e:	60fb      	str	r3, [r7, #12]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		return xReturn;
 8003ca0:	68fb      	ldr	r3, [r7, #12]
	}
 8003ca2:	4618      	mov	r0, r3
 8003ca4:	3710      	adds	r7, #16
 8003ca6:	46bd      	mov	sp, r7
 8003ca8:	bd80      	pop	{r7, pc}
 8003caa:	bf00      	nop
 8003cac:	200003a8 	.word	0x200003a8
 8003cb0:	200003ac 	.word	0x200003ac
 8003cb4:	200004b0 	.word	0x200004b0

08003cb8 <xTaskPriorityDisinherit>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	BaseType_t xTaskPriorityDisinherit( TaskHandle_t const pxMutexHolder )
	{
 8003cb8:	b580      	push	{r7, lr}
 8003cba:	b086      	sub	sp, #24
 8003cbc:	af00      	add	r7, sp, #0
 8003cbe:	6078      	str	r0, [r7, #4]
	TCB_t * const pxTCB = pxMutexHolder;
 8003cc0:	687b      	ldr	r3, [r7, #4]
 8003cc2:	613b      	str	r3, [r7, #16]
	BaseType_t xReturn = pdFALSE;
 8003cc4:	2300      	movs	r3, #0
 8003cc6:	617b      	str	r3, [r7, #20]

		if( pxMutexHolder != NULL )
 8003cc8:	687b      	ldr	r3, [r7, #4]
 8003cca:	2b00      	cmp	r3, #0
 8003ccc:	d06e      	beq.n	8003dac <xTaskPriorityDisinherit+0xf4>
		{
			/* A task can only have an inherited priority if it holds the mutex.
			If the mutex is held by a task then it cannot be given from an
			interrupt, and if a mutex is given by the holding task then it must
			be the running state task. */
			configASSERT( pxTCB == pxCurrentTCB );
 8003cce:	4b3a      	ldr	r3, [pc, #232]	; (8003db8 <xTaskPriorityDisinherit+0x100>)
 8003cd0:	681b      	ldr	r3, [r3, #0]
 8003cd2:	693a      	ldr	r2, [r7, #16]
 8003cd4:	429a      	cmp	r2, r3
 8003cd6:	d00a      	beq.n	8003cee <xTaskPriorityDisinherit+0x36>
	__asm volatile
 8003cd8:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003cdc:	f383 8811 	msr	BASEPRI, r3
 8003ce0:	f3bf 8f6f 	isb	sy
 8003ce4:	f3bf 8f4f 	dsb	sy
 8003ce8:	60fb      	str	r3, [r7, #12]
}
 8003cea:	bf00      	nop
 8003cec:	e7fe      	b.n	8003cec <xTaskPriorityDisinherit+0x34>
			configASSERT( pxTCB->uxMutexesHeld );
 8003cee:	693b      	ldr	r3, [r7, #16]
 8003cf0:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8003cf2:	2b00      	cmp	r3, #0
 8003cf4:	d10a      	bne.n	8003d0c <xTaskPriorityDisinherit+0x54>
	__asm volatile
 8003cf6:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003cfa:	f383 8811 	msr	BASEPRI, r3
 8003cfe:	f3bf 8f6f 	isb	sy
 8003d02:	f3bf 8f4f 	dsb	sy
 8003d06:	60bb      	str	r3, [r7, #8]
}
 8003d08:	bf00      	nop
 8003d0a:	e7fe      	b.n	8003d0a <xTaskPriorityDisinherit+0x52>
			( pxTCB->uxMutexesHeld )--;
 8003d0c:	693b      	ldr	r3, [r7, #16]
 8003d0e:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8003d10:	1e5a      	subs	r2, r3, #1
 8003d12:	693b      	ldr	r3, [r7, #16]
 8003d14:	649a      	str	r2, [r3, #72]	; 0x48

			/* Has the holder of the mutex inherited the priority of another
			task? */
			if( pxTCB->uxPriority != pxTCB->uxBasePriority )
 8003d16:	693b      	ldr	r3, [r7, #16]
 8003d18:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8003d1a:	693b      	ldr	r3, [r7, #16]
 8003d1c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003d1e:	429a      	cmp	r2, r3
 8003d20:	d044      	beq.n	8003dac <xTaskPriorityDisinherit+0xf4>
			{
				/* Only disinherit if no other mutexes are held. */
				if( pxTCB->uxMutexesHeld == ( UBaseType_t ) 0 )
 8003d22:	693b      	ldr	r3, [r7, #16]
 8003d24:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8003d26:	2b00      	cmp	r3, #0
 8003d28:	d140      	bne.n	8003dac <xTaskPriorityDisinherit+0xf4>
					/* A task can only have an inherited priority if it holds
					the mutex.  If the mutex is held by a task then it cannot be
					given from an interrupt, and if a mutex is given by the
					holding task then it must be the running state task.  Remove
					the holding task from the ready/delayed list. */
					if( uxListRemove( &( pxTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 8003d2a:	693b      	ldr	r3, [r7, #16]
 8003d2c:	3304      	adds	r3, #4
 8003d2e:	4618      	mov	r0, r3
 8003d30:	f7fe fc0e 	bl	8002550 <uxListRemove>
 8003d34:	4603      	mov	r3, r0
 8003d36:	2b00      	cmp	r3, #0
 8003d38:	d115      	bne.n	8003d66 <xTaskPriorityDisinherit+0xae>
					{
						taskRESET_READY_PRIORITY( pxTCB->uxPriority );
 8003d3a:	693b      	ldr	r3, [r7, #16]
 8003d3c:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8003d3e:	491f      	ldr	r1, [pc, #124]	; (8003dbc <xTaskPriorityDisinherit+0x104>)
 8003d40:	4613      	mov	r3, r2
 8003d42:	009b      	lsls	r3, r3, #2
 8003d44:	4413      	add	r3, r2
 8003d46:	009b      	lsls	r3, r3, #2
 8003d48:	440b      	add	r3, r1
 8003d4a:	681b      	ldr	r3, [r3, #0]
 8003d4c:	2b00      	cmp	r3, #0
 8003d4e:	d10a      	bne.n	8003d66 <xTaskPriorityDisinherit+0xae>
 8003d50:	693b      	ldr	r3, [r7, #16]
 8003d52:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003d54:	2201      	movs	r2, #1
 8003d56:	fa02 f303 	lsl.w	r3, r2, r3
 8003d5a:	43da      	mvns	r2, r3
 8003d5c:	4b18      	ldr	r3, [pc, #96]	; (8003dc0 <xTaskPriorityDisinherit+0x108>)
 8003d5e:	681b      	ldr	r3, [r3, #0]
 8003d60:	4013      	ands	r3, r2
 8003d62:	4a17      	ldr	r2, [pc, #92]	; (8003dc0 <xTaskPriorityDisinherit+0x108>)
 8003d64:	6013      	str	r3, [r2, #0]
					}

					/* Disinherit the priority before adding the task into the
					new	ready list. */
					traceTASK_PRIORITY_DISINHERIT( pxTCB, pxTCB->uxBasePriority );
					pxTCB->uxPriority = pxTCB->uxBasePriority;
 8003d66:	693b      	ldr	r3, [r7, #16]
 8003d68:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8003d6a:	693b      	ldr	r3, [r7, #16]
 8003d6c:	62da      	str	r2, [r3, #44]	; 0x2c

					/* Reset the event list item value.  It cannot be in use for
					any other purpose if this task is running, and it must be
					running to give back the mutex. */
					listSET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) pxTCB->uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8003d6e:	693b      	ldr	r3, [r7, #16]
 8003d70:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003d72:	f1c3 0207 	rsb	r2, r3, #7
 8003d76:	693b      	ldr	r3, [r7, #16]
 8003d78:	619a      	str	r2, [r3, #24]
					prvAddTaskToReadyList( pxTCB );
 8003d7a:	693b      	ldr	r3, [r7, #16]
 8003d7c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003d7e:	2201      	movs	r2, #1
 8003d80:	409a      	lsls	r2, r3
 8003d82:	4b0f      	ldr	r3, [pc, #60]	; (8003dc0 <xTaskPriorityDisinherit+0x108>)
 8003d84:	681b      	ldr	r3, [r3, #0]
 8003d86:	4313      	orrs	r3, r2
 8003d88:	4a0d      	ldr	r2, [pc, #52]	; (8003dc0 <xTaskPriorityDisinherit+0x108>)
 8003d8a:	6013      	str	r3, [r2, #0]
 8003d8c:	693b      	ldr	r3, [r7, #16]
 8003d8e:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8003d90:	4613      	mov	r3, r2
 8003d92:	009b      	lsls	r3, r3, #2
 8003d94:	4413      	add	r3, r2
 8003d96:	009b      	lsls	r3, r3, #2
 8003d98:	4a08      	ldr	r2, [pc, #32]	; (8003dbc <xTaskPriorityDisinherit+0x104>)
 8003d9a:	441a      	add	r2, r3
 8003d9c:	693b      	ldr	r3, [r7, #16]
 8003d9e:	3304      	adds	r3, #4
 8003da0:	4619      	mov	r1, r3
 8003da2:	4610      	mov	r0, r2
 8003da4:	f7fe fb77 	bl	8002496 <vListInsertEnd>
					in an order different to that in which they were taken.
					If a context switch did not occur when the first mutex was
					returned, even if a task was waiting on it, then a context
					switch should occur when the last mutex is returned whether
					a task is waiting on it or not. */
					xReturn = pdTRUE;
 8003da8:	2301      	movs	r3, #1
 8003daa:	617b      	str	r3, [r7, #20]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		return xReturn;
 8003dac:	697b      	ldr	r3, [r7, #20]
	}
 8003dae:	4618      	mov	r0, r3
 8003db0:	3718      	adds	r7, #24
 8003db2:	46bd      	mov	sp, r7
 8003db4:	bd80      	pop	{r7, pc}
 8003db6:	bf00      	nop
 8003db8:	200003a8 	.word	0x200003a8
 8003dbc:	200003ac 	.word	0x200003ac
 8003dc0:	200004b0 	.word	0x200004b0

08003dc4 <vTaskPriorityDisinheritAfterTimeout>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	void vTaskPriorityDisinheritAfterTimeout( TaskHandle_t const pxMutexHolder, UBaseType_t uxHighestPriorityWaitingTask )
	{
 8003dc4:	b580      	push	{r7, lr}
 8003dc6:	b088      	sub	sp, #32
 8003dc8:	af00      	add	r7, sp, #0
 8003dca:	6078      	str	r0, [r7, #4]
 8003dcc:	6039      	str	r1, [r7, #0]
	TCB_t * const pxTCB = pxMutexHolder;
 8003dce:	687b      	ldr	r3, [r7, #4]
 8003dd0:	61bb      	str	r3, [r7, #24]
	UBaseType_t uxPriorityUsedOnEntry, uxPriorityToUse;
	const UBaseType_t uxOnlyOneMutexHeld = ( UBaseType_t ) 1;
 8003dd2:	2301      	movs	r3, #1
 8003dd4:	617b      	str	r3, [r7, #20]

		if( pxMutexHolder != NULL )
 8003dd6:	687b      	ldr	r3, [r7, #4]
 8003dd8:	2b00      	cmp	r3, #0
 8003dda:	d077      	beq.n	8003ecc <vTaskPriorityDisinheritAfterTimeout+0x108>
		{
			/* If pxMutexHolder is not NULL then the holder must hold at least
			one mutex. */
			configASSERT( pxTCB->uxMutexesHeld );
 8003ddc:	69bb      	ldr	r3, [r7, #24]
 8003dde:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8003de0:	2b00      	cmp	r3, #0
 8003de2:	d10a      	bne.n	8003dfa <vTaskPriorityDisinheritAfterTimeout+0x36>
	__asm volatile
 8003de4:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003de8:	f383 8811 	msr	BASEPRI, r3
 8003dec:	f3bf 8f6f 	isb	sy
 8003df0:	f3bf 8f4f 	dsb	sy
 8003df4:	60fb      	str	r3, [r7, #12]
}
 8003df6:	bf00      	nop
 8003df8:	e7fe      	b.n	8003df8 <vTaskPriorityDisinheritAfterTimeout+0x34>

			/* Determine the priority to which the priority of the task that
			holds the mutex should be set.  This will be the greater of the
			holding task's base priority and the priority of the highest
			priority task that is waiting to obtain the mutex. */
			if( pxTCB->uxBasePriority < uxHighestPriorityWaitingTask )
 8003dfa:	69bb      	ldr	r3, [r7, #24]
 8003dfc:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003dfe:	683a      	ldr	r2, [r7, #0]
 8003e00:	429a      	cmp	r2, r3
 8003e02:	d902      	bls.n	8003e0a <vTaskPriorityDisinheritAfterTimeout+0x46>
			{
				uxPriorityToUse = uxHighestPriorityWaitingTask;
 8003e04:	683b      	ldr	r3, [r7, #0]
 8003e06:	61fb      	str	r3, [r7, #28]
 8003e08:	e002      	b.n	8003e10 <vTaskPriorityDisinheritAfterTimeout+0x4c>
			}
			else
			{
				uxPriorityToUse = pxTCB->uxBasePriority;
 8003e0a:	69bb      	ldr	r3, [r7, #24]
 8003e0c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003e0e:	61fb      	str	r3, [r7, #28]
			}

			/* Does the priority need to change? */
			if( pxTCB->uxPriority != uxPriorityToUse )
 8003e10:	69bb      	ldr	r3, [r7, #24]
 8003e12:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003e14:	69fa      	ldr	r2, [r7, #28]
 8003e16:	429a      	cmp	r2, r3
 8003e18:	d058      	beq.n	8003ecc <vTaskPriorityDisinheritAfterTimeout+0x108>
			{
				/* Only disinherit if no other mutexes are held.  This is a
				simplification in the priority inheritance implementation.  If
				the task that holds the mutex is also holding other mutexes then
				the other mutexes may have caused the priority inheritance. */
				if( pxTCB->uxMutexesHeld == uxOnlyOneMutexHeld )
 8003e1a:	69bb      	ldr	r3, [r7, #24]
 8003e1c:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8003e1e:	697a      	ldr	r2, [r7, #20]
 8003e20:	429a      	cmp	r2, r3
 8003e22:	d153      	bne.n	8003ecc <vTaskPriorityDisinheritAfterTimeout+0x108>
				{
					/* If a task has timed out because it already holds the
					mutex it was trying to obtain then it cannot of inherited
					its own priority. */
					configASSERT( pxTCB != pxCurrentTCB );
 8003e24:	4b2b      	ldr	r3, [pc, #172]	; (8003ed4 <vTaskPriorityDisinheritAfterTimeout+0x110>)
 8003e26:	681b      	ldr	r3, [r3, #0]
 8003e28:	69ba      	ldr	r2, [r7, #24]
 8003e2a:	429a      	cmp	r2, r3
 8003e2c:	d10a      	bne.n	8003e44 <vTaskPriorityDisinheritAfterTimeout+0x80>
	__asm volatile
 8003e2e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003e32:	f383 8811 	msr	BASEPRI, r3
 8003e36:	f3bf 8f6f 	isb	sy
 8003e3a:	f3bf 8f4f 	dsb	sy
 8003e3e:	60bb      	str	r3, [r7, #8]
}
 8003e40:	bf00      	nop
 8003e42:	e7fe      	b.n	8003e42 <vTaskPriorityDisinheritAfterTimeout+0x7e>

					/* Disinherit the priority, remembering the previous
					priority to facilitate determining the subject task's
					state. */
					traceTASK_PRIORITY_DISINHERIT( pxTCB, pxTCB->uxBasePriority );
					uxPriorityUsedOnEntry = pxTCB->uxPriority;
 8003e44:	69bb      	ldr	r3, [r7, #24]
 8003e46:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003e48:	613b      	str	r3, [r7, #16]
					pxTCB->uxPriority = uxPriorityToUse;
 8003e4a:	69bb      	ldr	r3, [r7, #24]
 8003e4c:	69fa      	ldr	r2, [r7, #28]
 8003e4e:	62da      	str	r2, [r3, #44]	; 0x2c

					/* Only reset the event list item value if the value is not
					being used for anything else. */
					if( ( listGET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ) ) & taskEVENT_LIST_ITEM_VALUE_IN_USE ) == 0UL )
 8003e50:	69bb      	ldr	r3, [r7, #24]
 8003e52:	699b      	ldr	r3, [r3, #24]
 8003e54:	2b00      	cmp	r3, #0
 8003e56:	db04      	blt.n	8003e62 <vTaskPriorityDisinheritAfterTimeout+0x9e>
					{
						listSET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) uxPriorityToUse ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8003e58:	69fb      	ldr	r3, [r7, #28]
 8003e5a:	f1c3 0207 	rsb	r2, r3, #7
 8003e5e:	69bb      	ldr	r3, [r7, #24]
 8003e60:	619a      	str	r2, [r3, #24]
					then the task that holds the mutex could be in either the
					Ready, Blocked or Suspended states.  Only remove the task
					from its current state list if it is in the Ready state as
					the task's priority is going to change and there is one
					Ready list per priority. */
					if( listIS_CONTAINED_WITHIN( &( pxReadyTasksLists[ uxPriorityUsedOnEntry ] ), &( pxTCB->xStateListItem ) ) != pdFALSE )
 8003e62:	69bb      	ldr	r3, [r7, #24]
 8003e64:	6959      	ldr	r1, [r3, #20]
 8003e66:	693a      	ldr	r2, [r7, #16]
 8003e68:	4613      	mov	r3, r2
 8003e6a:	009b      	lsls	r3, r3, #2
 8003e6c:	4413      	add	r3, r2
 8003e6e:	009b      	lsls	r3, r3, #2
 8003e70:	4a19      	ldr	r2, [pc, #100]	; (8003ed8 <vTaskPriorityDisinheritAfterTimeout+0x114>)
 8003e72:	4413      	add	r3, r2
 8003e74:	4299      	cmp	r1, r3
 8003e76:	d129      	bne.n	8003ecc <vTaskPriorityDisinheritAfterTimeout+0x108>
					{
						if( uxListRemove( &( pxTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 8003e78:	69bb      	ldr	r3, [r7, #24]
 8003e7a:	3304      	adds	r3, #4
 8003e7c:	4618      	mov	r0, r3
 8003e7e:	f7fe fb67 	bl	8002550 <uxListRemove>
 8003e82:	4603      	mov	r3, r0
 8003e84:	2b00      	cmp	r3, #0
 8003e86:	d10a      	bne.n	8003e9e <vTaskPriorityDisinheritAfterTimeout+0xda>
						{
							/* It is known that the task is in its ready list so
							there is no need to check again and the port level
							reset macro can be called directly. */
							portRESET_READY_PRIORITY( pxTCB->uxPriority, uxTopReadyPriority );
 8003e88:	69bb      	ldr	r3, [r7, #24]
 8003e8a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003e8c:	2201      	movs	r2, #1
 8003e8e:	fa02 f303 	lsl.w	r3, r2, r3
 8003e92:	43da      	mvns	r2, r3
 8003e94:	4b11      	ldr	r3, [pc, #68]	; (8003edc <vTaskPriorityDisinheritAfterTimeout+0x118>)
 8003e96:	681b      	ldr	r3, [r3, #0]
 8003e98:	4013      	ands	r3, r2
 8003e9a:	4a10      	ldr	r2, [pc, #64]	; (8003edc <vTaskPriorityDisinheritAfterTimeout+0x118>)
 8003e9c:	6013      	str	r3, [r2, #0]
						else
						{
							mtCOVERAGE_TEST_MARKER();
						}

						prvAddTaskToReadyList( pxTCB );
 8003e9e:	69bb      	ldr	r3, [r7, #24]
 8003ea0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003ea2:	2201      	movs	r2, #1
 8003ea4:	409a      	lsls	r2, r3
 8003ea6:	4b0d      	ldr	r3, [pc, #52]	; (8003edc <vTaskPriorityDisinheritAfterTimeout+0x118>)
 8003ea8:	681b      	ldr	r3, [r3, #0]
 8003eaa:	4313      	orrs	r3, r2
 8003eac:	4a0b      	ldr	r2, [pc, #44]	; (8003edc <vTaskPriorityDisinheritAfterTimeout+0x118>)
 8003eae:	6013      	str	r3, [r2, #0]
 8003eb0:	69bb      	ldr	r3, [r7, #24]
 8003eb2:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8003eb4:	4613      	mov	r3, r2
 8003eb6:	009b      	lsls	r3, r3, #2
 8003eb8:	4413      	add	r3, r2
 8003eba:	009b      	lsls	r3, r3, #2
 8003ebc:	4a06      	ldr	r2, [pc, #24]	; (8003ed8 <vTaskPriorityDisinheritAfterTimeout+0x114>)
 8003ebe:	441a      	add	r2, r3
 8003ec0:	69bb      	ldr	r3, [r7, #24]
 8003ec2:	3304      	adds	r3, #4
 8003ec4:	4619      	mov	r1, r3
 8003ec6:	4610      	mov	r0, r2
 8003ec8:	f7fe fae5 	bl	8002496 <vListInsertEnd>
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
 8003ecc:	bf00      	nop
 8003ece:	3720      	adds	r7, #32
 8003ed0:	46bd      	mov	sp, r7
 8003ed2:	bd80      	pop	{r7, pc}
 8003ed4:	200003a8 	.word	0x200003a8
 8003ed8:	200003ac 	.word	0x200003ac
 8003edc:	200004b0 	.word	0x200004b0

08003ee0 <pvTaskIncrementMutexHeldCount>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	TaskHandle_t pvTaskIncrementMutexHeldCount( void )
	{
 8003ee0:	b480      	push	{r7}
 8003ee2:	af00      	add	r7, sp, #0
		/* If xSemaphoreCreateMutex() is called before any tasks have been created
		then pxCurrentTCB will be NULL. */
		if( pxCurrentTCB != NULL )
 8003ee4:	4b07      	ldr	r3, [pc, #28]	; (8003f04 <pvTaskIncrementMutexHeldCount+0x24>)
 8003ee6:	681b      	ldr	r3, [r3, #0]
 8003ee8:	2b00      	cmp	r3, #0
 8003eea:	d004      	beq.n	8003ef6 <pvTaskIncrementMutexHeldCount+0x16>
		{
			( pxCurrentTCB->uxMutexesHeld )++;
 8003eec:	4b05      	ldr	r3, [pc, #20]	; (8003f04 <pvTaskIncrementMutexHeldCount+0x24>)
 8003eee:	681b      	ldr	r3, [r3, #0]
 8003ef0:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 8003ef2:	3201      	adds	r2, #1
 8003ef4:	649a      	str	r2, [r3, #72]	; 0x48
		}

		return pxCurrentTCB;
 8003ef6:	4b03      	ldr	r3, [pc, #12]	; (8003f04 <pvTaskIncrementMutexHeldCount+0x24>)
 8003ef8:	681b      	ldr	r3, [r3, #0]
	}
 8003efa:	4618      	mov	r0, r3
 8003efc:	46bd      	mov	sp, r7
 8003efe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003f02:	4770      	bx	lr
 8003f04:	200003a8 	.word	0x200003a8

08003f08 <prvAddCurrentTaskToDelayedList>:

#endif
/*-----------------------------------------------------------*/

static void prvAddCurrentTaskToDelayedList( TickType_t xTicksToWait, const BaseType_t xCanBlockIndefinitely )
{
 8003f08:	b580      	push	{r7, lr}
 8003f0a:	b084      	sub	sp, #16
 8003f0c:	af00      	add	r7, sp, #0
 8003f0e:	6078      	str	r0, [r7, #4]
 8003f10:	6039      	str	r1, [r7, #0]
TickType_t xTimeToWake;
const TickType_t xConstTickCount = xTickCount;
 8003f12:	4b29      	ldr	r3, [pc, #164]	; (8003fb8 <prvAddCurrentTaskToDelayedList+0xb0>)
 8003f14:	681b      	ldr	r3, [r3, #0]
 8003f16:	60fb      	str	r3, [r7, #12]
	}
	#endif

	/* Remove the task from the ready list before adding it to the blocked list
	as the same list item is used for both lists. */
	if( uxListRemove( &( pxCurrentTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 8003f18:	4b28      	ldr	r3, [pc, #160]	; (8003fbc <prvAddCurrentTaskToDelayedList+0xb4>)
 8003f1a:	681b      	ldr	r3, [r3, #0]
 8003f1c:	3304      	adds	r3, #4
 8003f1e:	4618      	mov	r0, r3
 8003f20:	f7fe fb16 	bl	8002550 <uxListRemove>
 8003f24:	4603      	mov	r3, r0
 8003f26:	2b00      	cmp	r3, #0
 8003f28:	d10b      	bne.n	8003f42 <prvAddCurrentTaskToDelayedList+0x3a>
	{
		/* The current task must be in a ready list, so there is no need to
		check, and the port reset macro can be called directly. */
		portRESET_READY_PRIORITY( pxCurrentTCB->uxPriority, uxTopReadyPriority ); /*lint !e931 pxCurrentTCB cannot change as it is the calling task.  pxCurrentTCB->uxPriority and uxTopReadyPriority cannot change as called with scheduler suspended or in a critical section. */
 8003f2a:	4b24      	ldr	r3, [pc, #144]	; (8003fbc <prvAddCurrentTaskToDelayedList+0xb4>)
 8003f2c:	681b      	ldr	r3, [r3, #0]
 8003f2e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003f30:	2201      	movs	r2, #1
 8003f32:	fa02 f303 	lsl.w	r3, r2, r3
 8003f36:	43da      	mvns	r2, r3
 8003f38:	4b21      	ldr	r3, [pc, #132]	; (8003fc0 <prvAddCurrentTaskToDelayedList+0xb8>)
 8003f3a:	681b      	ldr	r3, [r3, #0]
 8003f3c:	4013      	ands	r3, r2
 8003f3e:	4a20      	ldr	r2, [pc, #128]	; (8003fc0 <prvAddCurrentTaskToDelayedList+0xb8>)
 8003f40:	6013      	str	r3, [r2, #0]
		mtCOVERAGE_TEST_MARKER();
	}

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		if( ( xTicksToWait == portMAX_DELAY ) && ( xCanBlockIndefinitely != pdFALSE ) )
 8003f42:	687b      	ldr	r3, [r7, #4]
 8003f44:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003f48:	d10a      	bne.n	8003f60 <prvAddCurrentTaskToDelayedList+0x58>
 8003f4a:	683b      	ldr	r3, [r7, #0]
 8003f4c:	2b00      	cmp	r3, #0
 8003f4e:	d007      	beq.n	8003f60 <prvAddCurrentTaskToDelayedList+0x58>
		{
			/* Add the task to the suspended task list instead of a delayed task
			list to ensure it is not woken by a timing event.  It will block
			indefinitely. */
			vListInsertEnd( &xSuspendedTaskList, &( pxCurrentTCB->xStateListItem ) );
 8003f50:	4b1a      	ldr	r3, [pc, #104]	; (8003fbc <prvAddCurrentTaskToDelayedList+0xb4>)
 8003f52:	681b      	ldr	r3, [r3, #0]
 8003f54:	3304      	adds	r3, #4
 8003f56:	4619      	mov	r1, r3
 8003f58:	481a      	ldr	r0, [pc, #104]	; (8003fc4 <prvAddCurrentTaskToDelayedList+0xbc>)
 8003f5a:	f7fe fa9c 	bl	8002496 <vListInsertEnd>

		/* Avoid compiler warning when INCLUDE_vTaskSuspend is not 1. */
		( void ) xCanBlockIndefinitely;
	}
	#endif /* INCLUDE_vTaskSuspend */
}
 8003f5e:	e026      	b.n	8003fae <prvAddCurrentTaskToDelayedList+0xa6>
			xTimeToWake = xConstTickCount + xTicksToWait;
 8003f60:	68fa      	ldr	r2, [r7, #12]
 8003f62:	687b      	ldr	r3, [r7, #4]
 8003f64:	4413      	add	r3, r2
 8003f66:	60bb      	str	r3, [r7, #8]
			listSET_LIST_ITEM_VALUE( &( pxCurrentTCB->xStateListItem ), xTimeToWake );
 8003f68:	4b14      	ldr	r3, [pc, #80]	; (8003fbc <prvAddCurrentTaskToDelayedList+0xb4>)
 8003f6a:	681b      	ldr	r3, [r3, #0]
 8003f6c:	68ba      	ldr	r2, [r7, #8]
 8003f6e:	605a      	str	r2, [r3, #4]
			if( xTimeToWake < xConstTickCount )
 8003f70:	68ba      	ldr	r2, [r7, #8]
 8003f72:	68fb      	ldr	r3, [r7, #12]
 8003f74:	429a      	cmp	r2, r3
 8003f76:	d209      	bcs.n	8003f8c <prvAddCurrentTaskToDelayedList+0x84>
				vListInsert( pxOverflowDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 8003f78:	4b13      	ldr	r3, [pc, #76]	; (8003fc8 <prvAddCurrentTaskToDelayedList+0xc0>)
 8003f7a:	681a      	ldr	r2, [r3, #0]
 8003f7c:	4b0f      	ldr	r3, [pc, #60]	; (8003fbc <prvAddCurrentTaskToDelayedList+0xb4>)
 8003f7e:	681b      	ldr	r3, [r3, #0]
 8003f80:	3304      	adds	r3, #4
 8003f82:	4619      	mov	r1, r3
 8003f84:	4610      	mov	r0, r2
 8003f86:	f7fe faaa 	bl	80024de <vListInsert>
}
 8003f8a:	e010      	b.n	8003fae <prvAddCurrentTaskToDelayedList+0xa6>
				vListInsert( pxDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 8003f8c:	4b0f      	ldr	r3, [pc, #60]	; (8003fcc <prvAddCurrentTaskToDelayedList+0xc4>)
 8003f8e:	681a      	ldr	r2, [r3, #0]
 8003f90:	4b0a      	ldr	r3, [pc, #40]	; (8003fbc <prvAddCurrentTaskToDelayedList+0xb4>)
 8003f92:	681b      	ldr	r3, [r3, #0]
 8003f94:	3304      	adds	r3, #4
 8003f96:	4619      	mov	r1, r3
 8003f98:	4610      	mov	r0, r2
 8003f9a:	f7fe faa0 	bl	80024de <vListInsert>
				if( xTimeToWake < xNextTaskUnblockTime )
 8003f9e:	4b0c      	ldr	r3, [pc, #48]	; (8003fd0 <prvAddCurrentTaskToDelayedList+0xc8>)
 8003fa0:	681b      	ldr	r3, [r3, #0]
 8003fa2:	68ba      	ldr	r2, [r7, #8]
 8003fa4:	429a      	cmp	r2, r3
 8003fa6:	d202      	bcs.n	8003fae <prvAddCurrentTaskToDelayedList+0xa6>
					xNextTaskUnblockTime = xTimeToWake;
 8003fa8:	4a09      	ldr	r2, [pc, #36]	; (8003fd0 <prvAddCurrentTaskToDelayedList+0xc8>)
 8003faa:	68bb      	ldr	r3, [r7, #8]
 8003fac:	6013      	str	r3, [r2, #0]
}
 8003fae:	bf00      	nop
 8003fb0:	3710      	adds	r7, #16
 8003fb2:	46bd      	mov	sp, r7
 8003fb4:	bd80      	pop	{r7, pc}
 8003fb6:	bf00      	nop
 8003fb8:	200004ac 	.word	0x200004ac
 8003fbc:	200003a8 	.word	0x200003a8
 8003fc0:	200004b0 	.word	0x200004b0
 8003fc4:	20000494 	.word	0x20000494
 8003fc8:	20000464 	.word	0x20000464
 8003fcc:	20000460 	.word	0x20000460
 8003fd0:	200004c8 	.word	0x200004c8

08003fd4 <pxPortInitialiseStack>:

/*
 * See header file for description.
 */
StackType_t *pxPortInitialiseStack( StackType_t *pxTopOfStack, TaskFunction_t pxCode, void *pvParameters )
{
 8003fd4:	b480      	push	{r7}
 8003fd6:	b085      	sub	sp, #20
 8003fd8:	af00      	add	r7, sp, #0
 8003fda:	60f8      	str	r0, [r7, #12]
 8003fdc:	60b9      	str	r1, [r7, #8]
 8003fde:	607a      	str	r2, [r7, #4]
	/* Simulate the stack frame as it would be created by a context switch
	interrupt. */

	/* Offset added to account for the way the MCU uses the stack on entry/exit
	of interrupts, and to ensure alignment. */
	pxTopOfStack--;
 8003fe0:	68fb      	ldr	r3, [r7, #12]
 8003fe2:	3b04      	subs	r3, #4
 8003fe4:	60fb      	str	r3, [r7, #12]

	*pxTopOfStack = portINITIAL_XPSR;	/* xPSR */
 8003fe6:	68fb      	ldr	r3, [r7, #12]
 8003fe8:	f04f 7280 	mov.w	r2, #16777216	; 0x1000000
 8003fec:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
 8003fee:	68fb      	ldr	r3, [r7, #12]
 8003ff0:	3b04      	subs	r3, #4
 8003ff2:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( ( StackType_t ) pxCode ) & portSTART_ADDRESS_MASK;	/* PC */
 8003ff4:	68bb      	ldr	r3, [r7, #8]
 8003ff6:	f023 0201 	bic.w	r2, r3, #1
 8003ffa:	68fb      	ldr	r3, [r7, #12]
 8003ffc:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
 8003ffe:	68fb      	ldr	r3, [r7, #12]
 8004000:	3b04      	subs	r3, #4
 8004002:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) portTASK_RETURN_ADDRESS;	/* LR */
 8004004:	4a0c      	ldr	r2, [pc, #48]	; (8004038 <pxPortInitialiseStack+0x64>)
 8004006:	68fb      	ldr	r3, [r7, #12]
 8004008:	601a      	str	r2, [r3, #0]

	/* Save code space by skipping register initialisation. */
	pxTopOfStack -= 5;	/* R12, R3, R2 and R1. */
 800400a:	68fb      	ldr	r3, [r7, #12]
 800400c:	3b14      	subs	r3, #20
 800400e:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) pvParameters;	/* R0 */
 8004010:	687a      	ldr	r2, [r7, #4]
 8004012:	68fb      	ldr	r3, [r7, #12]
 8004014:	601a      	str	r2, [r3, #0]

	/* A save method is being used that requires each task to maintain its
	own exec return value. */
	pxTopOfStack--;
 8004016:	68fb      	ldr	r3, [r7, #12]
 8004018:	3b04      	subs	r3, #4
 800401a:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = portINITIAL_EXC_RETURN;
 800401c:	68fb      	ldr	r3, [r7, #12]
 800401e:	f06f 0202 	mvn.w	r2, #2
 8004022:	601a      	str	r2, [r3, #0]

	pxTopOfStack -= 8;	/* R11, R10, R9, R8, R7, R6, R5 and R4. */
 8004024:	68fb      	ldr	r3, [r7, #12]
 8004026:	3b20      	subs	r3, #32
 8004028:	60fb      	str	r3, [r7, #12]

	return pxTopOfStack;
 800402a:	68fb      	ldr	r3, [r7, #12]
}
 800402c:	4618      	mov	r0, r3
 800402e:	3714      	adds	r7, #20
 8004030:	46bd      	mov	sp, r7
 8004032:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004036:	4770      	bx	lr
 8004038:	0800403d 	.word	0x0800403d

0800403c <prvTaskExitError>:
/*-----------------------------------------------------------*/

static void prvTaskExitError( void )
{
 800403c:	b480      	push	{r7}
 800403e:	b085      	sub	sp, #20
 8004040:	af00      	add	r7, sp, #0
volatile uint32_t ulDummy = 0;
 8004042:	2300      	movs	r3, #0
 8004044:	607b      	str	r3, [r7, #4]
	its caller as there is nothing to return to.  If a task wants to exit it
	should instead call vTaskDelete( NULL ).

	Artificially force an assert() to be triggered if configASSERT() is
	defined, then stop here so application writers can catch the error. */
	configASSERT( uxCriticalNesting == ~0UL );
 8004046:	4b12      	ldr	r3, [pc, #72]	; (8004090 <prvTaskExitError+0x54>)
 8004048:	681b      	ldr	r3, [r3, #0]
 800404a:	f1b3 3fff 	cmp.w	r3, #4294967295
 800404e:	d00a      	beq.n	8004066 <prvTaskExitError+0x2a>
	__asm volatile
 8004050:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004054:	f383 8811 	msr	BASEPRI, r3
 8004058:	f3bf 8f6f 	isb	sy
 800405c:	f3bf 8f4f 	dsb	sy
 8004060:	60fb      	str	r3, [r7, #12]
}
 8004062:	bf00      	nop
 8004064:	e7fe      	b.n	8004064 <prvTaskExitError+0x28>
	__asm volatile
 8004066:	f04f 0350 	mov.w	r3, #80	; 0x50
 800406a:	f383 8811 	msr	BASEPRI, r3
 800406e:	f3bf 8f6f 	isb	sy
 8004072:	f3bf 8f4f 	dsb	sy
 8004076:	60bb      	str	r3, [r7, #8]
}
 8004078:	bf00      	nop
	portDISABLE_INTERRUPTS();
	while( ulDummy == 0 )
 800407a:	bf00      	nop
 800407c:	687b      	ldr	r3, [r7, #4]
 800407e:	2b00      	cmp	r3, #0
 8004080:	d0fc      	beq.n	800407c <prvTaskExitError+0x40>
		about code appearing after this function is called - making ulDummy
		volatile makes the compiler think the function could return and
		therefore not output an 'unreachable code' warning for code that appears
		after it. */
	}
}
 8004082:	bf00      	nop
 8004084:	bf00      	nop
 8004086:	3714      	adds	r7, #20
 8004088:	46bd      	mov	sp, r7
 800408a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800408e:	4770      	bx	lr
 8004090:	2000000c 	.word	0x2000000c
	...

080040a0 <SVC_Handler>:
/*-----------------------------------------------------------*/

void vPortSVCHandler( void )
{
	__asm volatile (
 80040a0:	4b07      	ldr	r3, [pc, #28]	; (80040c0 <pxCurrentTCBConst2>)
 80040a2:	6819      	ldr	r1, [r3, #0]
 80040a4:	6808      	ldr	r0, [r1, #0]
 80040a6:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80040aa:	f380 8809 	msr	PSP, r0
 80040ae:	f3bf 8f6f 	isb	sy
 80040b2:	f04f 0000 	mov.w	r0, #0
 80040b6:	f380 8811 	msr	BASEPRI, r0
 80040ba:	4770      	bx	lr
 80040bc:	f3af 8000 	nop.w

080040c0 <pxCurrentTCBConst2>:
 80040c0:	200003a8 	.word	0x200003a8
					"	bx r14							\n"
					"									\n"
					"	.align 4						\n"
					"pxCurrentTCBConst2: .word pxCurrentTCB				\n"
				);
}
 80040c4:	bf00      	nop
 80040c6:	bf00      	nop

080040c8 <prvPortStartFirstTask>:
{
	/* Start the first task.  This also clears the bit that indicates the FPU is
	in use in case the FPU was used before the scheduler was started - which
	would otherwise result in the unnecessary leaving of space in the SVC stack
	for lazy saving of FPU registers. */
	__asm volatile(
 80040c8:	4808      	ldr	r0, [pc, #32]	; (80040ec <prvPortStartFirstTask+0x24>)
 80040ca:	6800      	ldr	r0, [r0, #0]
 80040cc:	6800      	ldr	r0, [r0, #0]
 80040ce:	f380 8808 	msr	MSP, r0
 80040d2:	f04f 0000 	mov.w	r0, #0
 80040d6:	f380 8814 	msr	CONTROL, r0
 80040da:	b662      	cpsie	i
 80040dc:	b661      	cpsie	f
 80040de:	f3bf 8f4f 	dsb	sy
 80040e2:	f3bf 8f6f 	isb	sy
 80040e6:	df00      	svc	0
 80040e8:	bf00      	nop
					" dsb					\n"
					" isb					\n"
					" svc 0					\n" /* System call to start first task. */
					" nop					\n"
				);
}
 80040ea:	bf00      	nop
 80040ec:	e000ed08 	.word	0xe000ed08

080040f0 <xPortStartScheduler>:

/*
 * See header file for description.
 */
BaseType_t xPortStartScheduler( void )
{
 80040f0:	b580      	push	{r7, lr}
 80040f2:	b086      	sub	sp, #24
 80040f4:	af00      	add	r7, sp, #0
	configASSERT( configMAX_SYSCALL_INTERRUPT_PRIORITY );

	/* This port can be used on all revisions of the Cortex-M7 core other than
	the r0p1 parts.  r0p1 parts should use the port from the
	/source/portable/GCC/ARM_CM7/r0p1 directory. */
	configASSERT( portCPUID != portCORTEX_M7_r0p1_ID );
 80040f6:	4b46      	ldr	r3, [pc, #280]	; (8004210 <xPortStartScheduler+0x120>)
 80040f8:	681b      	ldr	r3, [r3, #0]
 80040fa:	4a46      	ldr	r2, [pc, #280]	; (8004214 <xPortStartScheduler+0x124>)
 80040fc:	4293      	cmp	r3, r2
 80040fe:	d10a      	bne.n	8004116 <xPortStartScheduler+0x26>
	__asm volatile
 8004100:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004104:	f383 8811 	msr	BASEPRI, r3
 8004108:	f3bf 8f6f 	isb	sy
 800410c:	f3bf 8f4f 	dsb	sy
 8004110:	613b      	str	r3, [r7, #16]
}
 8004112:	bf00      	nop
 8004114:	e7fe      	b.n	8004114 <xPortStartScheduler+0x24>
	configASSERT( portCPUID != portCORTEX_M7_r0p0_ID );
 8004116:	4b3e      	ldr	r3, [pc, #248]	; (8004210 <xPortStartScheduler+0x120>)
 8004118:	681b      	ldr	r3, [r3, #0]
 800411a:	4a3f      	ldr	r2, [pc, #252]	; (8004218 <xPortStartScheduler+0x128>)
 800411c:	4293      	cmp	r3, r2
 800411e:	d10a      	bne.n	8004136 <xPortStartScheduler+0x46>
	__asm volatile
 8004120:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004124:	f383 8811 	msr	BASEPRI, r3
 8004128:	f3bf 8f6f 	isb	sy
 800412c:	f3bf 8f4f 	dsb	sy
 8004130:	60fb      	str	r3, [r7, #12]
}
 8004132:	bf00      	nop
 8004134:	e7fe      	b.n	8004134 <xPortStartScheduler+0x44>

	#if( configASSERT_DEFINED == 1 )
	{
		volatile uint32_t ulOriginalPriority;
		volatile uint8_t * const pucFirstUserPriorityRegister = ( volatile uint8_t * const ) ( portNVIC_IP_REGISTERS_OFFSET_16 + portFIRST_USER_INTERRUPT_NUMBER );
 8004136:	4b39      	ldr	r3, [pc, #228]	; (800421c <xPortStartScheduler+0x12c>)
 8004138:	617b      	str	r3, [r7, #20]
		functions can be called.  ISR safe functions are those that end in
		"FromISR".  FreeRTOS maintains separate thread and ISR API functions to
		ensure interrupt entry is as fast and simple as possible.

		Save the interrupt priority value that is about to be clobbered. */
		ulOriginalPriority = *pucFirstUserPriorityRegister;
 800413a:	697b      	ldr	r3, [r7, #20]
 800413c:	781b      	ldrb	r3, [r3, #0]
 800413e:	b2db      	uxtb	r3, r3
 8004140:	607b      	str	r3, [r7, #4]

		/* Determine the number of priority bits available.  First write to all
		possible bits. */
		*pucFirstUserPriorityRegister = portMAX_8_BIT_VALUE;
 8004142:	697b      	ldr	r3, [r7, #20]
 8004144:	22ff      	movs	r2, #255	; 0xff
 8004146:	701a      	strb	r2, [r3, #0]

		/* Read the value back to see how many bits stuck. */
		ucMaxPriorityValue = *pucFirstUserPriorityRegister;
 8004148:	697b      	ldr	r3, [r7, #20]
 800414a:	781b      	ldrb	r3, [r3, #0]
 800414c:	b2db      	uxtb	r3, r3
 800414e:	70fb      	strb	r3, [r7, #3]

		/* Use the same mask on the maximum system call priority. */
		ucMaxSysCallPriority = configMAX_SYSCALL_INTERRUPT_PRIORITY & ucMaxPriorityValue;
 8004150:	78fb      	ldrb	r3, [r7, #3]
 8004152:	b2db      	uxtb	r3, r3
 8004154:	f003 0350 	and.w	r3, r3, #80	; 0x50
 8004158:	b2da      	uxtb	r2, r3
 800415a:	4b31      	ldr	r3, [pc, #196]	; (8004220 <xPortStartScheduler+0x130>)
 800415c:	701a      	strb	r2, [r3, #0]

		/* Calculate the maximum acceptable priority group value for the number
		of bits read back. */
		ulMaxPRIGROUPValue = portMAX_PRIGROUP_BITS;
 800415e:	4b31      	ldr	r3, [pc, #196]	; (8004224 <xPortStartScheduler+0x134>)
 8004160:	2207      	movs	r2, #7
 8004162:	601a      	str	r2, [r3, #0]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 8004164:	e009      	b.n	800417a <xPortStartScheduler+0x8a>
		{
			ulMaxPRIGROUPValue--;
 8004166:	4b2f      	ldr	r3, [pc, #188]	; (8004224 <xPortStartScheduler+0x134>)
 8004168:	681b      	ldr	r3, [r3, #0]
 800416a:	3b01      	subs	r3, #1
 800416c:	4a2d      	ldr	r2, [pc, #180]	; (8004224 <xPortStartScheduler+0x134>)
 800416e:	6013      	str	r3, [r2, #0]
			ucMaxPriorityValue <<= ( uint8_t ) 0x01;
 8004170:	78fb      	ldrb	r3, [r7, #3]
 8004172:	b2db      	uxtb	r3, r3
 8004174:	005b      	lsls	r3, r3, #1
 8004176:	b2db      	uxtb	r3, r3
 8004178:	70fb      	strb	r3, [r7, #3]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 800417a:	78fb      	ldrb	r3, [r7, #3]
 800417c:	b2db      	uxtb	r3, r3
 800417e:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8004182:	2b80      	cmp	r3, #128	; 0x80
 8004184:	d0ef      	beq.n	8004166 <xPortStartScheduler+0x76>
		#ifdef configPRIO_BITS
		{
			/* Check the FreeRTOS configuration that defines the number of
			priority bits matches the number of priority bits actually queried
			from the hardware. */
			configASSERT( ( portMAX_PRIGROUP_BITS - ulMaxPRIGROUPValue ) == configPRIO_BITS );
 8004186:	4b27      	ldr	r3, [pc, #156]	; (8004224 <xPortStartScheduler+0x134>)
 8004188:	681b      	ldr	r3, [r3, #0]
 800418a:	f1c3 0307 	rsb	r3, r3, #7
 800418e:	2b04      	cmp	r3, #4
 8004190:	d00a      	beq.n	80041a8 <xPortStartScheduler+0xb8>
	__asm volatile
 8004192:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004196:	f383 8811 	msr	BASEPRI, r3
 800419a:	f3bf 8f6f 	isb	sy
 800419e:	f3bf 8f4f 	dsb	sy
 80041a2:	60bb      	str	r3, [r7, #8]
}
 80041a4:	bf00      	nop
 80041a6:	e7fe      	b.n	80041a6 <xPortStartScheduler+0xb6>
		}
		#endif

		/* Shift the priority group value back to its position within the AIRCR
		register. */
		ulMaxPRIGROUPValue <<= portPRIGROUP_SHIFT;
 80041a8:	4b1e      	ldr	r3, [pc, #120]	; (8004224 <xPortStartScheduler+0x134>)
 80041aa:	681b      	ldr	r3, [r3, #0]
 80041ac:	021b      	lsls	r3, r3, #8
 80041ae:	4a1d      	ldr	r2, [pc, #116]	; (8004224 <xPortStartScheduler+0x134>)
 80041b0:	6013      	str	r3, [r2, #0]
		ulMaxPRIGROUPValue &= portPRIORITY_GROUP_MASK;
 80041b2:	4b1c      	ldr	r3, [pc, #112]	; (8004224 <xPortStartScheduler+0x134>)
 80041b4:	681b      	ldr	r3, [r3, #0]
 80041b6:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
 80041ba:	4a1a      	ldr	r2, [pc, #104]	; (8004224 <xPortStartScheduler+0x134>)
 80041bc:	6013      	str	r3, [r2, #0]

		/* Restore the clobbered interrupt priority register to its original
		value. */
		*pucFirstUserPriorityRegister = ulOriginalPriority;
 80041be:	687b      	ldr	r3, [r7, #4]
 80041c0:	b2da      	uxtb	r2, r3
 80041c2:	697b      	ldr	r3, [r7, #20]
 80041c4:	701a      	strb	r2, [r3, #0]
	}
	#endif /* conifgASSERT_DEFINED */

	/* Make PendSV and SysTick the lowest priority interrupts. */
	portNVIC_SYSPRI2_REG |= portNVIC_PENDSV_PRI;
 80041c6:	4b18      	ldr	r3, [pc, #96]	; (8004228 <xPortStartScheduler+0x138>)
 80041c8:	681b      	ldr	r3, [r3, #0]
 80041ca:	4a17      	ldr	r2, [pc, #92]	; (8004228 <xPortStartScheduler+0x138>)
 80041cc:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 80041d0:	6013      	str	r3, [r2, #0]
	portNVIC_SYSPRI2_REG |= portNVIC_SYSTICK_PRI;
 80041d2:	4b15      	ldr	r3, [pc, #84]	; (8004228 <xPortStartScheduler+0x138>)
 80041d4:	681b      	ldr	r3, [r3, #0]
 80041d6:	4a14      	ldr	r2, [pc, #80]	; (8004228 <xPortStartScheduler+0x138>)
 80041d8:	f043 4370 	orr.w	r3, r3, #4026531840	; 0xf0000000
 80041dc:	6013      	str	r3, [r2, #0]

	/* Start the timer that generates the tick ISR.  Interrupts are disabled
	here already. */
	vPortSetupTimerInterrupt();
 80041de:	f000 f8dd 	bl	800439c <vPortSetupTimerInterrupt>

	/* Initialise the critical nesting count ready for the first task. */
	uxCriticalNesting = 0;
 80041e2:	4b12      	ldr	r3, [pc, #72]	; (800422c <xPortStartScheduler+0x13c>)
 80041e4:	2200      	movs	r2, #0
 80041e6:	601a      	str	r2, [r3, #0]

	/* Ensure the VFP is enabled - it should be anyway. */
	vPortEnableVFP();
 80041e8:	f000 f8fc 	bl	80043e4 <vPortEnableVFP>

	/* Lazy save always. */
	*( portFPCCR ) |= portASPEN_AND_LSPEN_BITS;
 80041ec:	4b10      	ldr	r3, [pc, #64]	; (8004230 <xPortStartScheduler+0x140>)
 80041ee:	681b      	ldr	r3, [r3, #0]
 80041f0:	4a0f      	ldr	r2, [pc, #60]	; (8004230 <xPortStartScheduler+0x140>)
 80041f2:	f043 4340 	orr.w	r3, r3, #3221225472	; 0xc0000000
 80041f6:	6013      	str	r3, [r2, #0]

	/* Start the first task. */
	prvPortStartFirstTask();
 80041f8:	f7ff ff66 	bl	80040c8 <prvPortStartFirstTask>
	exit error function to prevent compiler warnings about a static function
	not being called in the case that the application writer overrides this
	functionality by defining configTASK_RETURN_ADDRESS.  Call
	vTaskSwitchContext() so link time optimisation does not remove the
	symbol. */
	vTaskSwitchContext();
 80041fc:	f7ff fa82 	bl	8003704 <vTaskSwitchContext>
	prvTaskExitError();
 8004200:	f7ff ff1c 	bl	800403c <prvTaskExitError>

	/* Should not get here! */
	return 0;
 8004204:	2300      	movs	r3, #0
}
 8004206:	4618      	mov	r0, r3
 8004208:	3718      	adds	r7, #24
 800420a:	46bd      	mov	sp, r7
 800420c:	bd80      	pop	{r7, pc}
 800420e:	bf00      	nop
 8004210:	e000ed00 	.word	0xe000ed00
 8004214:	410fc271 	.word	0x410fc271
 8004218:	410fc270 	.word	0x410fc270
 800421c:	e000e400 	.word	0xe000e400
 8004220:	200004d4 	.word	0x200004d4
 8004224:	200004d8 	.word	0x200004d8
 8004228:	e000ed20 	.word	0xe000ed20
 800422c:	2000000c 	.word	0x2000000c
 8004230:	e000ef34 	.word	0xe000ef34

08004234 <vPortEnterCritical>:
	configASSERT( uxCriticalNesting == 1000UL );
}
/*-----------------------------------------------------------*/

void vPortEnterCritical( void )
{
 8004234:	b480      	push	{r7}
 8004236:	b083      	sub	sp, #12
 8004238:	af00      	add	r7, sp, #0
	__asm volatile
 800423a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800423e:	f383 8811 	msr	BASEPRI, r3
 8004242:	f3bf 8f6f 	isb	sy
 8004246:	f3bf 8f4f 	dsb	sy
 800424a:	607b      	str	r3, [r7, #4]
}
 800424c:	bf00      	nop
	portDISABLE_INTERRUPTS();
	uxCriticalNesting++;
 800424e:	4b0f      	ldr	r3, [pc, #60]	; (800428c <vPortEnterCritical+0x58>)
 8004250:	681b      	ldr	r3, [r3, #0]
 8004252:	3301      	adds	r3, #1
 8004254:	4a0d      	ldr	r2, [pc, #52]	; (800428c <vPortEnterCritical+0x58>)
 8004256:	6013      	str	r3, [r2, #0]
	/* This is not the interrupt safe version of the enter critical function so
	assert() if it is being called from an interrupt context.  Only API
	functions that end in "FromISR" can be used in an interrupt.  Only assert if
	the critical nesting count is 1 to protect against recursive calls if the
	assert function also uses a critical section. */
	if( uxCriticalNesting == 1 )
 8004258:	4b0c      	ldr	r3, [pc, #48]	; (800428c <vPortEnterCritical+0x58>)
 800425a:	681b      	ldr	r3, [r3, #0]
 800425c:	2b01      	cmp	r3, #1
 800425e:	d10f      	bne.n	8004280 <vPortEnterCritical+0x4c>
	{
		configASSERT( ( portNVIC_INT_CTRL_REG & portVECTACTIVE_MASK ) == 0 );
 8004260:	4b0b      	ldr	r3, [pc, #44]	; (8004290 <vPortEnterCritical+0x5c>)
 8004262:	681b      	ldr	r3, [r3, #0]
 8004264:	b2db      	uxtb	r3, r3
 8004266:	2b00      	cmp	r3, #0
 8004268:	d00a      	beq.n	8004280 <vPortEnterCritical+0x4c>
	__asm volatile
 800426a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800426e:	f383 8811 	msr	BASEPRI, r3
 8004272:	f3bf 8f6f 	isb	sy
 8004276:	f3bf 8f4f 	dsb	sy
 800427a:	603b      	str	r3, [r7, #0]
}
 800427c:	bf00      	nop
 800427e:	e7fe      	b.n	800427e <vPortEnterCritical+0x4a>
	}
}
 8004280:	bf00      	nop
 8004282:	370c      	adds	r7, #12
 8004284:	46bd      	mov	sp, r7
 8004286:	f85d 7b04 	ldr.w	r7, [sp], #4
 800428a:	4770      	bx	lr
 800428c:	2000000c 	.word	0x2000000c
 8004290:	e000ed04 	.word	0xe000ed04

08004294 <vPortExitCritical>:
/*-----------------------------------------------------------*/

void vPortExitCritical( void )
{
 8004294:	b480      	push	{r7}
 8004296:	b083      	sub	sp, #12
 8004298:	af00      	add	r7, sp, #0
	configASSERT( uxCriticalNesting );
 800429a:	4b12      	ldr	r3, [pc, #72]	; (80042e4 <vPortExitCritical+0x50>)
 800429c:	681b      	ldr	r3, [r3, #0]
 800429e:	2b00      	cmp	r3, #0
 80042a0:	d10a      	bne.n	80042b8 <vPortExitCritical+0x24>
	__asm volatile
 80042a2:	f04f 0350 	mov.w	r3, #80	; 0x50
 80042a6:	f383 8811 	msr	BASEPRI, r3
 80042aa:	f3bf 8f6f 	isb	sy
 80042ae:	f3bf 8f4f 	dsb	sy
 80042b2:	607b      	str	r3, [r7, #4]
}
 80042b4:	bf00      	nop
 80042b6:	e7fe      	b.n	80042b6 <vPortExitCritical+0x22>
	uxCriticalNesting--;
 80042b8:	4b0a      	ldr	r3, [pc, #40]	; (80042e4 <vPortExitCritical+0x50>)
 80042ba:	681b      	ldr	r3, [r3, #0]
 80042bc:	3b01      	subs	r3, #1
 80042be:	4a09      	ldr	r2, [pc, #36]	; (80042e4 <vPortExitCritical+0x50>)
 80042c0:	6013      	str	r3, [r2, #0]
	if( uxCriticalNesting == 0 )
 80042c2:	4b08      	ldr	r3, [pc, #32]	; (80042e4 <vPortExitCritical+0x50>)
 80042c4:	681b      	ldr	r3, [r3, #0]
 80042c6:	2b00      	cmp	r3, #0
 80042c8:	d105      	bne.n	80042d6 <vPortExitCritical+0x42>
 80042ca:	2300      	movs	r3, #0
 80042cc:	603b      	str	r3, [r7, #0]
}
/*-----------------------------------------------------------*/

portFORCE_INLINE static void vPortSetBASEPRI( uint32_t ulNewMaskValue )
{
	__asm volatile
 80042ce:	683b      	ldr	r3, [r7, #0]
 80042d0:	f383 8811 	msr	BASEPRI, r3
	(
		"	msr basepri, %0	" :: "r" ( ulNewMaskValue ) : "memory"
	);
}
 80042d4:	bf00      	nop
	{
		portENABLE_INTERRUPTS();
	}
}
 80042d6:	bf00      	nop
 80042d8:	370c      	adds	r7, #12
 80042da:	46bd      	mov	sp, r7
 80042dc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80042e0:	4770      	bx	lr
 80042e2:	bf00      	nop
 80042e4:	2000000c 	.word	0x2000000c
	...

080042f0 <PendSV_Handler>:

void xPortPendSVHandler( void )
{
	/* This is a naked function. */

	__asm volatile
 80042f0:	f3ef 8009 	mrs	r0, PSP
 80042f4:	f3bf 8f6f 	isb	sy
 80042f8:	4b15      	ldr	r3, [pc, #84]	; (8004350 <pxCurrentTCBConst>)
 80042fa:	681a      	ldr	r2, [r3, #0]
 80042fc:	f01e 0f10 	tst.w	lr, #16
 8004300:	bf08      	it	eq
 8004302:	ed20 8a10 	vstmdbeq	r0!, {s16-s31}
 8004306:	e920 4ff0 	stmdb	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800430a:	6010      	str	r0, [r2, #0]
 800430c:	e92d 0009 	stmdb	sp!, {r0, r3}
 8004310:	f04f 0050 	mov.w	r0, #80	; 0x50
 8004314:	f380 8811 	msr	BASEPRI, r0
 8004318:	f3bf 8f4f 	dsb	sy
 800431c:	f3bf 8f6f 	isb	sy
 8004320:	f7ff f9f0 	bl	8003704 <vTaskSwitchContext>
 8004324:	f04f 0000 	mov.w	r0, #0
 8004328:	f380 8811 	msr	BASEPRI, r0
 800432c:	bc09      	pop	{r0, r3}
 800432e:	6819      	ldr	r1, [r3, #0]
 8004330:	6808      	ldr	r0, [r1, #0]
 8004332:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8004336:	f01e 0f10 	tst.w	lr, #16
 800433a:	bf08      	it	eq
 800433c:	ecb0 8a10 	vldmiaeq	r0!, {s16-s31}
 8004340:	f380 8809 	msr	PSP, r0
 8004344:	f3bf 8f6f 	isb	sy
 8004348:	4770      	bx	lr
 800434a:	bf00      	nop
 800434c:	f3af 8000 	nop.w

08004350 <pxCurrentTCBConst>:
 8004350:	200003a8 	.word	0x200003a8
	"										\n"
	"	.align 4							\n"
	"pxCurrentTCBConst: .word pxCurrentTCB	\n"
	::"i"(configMAX_SYSCALL_INTERRUPT_PRIORITY)
	);
}
 8004354:	bf00      	nop
 8004356:	bf00      	nop

08004358 <xPortSysTickHandler>:
/*-----------------------------------------------------------*/

void xPortSysTickHandler( void )
{
 8004358:	b580      	push	{r7, lr}
 800435a:	b082      	sub	sp, #8
 800435c:	af00      	add	r7, sp, #0
	__asm volatile
 800435e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004362:	f383 8811 	msr	BASEPRI, r3
 8004366:	f3bf 8f6f 	isb	sy
 800436a:	f3bf 8f4f 	dsb	sy
 800436e:	607b      	str	r3, [r7, #4]
}
 8004370:	bf00      	nop
	save and then restore the interrupt mask value as its value is already
	known. */
	portDISABLE_INTERRUPTS();
	{
		/* Increment the RTOS tick. */
		if( xTaskIncrementTick() != pdFALSE )
 8004372:	f7ff f90f 	bl	8003594 <xTaskIncrementTick>
 8004376:	4603      	mov	r3, r0
 8004378:	2b00      	cmp	r3, #0
 800437a:	d003      	beq.n	8004384 <xPortSysTickHandler+0x2c>
		{
			/* A context switch is required.  Context switching is performed in
			the PendSV interrupt.  Pend the PendSV interrupt. */
			portNVIC_INT_CTRL_REG = portNVIC_PENDSVSET_BIT;
 800437c:	4b06      	ldr	r3, [pc, #24]	; (8004398 <xPortSysTickHandler+0x40>)
 800437e:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8004382:	601a      	str	r2, [r3, #0]
 8004384:	2300      	movs	r3, #0
 8004386:	603b      	str	r3, [r7, #0]
	__asm volatile
 8004388:	683b      	ldr	r3, [r7, #0]
 800438a:	f383 8811 	msr	BASEPRI, r3
}
 800438e:	bf00      	nop
		}
	}
	portENABLE_INTERRUPTS();
}
 8004390:	bf00      	nop
 8004392:	3708      	adds	r7, #8
 8004394:	46bd      	mov	sp, r7
 8004396:	bd80      	pop	{r7, pc}
 8004398:	e000ed04 	.word	0xe000ed04

0800439c <vPortSetupTimerInterrupt>:
/*
 * Setup the systick timer to generate the tick interrupts at the required
 * frequency.
 */
__attribute__(( weak )) void vPortSetupTimerInterrupt( void )
{
 800439c:	b480      	push	{r7}
 800439e:	af00      	add	r7, sp, #0
		ulStoppedTimerCompensation = portMISSED_COUNTS_FACTOR / ( configCPU_CLOCK_HZ / configSYSTICK_CLOCK_HZ );
	}
	#endif /* configUSE_TICKLESS_IDLE */

	/* Stop and clear the SysTick. */
	portNVIC_SYSTICK_CTRL_REG = 0UL;
 80043a0:	4b0b      	ldr	r3, [pc, #44]	; (80043d0 <vPortSetupTimerInterrupt+0x34>)
 80043a2:	2200      	movs	r2, #0
 80043a4:	601a      	str	r2, [r3, #0]
	portNVIC_SYSTICK_CURRENT_VALUE_REG = 0UL;
 80043a6:	4b0b      	ldr	r3, [pc, #44]	; (80043d4 <vPortSetupTimerInterrupt+0x38>)
 80043a8:	2200      	movs	r2, #0
 80043aa:	601a      	str	r2, [r3, #0]

	/* Configure SysTick to interrupt at the requested rate. */
	portNVIC_SYSTICK_LOAD_REG = ( configSYSTICK_CLOCK_HZ / configTICK_RATE_HZ ) - 1UL;
 80043ac:	4b0a      	ldr	r3, [pc, #40]	; (80043d8 <vPortSetupTimerInterrupt+0x3c>)
 80043ae:	681b      	ldr	r3, [r3, #0]
 80043b0:	4a0a      	ldr	r2, [pc, #40]	; (80043dc <vPortSetupTimerInterrupt+0x40>)
 80043b2:	fba2 2303 	umull	r2, r3, r2, r3
 80043b6:	099b      	lsrs	r3, r3, #6
 80043b8:	4a09      	ldr	r2, [pc, #36]	; (80043e0 <vPortSetupTimerInterrupt+0x44>)
 80043ba:	3b01      	subs	r3, #1
 80043bc:	6013      	str	r3, [r2, #0]
	portNVIC_SYSTICK_CTRL_REG = ( portNVIC_SYSTICK_CLK_BIT | portNVIC_SYSTICK_INT_BIT | portNVIC_SYSTICK_ENABLE_BIT );
 80043be:	4b04      	ldr	r3, [pc, #16]	; (80043d0 <vPortSetupTimerInterrupt+0x34>)
 80043c0:	2207      	movs	r2, #7
 80043c2:	601a      	str	r2, [r3, #0]
}
 80043c4:	bf00      	nop
 80043c6:	46bd      	mov	sp, r7
 80043c8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80043cc:	4770      	bx	lr
 80043ce:	bf00      	nop
 80043d0:	e000e010 	.word	0xe000e010
 80043d4:	e000e018 	.word	0xe000e018
 80043d8:	20000000 	.word	0x20000000
 80043dc:	10624dd3 	.word	0x10624dd3
 80043e0:	e000e014 	.word	0xe000e014

080043e4 <vPortEnableVFP>:
/*-----------------------------------------------------------*/

/* This is a naked function. */
static void vPortEnableVFP( void )
{
	__asm volatile
 80043e4:	f8df 000c 	ldr.w	r0, [pc, #12]	; 80043f4 <vPortEnableVFP+0x10>
 80043e8:	6801      	ldr	r1, [r0, #0]
 80043ea:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 80043ee:	6001      	str	r1, [r0, #0]
 80043f0:	4770      	bx	lr
		"								\n"
		"	orr r1, r1, #( 0xf << 20 )	\n" /* Enable CP10 and CP11 coprocessors, then save back. */
		"	str r1, [r0]				\n"
		"	bx r14						"
	);
}
 80043f2:	bf00      	nop
 80043f4:	e000ed88 	.word	0xe000ed88

080043f8 <pvPortMalloc>:
static size_t xBlockAllocatedBit = 0;

/*-----------------------------------------------------------*/

void *pvPortMalloc( size_t xWantedSize )
{
 80043f8:	b580      	push	{r7, lr}
 80043fa:	b08a      	sub	sp, #40	; 0x28
 80043fc:	af00      	add	r7, sp, #0
 80043fe:	6078      	str	r0, [r7, #4]
BlockLink_t *pxBlock, *pxPreviousBlock, *pxNewBlockLink;
void *pvReturn = NULL;
 8004400:	2300      	movs	r3, #0
 8004402:	61fb      	str	r3, [r7, #28]

	vTaskSuspendAll();
 8004404:	f7ff f81c 	bl	8003440 <vTaskSuspendAll>
	{
		/* If this is the first call to malloc then the heap will require
		initialisation to setup the list of free blocks. */
		if( pxEnd == NULL )
 8004408:	4b5b      	ldr	r3, [pc, #364]	; (8004578 <pvPortMalloc+0x180>)
 800440a:	681b      	ldr	r3, [r3, #0]
 800440c:	2b00      	cmp	r3, #0
 800440e:	d101      	bne.n	8004414 <pvPortMalloc+0x1c>
		{
			prvHeapInit();
 8004410:	f000 f920 	bl	8004654 <prvHeapInit>

		/* Check the requested block size is not so large that the top bit is
		set.  The top bit of the block size member of the BlockLink_t structure
		is used to determine who owns the block - the application or the
		kernel, so it must be free. */
		if( ( xWantedSize & xBlockAllocatedBit ) == 0 )
 8004414:	4b59      	ldr	r3, [pc, #356]	; (800457c <pvPortMalloc+0x184>)
 8004416:	681a      	ldr	r2, [r3, #0]
 8004418:	687b      	ldr	r3, [r7, #4]
 800441a:	4013      	ands	r3, r2
 800441c:	2b00      	cmp	r3, #0
 800441e:	f040 8093 	bne.w	8004548 <pvPortMalloc+0x150>
		{
			/* The wanted size is increased so it can contain a BlockLink_t
			structure in addition to the requested amount of bytes. */
			if( xWantedSize > 0 )
 8004422:	687b      	ldr	r3, [r7, #4]
 8004424:	2b00      	cmp	r3, #0
 8004426:	d01d      	beq.n	8004464 <pvPortMalloc+0x6c>
			{
				xWantedSize += xHeapStructSize;
 8004428:	2208      	movs	r2, #8
 800442a:	687b      	ldr	r3, [r7, #4]
 800442c:	4413      	add	r3, r2
 800442e:	607b      	str	r3, [r7, #4]

				/* Ensure that blocks are always aligned to the required number
				of bytes. */
				if( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) != 0x00 )
 8004430:	687b      	ldr	r3, [r7, #4]
 8004432:	f003 0307 	and.w	r3, r3, #7
 8004436:	2b00      	cmp	r3, #0
 8004438:	d014      	beq.n	8004464 <pvPortMalloc+0x6c>
				{
					/* Byte alignment required. */
					xWantedSize += ( portBYTE_ALIGNMENT - ( xWantedSize & portBYTE_ALIGNMENT_MASK ) );
 800443a:	687b      	ldr	r3, [r7, #4]
 800443c:	f023 0307 	bic.w	r3, r3, #7
 8004440:	3308      	adds	r3, #8
 8004442:	607b      	str	r3, [r7, #4]
					configASSERT( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) == 0 );
 8004444:	687b      	ldr	r3, [r7, #4]
 8004446:	f003 0307 	and.w	r3, r3, #7
 800444a:	2b00      	cmp	r3, #0
 800444c:	d00a      	beq.n	8004464 <pvPortMalloc+0x6c>
	__asm volatile
 800444e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004452:	f383 8811 	msr	BASEPRI, r3
 8004456:	f3bf 8f6f 	isb	sy
 800445a:	f3bf 8f4f 	dsb	sy
 800445e:	617b      	str	r3, [r7, #20]
}
 8004460:	bf00      	nop
 8004462:	e7fe      	b.n	8004462 <pvPortMalloc+0x6a>
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}

			if( ( xWantedSize > 0 ) && ( xWantedSize <= xFreeBytesRemaining ) )
 8004464:	687b      	ldr	r3, [r7, #4]
 8004466:	2b00      	cmp	r3, #0
 8004468:	d06e      	beq.n	8004548 <pvPortMalloc+0x150>
 800446a:	4b45      	ldr	r3, [pc, #276]	; (8004580 <pvPortMalloc+0x188>)
 800446c:	681b      	ldr	r3, [r3, #0]
 800446e:	687a      	ldr	r2, [r7, #4]
 8004470:	429a      	cmp	r2, r3
 8004472:	d869      	bhi.n	8004548 <pvPortMalloc+0x150>
			{
				/* Traverse the list from the start	(lowest address) block until
				one	of adequate size is found. */
				pxPreviousBlock = &xStart;
 8004474:	4b43      	ldr	r3, [pc, #268]	; (8004584 <pvPortMalloc+0x18c>)
 8004476:	623b      	str	r3, [r7, #32]
				pxBlock = xStart.pxNextFreeBlock;
 8004478:	4b42      	ldr	r3, [pc, #264]	; (8004584 <pvPortMalloc+0x18c>)
 800447a:	681b      	ldr	r3, [r3, #0]
 800447c:	627b      	str	r3, [r7, #36]	; 0x24
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 800447e:	e004      	b.n	800448a <pvPortMalloc+0x92>
				{
					pxPreviousBlock = pxBlock;
 8004480:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004482:	623b      	str	r3, [r7, #32]
					pxBlock = pxBlock->pxNextFreeBlock;
 8004484:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004486:	681b      	ldr	r3, [r3, #0]
 8004488:	627b      	str	r3, [r7, #36]	; 0x24
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 800448a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800448c:	685b      	ldr	r3, [r3, #4]
 800448e:	687a      	ldr	r2, [r7, #4]
 8004490:	429a      	cmp	r2, r3
 8004492:	d903      	bls.n	800449c <pvPortMalloc+0xa4>
 8004494:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004496:	681b      	ldr	r3, [r3, #0]
 8004498:	2b00      	cmp	r3, #0
 800449a:	d1f1      	bne.n	8004480 <pvPortMalloc+0x88>
				}

				/* If the end marker was reached then a block of adequate size
				was	not found. */
				if( pxBlock != pxEnd )
 800449c:	4b36      	ldr	r3, [pc, #216]	; (8004578 <pvPortMalloc+0x180>)
 800449e:	681b      	ldr	r3, [r3, #0]
 80044a0:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80044a2:	429a      	cmp	r2, r3
 80044a4:	d050      	beq.n	8004548 <pvPortMalloc+0x150>
				{
					/* Return the memory space pointed to - jumping over the
					BlockLink_t structure at its start. */
					pvReturn = ( void * ) ( ( ( uint8_t * ) pxPreviousBlock->pxNextFreeBlock ) + xHeapStructSize );
 80044a6:	6a3b      	ldr	r3, [r7, #32]
 80044a8:	681b      	ldr	r3, [r3, #0]
 80044aa:	2208      	movs	r2, #8
 80044ac:	4413      	add	r3, r2
 80044ae:	61fb      	str	r3, [r7, #28]

					/* This block is being returned for use so must be taken out
					of the list of free blocks. */
					pxPreviousBlock->pxNextFreeBlock = pxBlock->pxNextFreeBlock;
 80044b0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80044b2:	681a      	ldr	r2, [r3, #0]
 80044b4:	6a3b      	ldr	r3, [r7, #32]
 80044b6:	601a      	str	r2, [r3, #0]

					/* If the block is larger than required it can be split into
					two. */
					if( ( pxBlock->xBlockSize - xWantedSize ) > heapMINIMUM_BLOCK_SIZE )
 80044b8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80044ba:	685a      	ldr	r2, [r3, #4]
 80044bc:	687b      	ldr	r3, [r7, #4]
 80044be:	1ad2      	subs	r2, r2, r3
 80044c0:	2308      	movs	r3, #8
 80044c2:	005b      	lsls	r3, r3, #1
 80044c4:	429a      	cmp	r2, r3
 80044c6:	d91f      	bls.n	8004508 <pvPortMalloc+0x110>
					{
						/* This block is to be split into two.  Create a new
						block following the number of bytes requested. The void
						cast is used to prevent byte alignment warnings from the
						compiler. */
						pxNewBlockLink = ( void * ) ( ( ( uint8_t * ) pxBlock ) + xWantedSize );
 80044c8:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80044ca:	687b      	ldr	r3, [r7, #4]
 80044cc:	4413      	add	r3, r2
 80044ce:	61bb      	str	r3, [r7, #24]
						configASSERT( ( ( ( size_t ) pxNewBlockLink ) & portBYTE_ALIGNMENT_MASK ) == 0 );
 80044d0:	69bb      	ldr	r3, [r7, #24]
 80044d2:	f003 0307 	and.w	r3, r3, #7
 80044d6:	2b00      	cmp	r3, #0
 80044d8:	d00a      	beq.n	80044f0 <pvPortMalloc+0xf8>
	__asm volatile
 80044da:	f04f 0350 	mov.w	r3, #80	; 0x50
 80044de:	f383 8811 	msr	BASEPRI, r3
 80044e2:	f3bf 8f6f 	isb	sy
 80044e6:	f3bf 8f4f 	dsb	sy
 80044ea:	613b      	str	r3, [r7, #16]
}
 80044ec:	bf00      	nop
 80044ee:	e7fe      	b.n	80044ee <pvPortMalloc+0xf6>

						/* Calculate the sizes of two blocks split from the
						single block. */
						pxNewBlockLink->xBlockSize = pxBlock->xBlockSize - xWantedSize;
 80044f0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80044f2:	685a      	ldr	r2, [r3, #4]
 80044f4:	687b      	ldr	r3, [r7, #4]
 80044f6:	1ad2      	subs	r2, r2, r3
 80044f8:	69bb      	ldr	r3, [r7, #24]
 80044fa:	605a      	str	r2, [r3, #4]
						pxBlock->xBlockSize = xWantedSize;
 80044fc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80044fe:	687a      	ldr	r2, [r7, #4]
 8004500:	605a      	str	r2, [r3, #4]

						/* Insert the new block into the list of free blocks. */
						prvInsertBlockIntoFreeList( pxNewBlockLink );
 8004502:	69b8      	ldr	r0, [r7, #24]
 8004504:	f000 f908 	bl	8004718 <prvInsertBlockIntoFreeList>
					else
					{
						mtCOVERAGE_TEST_MARKER();
					}

					xFreeBytesRemaining -= pxBlock->xBlockSize;
 8004508:	4b1d      	ldr	r3, [pc, #116]	; (8004580 <pvPortMalloc+0x188>)
 800450a:	681a      	ldr	r2, [r3, #0]
 800450c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800450e:	685b      	ldr	r3, [r3, #4]
 8004510:	1ad3      	subs	r3, r2, r3
 8004512:	4a1b      	ldr	r2, [pc, #108]	; (8004580 <pvPortMalloc+0x188>)
 8004514:	6013      	str	r3, [r2, #0]

					if( xFreeBytesRemaining < xMinimumEverFreeBytesRemaining )
 8004516:	4b1a      	ldr	r3, [pc, #104]	; (8004580 <pvPortMalloc+0x188>)
 8004518:	681a      	ldr	r2, [r3, #0]
 800451a:	4b1b      	ldr	r3, [pc, #108]	; (8004588 <pvPortMalloc+0x190>)
 800451c:	681b      	ldr	r3, [r3, #0]
 800451e:	429a      	cmp	r2, r3
 8004520:	d203      	bcs.n	800452a <pvPortMalloc+0x132>
					{
						xMinimumEverFreeBytesRemaining = xFreeBytesRemaining;
 8004522:	4b17      	ldr	r3, [pc, #92]	; (8004580 <pvPortMalloc+0x188>)
 8004524:	681b      	ldr	r3, [r3, #0]
 8004526:	4a18      	ldr	r2, [pc, #96]	; (8004588 <pvPortMalloc+0x190>)
 8004528:	6013      	str	r3, [r2, #0]
						mtCOVERAGE_TEST_MARKER();
					}

					/* The block is being returned - it is allocated and owned
					by the application and has no "next" block. */
					pxBlock->xBlockSize |= xBlockAllocatedBit;
 800452a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800452c:	685a      	ldr	r2, [r3, #4]
 800452e:	4b13      	ldr	r3, [pc, #76]	; (800457c <pvPortMalloc+0x184>)
 8004530:	681b      	ldr	r3, [r3, #0]
 8004532:	431a      	orrs	r2, r3
 8004534:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004536:	605a      	str	r2, [r3, #4]
					pxBlock->pxNextFreeBlock = NULL;
 8004538:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800453a:	2200      	movs	r2, #0
 800453c:	601a      	str	r2, [r3, #0]
					xNumberOfSuccessfulAllocations++;
 800453e:	4b13      	ldr	r3, [pc, #76]	; (800458c <pvPortMalloc+0x194>)
 8004540:	681b      	ldr	r3, [r3, #0]
 8004542:	3301      	adds	r3, #1
 8004544:	4a11      	ldr	r2, [pc, #68]	; (800458c <pvPortMalloc+0x194>)
 8004546:	6013      	str	r3, [r2, #0]
			mtCOVERAGE_TEST_MARKER();
		}

		traceMALLOC( pvReturn, xWantedSize );
	}
	( void ) xTaskResumeAll();
 8004548:	f7fe ff88 	bl	800345c <xTaskResumeAll>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif

	configASSERT( ( ( ( size_t ) pvReturn ) & ( size_t ) portBYTE_ALIGNMENT_MASK ) == 0 );
 800454c:	69fb      	ldr	r3, [r7, #28]
 800454e:	f003 0307 	and.w	r3, r3, #7
 8004552:	2b00      	cmp	r3, #0
 8004554:	d00a      	beq.n	800456c <pvPortMalloc+0x174>
	__asm volatile
 8004556:	f04f 0350 	mov.w	r3, #80	; 0x50
 800455a:	f383 8811 	msr	BASEPRI, r3
 800455e:	f3bf 8f6f 	isb	sy
 8004562:	f3bf 8f4f 	dsb	sy
 8004566:	60fb      	str	r3, [r7, #12]
}
 8004568:	bf00      	nop
 800456a:	e7fe      	b.n	800456a <pvPortMalloc+0x172>
	return pvReturn;
 800456c:	69fb      	ldr	r3, [r7, #28]
}
 800456e:	4618      	mov	r0, r3
 8004570:	3728      	adds	r7, #40	; 0x28
 8004572:	46bd      	mov	sp, r7
 8004574:	bd80      	pop	{r7, pc}
 8004576:	bf00      	nop
 8004578:	200040e4 	.word	0x200040e4
 800457c:	200040f8 	.word	0x200040f8
 8004580:	200040e8 	.word	0x200040e8
 8004584:	200040dc 	.word	0x200040dc
 8004588:	200040ec 	.word	0x200040ec
 800458c:	200040f0 	.word	0x200040f0

08004590 <vPortFree>:
/*-----------------------------------------------------------*/

void vPortFree( void *pv )
{
 8004590:	b580      	push	{r7, lr}
 8004592:	b086      	sub	sp, #24
 8004594:	af00      	add	r7, sp, #0
 8004596:	6078      	str	r0, [r7, #4]
uint8_t *puc = ( uint8_t * ) pv;
 8004598:	687b      	ldr	r3, [r7, #4]
 800459a:	617b      	str	r3, [r7, #20]
BlockLink_t *pxLink;

	if( pv != NULL )
 800459c:	687b      	ldr	r3, [r7, #4]
 800459e:	2b00      	cmp	r3, #0
 80045a0:	d04d      	beq.n	800463e <vPortFree+0xae>
	{
		/* The memory being freed will have an BlockLink_t structure immediately
		before it. */
		puc -= xHeapStructSize;
 80045a2:	2308      	movs	r3, #8
 80045a4:	425b      	negs	r3, r3
 80045a6:	697a      	ldr	r2, [r7, #20]
 80045a8:	4413      	add	r3, r2
 80045aa:	617b      	str	r3, [r7, #20]

		/* This casting is to keep the compiler from issuing warnings. */
		pxLink = ( void * ) puc;
 80045ac:	697b      	ldr	r3, [r7, #20]
 80045ae:	613b      	str	r3, [r7, #16]

		/* Check the block is actually allocated. */
		configASSERT( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 );
 80045b0:	693b      	ldr	r3, [r7, #16]
 80045b2:	685a      	ldr	r2, [r3, #4]
 80045b4:	4b24      	ldr	r3, [pc, #144]	; (8004648 <vPortFree+0xb8>)
 80045b6:	681b      	ldr	r3, [r3, #0]
 80045b8:	4013      	ands	r3, r2
 80045ba:	2b00      	cmp	r3, #0
 80045bc:	d10a      	bne.n	80045d4 <vPortFree+0x44>
	__asm volatile
 80045be:	f04f 0350 	mov.w	r3, #80	; 0x50
 80045c2:	f383 8811 	msr	BASEPRI, r3
 80045c6:	f3bf 8f6f 	isb	sy
 80045ca:	f3bf 8f4f 	dsb	sy
 80045ce:	60fb      	str	r3, [r7, #12]
}
 80045d0:	bf00      	nop
 80045d2:	e7fe      	b.n	80045d2 <vPortFree+0x42>
		configASSERT( pxLink->pxNextFreeBlock == NULL );
 80045d4:	693b      	ldr	r3, [r7, #16]
 80045d6:	681b      	ldr	r3, [r3, #0]
 80045d8:	2b00      	cmp	r3, #0
 80045da:	d00a      	beq.n	80045f2 <vPortFree+0x62>
	__asm volatile
 80045dc:	f04f 0350 	mov.w	r3, #80	; 0x50
 80045e0:	f383 8811 	msr	BASEPRI, r3
 80045e4:	f3bf 8f6f 	isb	sy
 80045e8:	f3bf 8f4f 	dsb	sy
 80045ec:	60bb      	str	r3, [r7, #8]
}
 80045ee:	bf00      	nop
 80045f0:	e7fe      	b.n	80045f0 <vPortFree+0x60>

		if( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 )
 80045f2:	693b      	ldr	r3, [r7, #16]
 80045f4:	685a      	ldr	r2, [r3, #4]
 80045f6:	4b14      	ldr	r3, [pc, #80]	; (8004648 <vPortFree+0xb8>)
 80045f8:	681b      	ldr	r3, [r3, #0]
 80045fa:	4013      	ands	r3, r2
 80045fc:	2b00      	cmp	r3, #0
 80045fe:	d01e      	beq.n	800463e <vPortFree+0xae>
		{
			if( pxLink->pxNextFreeBlock == NULL )
 8004600:	693b      	ldr	r3, [r7, #16]
 8004602:	681b      	ldr	r3, [r3, #0]
 8004604:	2b00      	cmp	r3, #0
 8004606:	d11a      	bne.n	800463e <vPortFree+0xae>
			{
				/* The block is being returned to the heap - it is no longer
				allocated. */
				pxLink->xBlockSize &= ~xBlockAllocatedBit;
 8004608:	693b      	ldr	r3, [r7, #16]
 800460a:	685a      	ldr	r2, [r3, #4]
 800460c:	4b0e      	ldr	r3, [pc, #56]	; (8004648 <vPortFree+0xb8>)
 800460e:	681b      	ldr	r3, [r3, #0]
 8004610:	43db      	mvns	r3, r3
 8004612:	401a      	ands	r2, r3
 8004614:	693b      	ldr	r3, [r7, #16]
 8004616:	605a      	str	r2, [r3, #4]

				vTaskSuspendAll();
 8004618:	f7fe ff12 	bl	8003440 <vTaskSuspendAll>
				{
					/* Add this block to the list of free blocks. */
					xFreeBytesRemaining += pxLink->xBlockSize;
 800461c:	693b      	ldr	r3, [r7, #16]
 800461e:	685a      	ldr	r2, [r3, #4]
 8004620:	4b0a      	ldr	r3, [pc, #40]	; (800464c <vPortFree+0xbc>)
 8004622:	681b      	ldr	r3, [r3, #0]
 8004624:	4413      	add	r3, r2
 8004626:	4a09      	ldr	r2, [pc, #36]	; (800464c <vPortFree+0xbc>)
 8004628:	6013      	str	r3, [r2, #0]
					traceFREE( pv, pxLink->xBlockSize );
					prvInsertBlockIntoFreeList( ( ( BlockLink_t * ) pxLink ) );
 800462a:	6938      	ldr	r0, [r7, #16]
 800462c:	f000 f874 	bl	8004718 <prvInsertBlockIntoFreeList>
					xNumberOfSuccessfulFrees++;
 8004630:	4b07      	ldr	r3, [pc, #28]	; (8004650 <vPortFree+0xc0>)
 8004632:	681b      	ldr	r3, [r3, #0]
 8004634:	3301      	adds	r3, #1
 8004636:	4a06      	ldr	r2, [pc, #24]	; (8004650 <vPortFree+0xc0>)
 8004638:	6013      	str	r3, [r2, #0]
				}
				( void ) xTaskResumeAll();
 800463a:	f7fe ff0f 	bl	800345c <xTaskResumeAll>
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
}
 800463e:	bf00      	nop
 8004640:	3718      	adds	r7, #24
 8004642:	46bd      	mov	sp, r7
 8004644:	bd80      	pop	{r7, pc}
 8004646:	bf00      	nop
 8004648:	200040f8 	.word	0x200040f8
 800464c:	200040e8 	.word	0x200040e8
 8004650:	200040f4 	.word	0x200040f4

08004654 <prvHeapInit>:
	/* This just exists to keep the linker quiet. */
}
/*-----------------------------------------------------------*/

static void prvHeapInit( void )
{
 8004654:	b480      	push	{r7}
 8004656:	b085      	sub	sp, #20
 8004658:	af00      	add	r7, sp, #0
BlockLink_t *pxFirstFreeBlock;
uint8_t *pucAlignedHeap;
size_t uxAddress;
size_t xTotalHeapSize = configTOTAL_HEAP_SIZE;
 800465a:	f44f 5370 	mov.w	r3, #15360	; 0x3c00
 800465e:	60bb      	str	r3, [r7, #8]

	/* Ensure the heap starts on a correctly aligned boundary. */
	uxAddress = ( size_t ) ucHeap;
 8004660:	4b27      	ldr	r3, [pc, #156]	; (8004700 <prvHeapInit+0xac>)
 8004662:	60fb      	str	r3, [r7, #12]

	if( ( uxAddress & portBYTE_ALIGNMENT_MASK ) != 0 )
 8004664:	68fb      	ldr	r3, [r7, #12]
 8004666:	f003 0307 	and.w	r3, r3, #7
 800466a:	2b00      	cmp	r3, #0
 800466c:	d00c      	beq.n	8004688 <prvHeapInit+0x34>
	{
		uxAddress += ( portBYTE_ALIGNMENT - 1 );
 800466e:	68fb      	ldr	r3, [r7, #12]
 8004670:	3307      	adds	r3, #7
 8004672:	60fb      	str	r3, [r7, #12]
		uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 8004674:	68fb      	ldr	r3, [r7, #12]
 8004676:	f023 0307 	bic.w	r3, r3, #7
 800467a:	60fb      	str	r3, [r7, #12]
		xTotalHeapSize -= uxAddress - ( size_t ) ucHeap;
 800467c:	68ba      	ldr	r2, [r7, #8]
 800467e:	68fb      	ldr	r3, [r7, #12]
 8004680:	1ad3      	subs	r3, r2, r3
 8004682:	4a1f      	ldr	r2, [pc, #124]	; (8004700 <prvHeapInit+0xac>)
 8004684:	4413      	add	r3, r2
 8004686:	60bb      	str	r3, [r7, #8]
	}

	pucAlignedHeap = ( uint8_t * ) uxAddress;
 8004688:	68fb      	ldr	r3, [r7, #12]
 800468a:	607b      	str	r3, [r7, #4]

	/* xStart is used to hold a pointer to the first item in the list of free
	blocks.  The void cast is used to prevent compiler warnings. */
	xStart.pxNextFreeBlock = ( void * ) pucAlignedHeap;
 800468c:	4a1d      	ldr	r2, [pc, #116]	; (8004704 <prvHeapInit+0xb0>)
 800468e:	687b      	ldr	r3, [r7, #4]
 8004690:	6013      	str	r3, [r2, #0]
	xStart.xBlockSize = ( size_t ) 0;
 8004692:	4b1c      	ldr	r3, [pc, #112]	; (8004704 <prvHeapInit+0xb0>)
 8004694:	2200      	movs	r2, #0
 8004696:	605a      	str	r2, [r3, #4]

	/* pxEnd is used to mark the end of the list of free blocks and is inserted
	at the end of the heap space. */
	uxAddress = ( ( size_t ) pucAlignedHeap ) + xTotalHeapSize;
 8004698:	687b      	ldr	r3, [r7, #4]
 800469a:	68ba      	ldr	r2, [r7, #8]
 800469c:	4413      	add	r3, r2
 800469e:	60fb      	str	r3, [r7, #12]
	uxAddress -= xHeapStructSize;
 80046a0:	2208      	movs	r2, #8
 80046a2:	68fb      	ldr	r3, [r7, #12]
 80046a4:	1a9b      	subs	r3, r3, r2
 80046a6:	60fb      	str	r3, [r7, #12]
	uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 80046a8:	68fb      	ldr	r3, [r7, #12]
 80046aa:	f023 0307 	bic.w	r3, r3, #7
 80046ae:	60fb      	str	r3, [r7, #12]
	pxEnd = ( void * ) uxAddress;
 80046b0:	68fb      	ldr	r3, [r7, #12]
 80046b2:	4a15      	ldr	r2, [pc, #84]	; (8004708 <prvHeapInit+0xb4>)
 80046b4:	6013      	str	r3, [r2, #0]
	pxEnd->xBlockSize = 0;
 80046b6:	4b14      	ldr	r3, [pc, #80]	; (8004708 <prvHeapInit+0xb4>)
 80046b8:	681b      	ldr	r3, [r3, #0]
 80046ba:	2200      	movs	r2, #0
 80046bc:	605a      	str	r2, [r3, #4]
	pxEnd->pxNextFreeBlock = NULL;
 80046be:	4b12      	ldr	r3, [pc, #72]	; (8004708 <prvHeapInit+0xb4>)
 80046c0:	681b      	ldr	r3, [r3, #0]
 80046c2:	2200      	movs	r2, #0
 80046c4:	601a      	str	r2, [r3, #0]

	/* To start with there is a single free block that is sized to take up the
	entire heap space, minus the space taken by pxEnd. */
	pxFirstFreeBlock = ( void * ) pucAlignedHeap;
 80046c6:	687b      	ldr	r3, [r7, #4]
 80046c8:	603b      	str	r3, [r7, #0]
	pxFirstFreeBlock->xBlockSize = uxAddress - ( size_t ) pxFirstFreeBlock;
 80046ca:	683b      	ldr	r3, [r7, #0]
 80046cc:	68fa      	ldr	r2, [r7, #12]
 80046ce:	1ad2      	subs	r2, r2, r3
 80046d0:	683b      	ldr	r3, [r7, #0]
 80046d2:	605a      	str	r2, [r3, #4]
	pxFirstFreeBlock->pxNextFreeBlock = pxEnd;
 80046d4:	4b0c      	ldr	r3, [pc, #48]	; (8004708 <prvHeapInit+0xb4>)
 80046d6:	681a      	ldr	r2, [r3, #0]
 80046d8:	683b      	ldr	r3, [r7, #0]
 80046da:	601a      	str	r2, [r3, #0]

	/* Only one block exists - and it covers the entire usable heap space. */
	xMinimumEverFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 80046dc:	683b      	ldr	r3, [r7, #0]
 80046de:	685b      	ldr	r3, [r3, #4]
 80046e0:	4a0a      	ldr	r2, [pc, #40]	; (800470c <prvHeapInit+0xb8>)
 80046e2:	6013      	str	r3, [r2, #0]
	xFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 80046e4:	683b      	ldr	r3, [r7, #0]
 80046e6:	685b      	ldr	r3, [r3, #4]
 80046e8:	4a09      	ldr	r2, [pc, #36]	; (8004710 <prvHeapInit+0xbc>)
 80046ea:	6013      	str	r3, [r2, #0]

	/* Work out the position of the top bit in a size_t variable. */
	xBlockAllocatedBit = ( ( size_t ) 1 ) << ( ( sizeof( size_t ) * heapBITS_PER_BYTE ) - 1 );
 80046ec:	4b09      	ldr	r3, [pc, #36]	; (8004714 <prvHeapInit+0xc0>)
 80046ee:	f04f 4200 	mov.w	r2, #2147483648	; 0x80000000
 80046f2:	601a      	str	r2, [r3, #0]
}
 80046f4:	bf00      	nop
 80046f6:	3714      	adds	r7, #20
 80046f8:	46bd      	mov	sp, r7
 80046fa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80046fe:	4770      	bx	lr
 8004700:	200004dc 	.word	0x200004dc
 8004704:	200040dc 	.word	0x200040dc
 8004708:	200040e4 	.word	0x200040e4
 800470c:	200040ec 	.word	0x200040ec
 8004710:	200040e8 	.word	0x200040e8
 8004714:	200040f8 	.word	0x200040f8

08004718 <prvInsertBlockIntoFreeList>:
/*-----------------------------------------------------------*/

static void prvInsertBlockIntoFreeList( BlockLink_t *pxBlockToInsert )
{
 8004718:	b480      	push	{r7}
 800471a:	b085      	sub	sp, #20
 800471c:	af00      	add	r7, sp, #0
 800471e:	6078      	str	r0, [r7, #4]
BlockLink_t *pxIterator;
uint8_t *puc;

	/* Iterate through the list until a block is found that has a higher address
	than the block being inserted. */
	for( pxIterator = &xStart; pxIterator->pxNextFreeBlock < pxBlockToInsert; pxIterator = pxIterator->pxNextFreeBlock )
 8004720:	4b28      	ldr	r3, [pc, #160]	; (80047c4 <prvInsertBlockIntoFreeList+0xac>)
 8004722:	60fb      	str	r3, [r7, #12]
 8004724:	e002      	b.n	800472c <prvInsertBlockIntoFreeList+0x14>
 8004726:	68fb      	ldr	r3, [r7, #12]
 8004728:	681b      	ldr	r3, [r3, #0]
 800472a:	60fb      	str	r3, [r7, #12]
 800472c:	68fb      	ldr	r3, [r7, #12]
 800472e:	681b      	ldr	r3, [r3, #0]
 8004730:	687a      	ldr	r2, [r7, #4]
 8004732:	429a      	cmp	r2, r3
 8004734:	d8f7      	bhi.n	8004726 <prvInsertBlockIntoFreeList+0xe>
		/* Nothing to do here, just iterate to the right position. */
	}

	/* Do the block being inserted, and the block it is being inserted after
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxIterator;
 8004736:	68fb      	ldr	r3, [r7, #12]
 8004738:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxIterator->xBlockSize ) == ( uint8_t * ) pxBlockToInsert )
 800473a:	68fb      	ldr	r3, [r7, #12]
 800473c:	685b      	ldr	r3, [r3, #4]
 800473e:	68ba      	ldr	r2, [r7, #8]
 8004740:	4413      	add	r3, r2
 8004742:	687a      	ldr	r2, [r7, #4]
 8004744:	429a      	cmp	r2, r3
 8004746:	d108      	bne.n	800475a <prvInsertBlockIntoFreeList+0x42>
	{
		pxIterator->xBlockSize += pxBlockToInsert->xBlockSize;
 8004748:	68fb      	ldr	r3, [r7, #12]
 800474a:	685a      	ldr	r2, [r3, #4]
 800474c:	687b      	ldr	r3, [r7, #4]
 800474e:	685b      	ldr	r3, [r3, #4]
 8004750:	441a      	add	r2, r3
 8004752:	68fb      	ldr	r3, [r7, #12]
 8004754:	605a      	str	r2, [r3, #4]
		pxBlockToInsert = pxIterator;
 8004756:	68fb      	ldr	r3, [r7, #12]
 8004758:	607b      	str	r3, [r7, #4]
		mtCOVERAGE_TEST_MARKER();
	}

	/* Do the block being inserted, and the block it is being inserted before
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxBlockToInsert;
 800475a:	687b      	ldr	r3, [r7, #4]
 800475c:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxBlockToInsert->xBlockSize ) == ( uint8_t * ) pxIterator->pxNextFreeBlock )
 800475e:	687b      	ldr	r3, [r7, #4]
 8004760:	685b      	ldr	r3, [r3, #4]
 8004762:	68ba      	ldr	r2, [r7, #8]
 8004764:	441a      	add	r2, r3
 8004766:	68fb      	ldr	r3, [r7, #12]
 8004768:	681b      	ldr	r3, [r3, #0]
 800476a:	429a      	cmp	r2, r3
 800476c:	d118      	bne.n	80047a0 <prvInsertBlockIntoFreeList+0x88>
	{
		if( pxIterator->pxNextFreeBlock != pxEnd )
 800476e:	68fb      	ldr	r3, [r7, #12]
 8004770:	681a      	ldr	r2, [r3, #0]
 8004772:	4b15      	ldr	r3, [pc, #84]	; (80047c8 <prvInsertBlockIntoFreeList+0xb0>)
 8004774:	681b      	ldr	r3, [r3, #0]
 8004776:	429a      	cmp	r2, r3
 8004778:	d00d      	beq.n	8004796 <prvInsertBlockIntoFreeList+0x7e>
		{
			/* Form one big block from the two blocks. */
			pxBlockToInsert->xBlockSize += pxIterator->pxNextFreeBlock->xBlockSize;
 800477a:	687b      	ldr	r3, [r7, #4]
 800477c:	685a      	ldr	r2, [r3, #4]
 800477e:	68fb      	ldr	r3, [r7, #12]
 8004780:	681b      	ldr	r3, [r3, #0]
 8004782:	685b      	ldr	r3, [r3, #4]
 8004784:	441a      	add	r2, r3
 8004786:	687b      	ldr	r3, [r7, #4]
 8004788:	605a      	str	r2, [r3, #4]
			pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock->pxNextFreeBlock;
 800478a:	68fb      	ldr	r3, [r7, #12]
 800478c:	681b      	ldr	r3, [r3, #0]
 800478e:	681a      	ldr	r2, [r3, #0]
 8004790:	687b      	ldr	r3, [r7, #4]
 8004792:	601a      	str	r2, [r3, #0]
 8004794:	e008      	b.n	80047a8 <prvInsertBlockIntoFreeList+0x90>
		}
		else
		{
			pxBlockToInsert->pxNextFreeBlock = pxEnd;
 8004796:	4b0c      	ldr	r3, [pc, #48]	; (80047c8 <prvInsertBlockIntoFreeList+0xb0>)
 8004798:	681a      	ldr	r2, [r3, #0]
 800479a:	687b      	ldr	r3, [r7, #4]
 800479c:	601a      	str	r2, [r3, #0]
 800479e:	e003      	b.n	80047a8 <prvInsertBlockIntoFreeList+0x90>
		}
	}
	else
	{
		pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock;
 80047a0:	68fb      	ldr	r3, [r7, #12]
 80047a2:	681a      	ldr	r2, [r3, #0]
 80047a4:	687b      	ldr	r3, [r7, #4]
 80047a6:	601a      	str	r2, [r3, #0]

	/* If the block being inserted plugged a gab, so was merged with the block
	before and the block after, then it's pxNextFreeBlock pointer will have
	already been set, and should not be set here as that would make it point
	to itself. */
	if( pxIterator != pxBlockToInsert )
 80047a8:	68fa      	ldr	r2, [r7, #12]
 80047aa:	687b      	ldr	r3, [r7, #4]
 80047ac:	429a      	cmp	r2, r3
 80047ae:	d002      	beq.n	80047b6 <prvInsertBlockIntoFreeList+0x9e>
	{
		pxIterator->pxNextFreeBlock = pxBlockToInsert;
 80047b0:	68fb      	ldr	r3, [r7, #12]
 80047b2:	687a      	ldr	r2, [r7, #4]
 80047b4:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 80047b6:	bf00      	nop
 80047b8:	3714      	adds	r7, #20
 80047ba:	46bd      	mov	sp, r7
 80047bc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80047c0:	4770      	bx	lr
 80047c2:	bf00      	nop
 80047c4:	200040dc 	.word	0x200040dc
 80047c8:	200040e4 	.word	0x200040e4

080047cc <atoi>:
 80047cc:	220a      	movs	r2, #10
 80047ce:	2100      	movs	r1, #0
 80047d0:	f000 b95c 	b.w	8004a8c <strtol>

080047d4 <__errno>:
 80047d4:	4b01      	ldr	r3, [pc, #4]	; (80047dc <__errno+0x8>)
 80047d6:	6818      	ldr	r0, [r3, #0]
 80047d8:	4770      	bx	lr
 80047da:	bf00      	nop
 80047dc:	20000010 	.word	0x20000010

080047e0 <__libc_init_array>:
 80047e0:	b570      	push	{r4, r5, r6, lr}
 80047e2:	4d0d      	ldr	r5, [pc, #52]	; (8004818 <__libc_init_array+0x38>)
 80047e4:	4c0d      	ldr	r4, [pc, #52]	; (800481c <__libc_init_array+0x3c>)
 80047e6:	1b64      	subs	r4, r4, r5
 80047e8:	10a4      	asrs	r4, r4, #2
 80047ea:	2600      	movs	r6, #0
 80047ec:	42a6      	cmp	r6, r4
 80047ee:	d109      	bne.n	8004804 <__libc_init_array+0x24>
 80047f0:	4d0b      	ldr	r5, [pc, #44]	; (8004820 <__libc_init_array+0x40>)
 80047f2:	4c0c      	ldr	r4, [pc, #48]	; (8004824 <__libc_init_array+0x44>)
 80047f4:	f000 f9ee 	bl	8004bd4 <_init>
 80047f8:	1b64      	subs	r4, r4, r5
 80047fa:	10a4      	asrs	r4, r4, #2
 80047fc:	2600      	movs	r6, #0
 80047fe:	42a6      	cmp	r6, r4
 8004800:	d105      	bne.n	800480e <__libc_init_array+0x2e>
 8004802:	bd70      	pop	{r4, r5, r6, pc}
 8004804:	f855 3b04 	ldr.w	r3, [r5], #4
 8004808:	4798      	blx	r3
 800480a:	3601      	adds	r6, #1
 800480c:	e7ee      	b.n	80047ec <__libc_init_array+0xc>
 800480e:	f855 3b04 	ldr.w	r3, [r5], #4
 8004812:	4798      	blx	r3
 8004814:	3601      	adds	r6, #1
 8004816:	e7f2      	b.n	80047fe <__libc_init_array+0x1e>
 8004818:	08004e38 	.word	0x08004e38
 800481c:	08004e38 	.word	0x08004e38
 8004820:	08004e38 	.word	0x08004e38
 8004824:	08004e3c 	.word	0x08004e3c

08004828 <__itoa>:
 8004828:	1e93      	subs	r3, r2, #2
 800482a:	2b22      	cmp	r3, #34	; 0x22
 800482c:	b510      	push	{r4, lr}
 800482e:	460c      	mov	r4, r1
 8004830:	d904      	bls.n	800483c <__itoa+0x14>
 8004832:	2300      	movs	r3, #0
 8004834:	700b      	strb	r3, [r1, #0]
 8004836:	461c      	mov	r4, r3
 8004838:	4620      	mov	r0, r4
 800483a:	bd10      	pop	{r4, pc}
 800483c:	2a0a      	cmp	r2, #10
 800483e:	d109      	bne.n	8004854 <__itoa+0x2c>
 8004840:	2800      	cmp	r0, #0
 8004842:	da07      	bge.n	8004854 <__itoa+0x2c>
 8004844:	232d      	movs	r3, #45	; 0x2d
 8004846:	700b      	strb	r3, [r1, #0]
 8004848:	4240      	negs	r0, r0
 800484a:	2101      	movs	r1, #1
 800484c:	4421      	add	r1, r4
 800484e:	f000 f927 	bl	8004aa0 <__utoa>
 8004852:	e7f1      	b.n	8004838 <__itoa+0x10>
 8004854:	2100      	movs	r1, #0
 8004856:	e7f9      	b.n	800484c <__itoa+0x24>

08004858 <itoa>:
 8004858:	f7ff bfe6 	b.w	8004828 <__itoa>

0800485c <__retarget_lock_acquire_recursive>:
 800485c:	4770      	bx	lr

0800485e <__retarget_lock_release_recursive>:
 800485e:	4770      	bx	lr

08004860 <memcpy>:
 8004860:	440a      	add	r2, r1
 8004862:	4291      	cmp	r1, r2
 8004864:	f100 33ff 	add.w	r3, r0, #4294967295
 8004868:	d100      	bne.n	800486c <memcpy+0xc>
 800486a:	4770      	bx	lr
 800486c:	b510      	push	{r4, lr}
 800486e:	f811 4b01 	ldrb.w	r4, [r1], #1
 8004872:	f803 4f01 	strb.w	r4, [r3, #1]!
 8004876:	4291      	cmp	r1, r2
 8004878:	d1f9      	bne.n	800486e <memcpy+0xe>
 800487a:	bd10      	pop	{r4, pc}

0800487c <memset>:
 800487c:	4402      	add	r2, r0
 800487e:	4603      	mov	r3, r0
 8004880:	4293      	cmp	r3, r2
 8004882:	d100      	bne.n	8004886 <memset+0xa>
 8004884:	4770      	bx	lr
 8004886:	f803 1b01 	strb.w	r1, [r3], #1
 800488a:	e7f9      	b.n	8004880 <memset+0x4>

0800488c <cleanup_glue>:
 800488c:	b538      	push	{r3, r4, r5, lr}
 800488e:	460c      	mov	r4, r1
 8004890:	6809      	ldr	r1, [r1, #0]
 8004892:	4605      	mov	r5, r0
 8004894:	b109      	cbz	r1, 800489a <cleanup_glue+0xe>
 8004896:	f7ff fff9 	bl	800488c <cleanup_glue>
 800489a:	4621      	mov	r1, r4
 800489c:	4628      	mov	r0, r5
 800489e:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 80048a2:	f000 b94b 	b.w	8004b3c <_free_r>
	...

080048a8 <_reclaim_reent>:
 80048a8:	4b2c      	ldr	r3, [pc, #176]	; (800495c <_reclaim_reent+0xb4>)
 80048aa:	681b      	ldr	r3, [r3, #0]
 80048ac:	4283      	cmp	r3, r0
 80048ae:	b570      	push	{r4, r5, r6, lr}
 80048b0:	4604      	mov	r4, r0
 80048b2:	d051      	beq.n	8004958 <_reclaim_reent+0xb0>
 80048b4:	6a43      	ldr	r3, [r0, #36]	; 0x24
 80048b6:	b143      	cbz	r3, 80048ca <_reclaim_reent+0x22>
 80048b8:	68db      	ldr	r3, [r3, #12]
 80048ba:	2b00      	cmp	r3, #0
 80048bc:	d14a      	bne.n	8004954 <_reclaim_reent+0xac>
 80048be:	6a63      	ldr	r3, [r4, #36]	; 0x24
 80048c0:	6819      	ldr	r1, [r3, #0]
 80048c2:	b111      	cbz	r1, 80048ca <_reclaim_reent+0x22>
 80048c4:	4620      	mov	r0, r4
 80048c6:	f000 f939 	bl	8004b3c <_free_r>
 80048ca:	6961      	ldr	r1, [r4, #20]
 80048cc:	b111      	cbz	r1, 80048d4 <_reclaim_reent+0x2c>
 80048ce:	4620      	mov	r0, r4
 80048d0:	f000 f934 	bl	8004b3c <_free_r>
 80048d4:	6a61      	ldr	r1, [r4, #36]	; 0x24
 80048d6:	b111      	cbz	r1, 80048de <_reclaim_reent+0x36>
 80048d8:	4620      	mov	r0, r4
 80048da:	f000 f92f 	bl	8004b3c <_free_r>
 80048de:	6ba1      	ldr	r1, [r4, #56]	; 0x38
 80048e0:	b111      	cbz	r1, 80048e8 <_reclaim_reent+0x40>
 80048e2:	4620      	mov	r0, r4
 80048e4:	f000 f92a 	bl	8004b3c <_free_r>
 80048e8:	6be1      	ldr	r1, [r4, #60]	; 0x3c
 80048ea:	b111      	cbz	r1, 80048f2 <_reclaim_reent+0x4a>
 80048ec:	4620      	mov	r0, r4
 80048ee:	f000 f925 	bl	8004b3c <_free_r>
 80048f2:	6c21      	ldr	r1, [r4, #64]	; 0x40
 80048f4:	b111      	cbz	r1, 80048fc <_reclaim_reent+0x54>
 80048f6:	4620      	mov	r0, r4
 80048f8:	f000 f920 	bl	8004b3c <_free_r>
 80048fc:	6de1      	ldr	r1, [r4, #92]	; 0x5c
 80048fe:	b111      	cbz	r1, 8004906 <_reclaim_reent+0x5e>
 8004900:	4620      	mov	r0, r4
 8004902:	f000 f91b 	bl	8004b3c <_free_r>
 8004906:	6da1      	ldr	r1, [r4, #88]	; 0x58
 8004908:	b111      	cbz	r1, 8004910 <_reclaim_reent+0x68>
 800490a:	4620      	mov	r0, r4
 800490c:	f000 f916 	bl	8004b3c <_free_r>
 8004910:	6b61      	ldr	r1, [r4, #52]	; 0x34
 8004912:	b111      	cbz	r1, 800491a <_reclaim_reent+0x72>
 8004914:	4620      	mov	r0, r4
 8004916:	f000 f911 	bl	8004b3c <_free_r>
 800491a:	69a3      	ldr	r3, [r4, #24]
 800491c:	b1e3      	cbz	r3, 8004958 <_reclaim_reent+0xb0>
 800491e:	6aa3      	ldr	r3, [r4, #40]	; 0x28
 8004920:	4620      	mov	r0, r4
 8004922:	4798      	blx	r3
 8004924:	6ca1      	ldr	r1, [r4, #72]	; 0x48
 8004926:	b1b9      	cbz	r1, 8004958 <_reclaim_reent+0xb0>
 8004928:	4620      	mov	r0, r4
 800492a:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
 800492e:	f7ff bfad 	b.w	800488c <cleanup_glue>
 8004932:	5949      	ldr	r1, [r1, r5]
 8004934:	b941      	cbnz	r1, 8004948 <_reclaim_reent+0xa0>
 8004936:	3504      	adds	r5, #4
 8004938:	6a63      	ldr	r3, [r4, #36]	; 0x24
 800493a:	2d80      	cmp	r5, #128	; 0x80
 800493c:	68d9      	ldr	r1, [r3, #12]
 800493e:	d1f8      	bne.n	8004932 <_reclaim_reent+0x8a>
 8004940:	4620      	mov	r0, r4
 8004942:	f000 f8fb 	bl	8004b3c <_free_r>
 8004946:	e7ba      	b.n	80048be <_reclaim_reent+0x16>
 8004948:	680e      	ldr	r6, [r1, #0]
 800494a:	4620      	mov	r0, r4
 800494c:	f000 f8f6 	bl	8004b3c <_free_r>
 8004950:	4631      	mov	r1, r6
 8004952:	e7ef      	b.n	8004934 <_reclaim_reent+0x8c>
 8004954:	2500      	movs	r5, #0
 8004956:	e7ef      	b.n	8004938 <_reclaim_reent+0x90>
 8004958:	bd70      	pop	{r4, r5, r6, pc}
 800495a:	bf00      	nop
 800495c:	20000010 	.word	0x20000010

08004960 <strncmp>:
 8004960:	b510      	push	{r4, lr}
 8004962:	b17a      	cbz	r2, 8004984 <strncmp+0x24>
 8004964:	4603      	mov	r3, r0
 8004966:	3901      	subs	r1, #1
 8004968:	1884      	adds	r4, r0, r2
 800496a:	f813 0b01 	ldrb.w	r0, [r3], #1
 800496e:	f811 2f01 	ldrb.w	r2, [r1, #1]!
 8004972:	4290      	cmp	r0, r2
 8004974:	d101      	bne.n	800497a <strncmp+0x1a>
 8004976:	42a3      	cmp	r3, r4
 8004978:	d101      	bne.n	800497e <strncmp+0x1e>
 800497a:	1a80      	subs	r0, r0, r2
 800497c:	bd10      	pop	{r4, pc}
 800497e:	2800      	cmp	r0, #0
 8004980:	d1f3      	bne.n	800496a <strncmp+0xa>
 8004982:	e7fa      	b.n	800497a <strncmp+0x1a>
 8004984:	4610      	mov	r0, r2
 8004986:	e7f9      	b.n	800497c <strncmp+0x1c>

08004988 <_strtol_l.constprop.0>:
 8004988:	2b01      	cmp	r3, #1
 800498a:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800498e:	d001      	beq.n	8004994 <_strtol_l.constprop.0+0xc>
 8004990:	2b24      	cmp	r3, #36	; 0x24
 8004992:	d906      	bls.n	80049a2 <_strtol_l.constprop.0+0x1a>
 8004994:	f7ff ff1e 	bl	80047d4 <__errno>
 8004998:	2316      	movs	r3, #22
 800499a:	6003      	str	r3, [r0, #0]
 800499c:	2000      	movs	r0, #0
 800499e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80049a2:	f8df c0e4 	ldr.w	ip, [pc, #228]	; 8004a88 <_strtol_l.constprop.0+0x100>
 80049a6:	460d      	mov	r5, r1
 80049a8:	462e      	mov	r6, r5
 80049aa:	f815 4b01 	ldrb.w	r4, [r5], #1
 80049ae:	f814 700c 	ldrb.w	r7, [r4, ip]
 80049b2:	f017 0708 	ands.w	r7, r7, #8
 80049b6:	d1f7      	bne.n	80049a8 <_strtol_l.constprop.0+0x20>
 80049b8:	2c2d      	cmp	r4, #45	; 0x2d
 80049ba:	d132      	bne.n	8004a22 <_strtol_l.constprop.0+0x9a>
 80049bc:	782c      	ldrb	r4, [r5, #0]
 80049be:	2701      	movs	r7, #1
 80049c0:	1cb5      	adds	r5, r6, #2
 80049c2:	2b00      	cmp	r3, #0
 80049c4:	d05b      	beq.n	8004a7e <_strtol_l.constprop.0+0xf6>
 80049c6:	2b10      	cmp	r3, #16
 80049c8:	d109      	bne.n	80049de <_strtol_l.constprop.0+0x56>
 80049ca:	2c30      	cmp	r4, #48	; 0x30
 80049cc:	d107      	bne.n	80049de <_strtol_l.constprop.0+0x56>
 80049ce:	782c      	ldrb	r4, [r5, #0]
 80049d0:	f004 04df 	and.w	r4, r4, #223	; 0xdf
 80049d4:	2c58      	cmp	r4, #88	; 0x58
 80049d6:	d14d      	bne.n	8004a74 <_strtol_l.constprop.0+0xec>
 80049d8:	786c      	ldrb	r4, [r5, #1]
 80049da:	2310      	movs	r3, #16
 80049dc:	3502      	adds	r5, #2
 80049de:	f107 4800 	add.w	r8, r7, #2147483648	; 0x80000000
 80049e2:	f108 38ff 	add.w	r8, r8, #4294967295
 80049e6:	f04f 0c00 	mov.w	ip, #0
 80049ea:	fbb8 f9f3 	udiv	r9, r8, r3
 80049ee:	4666      	mov	r6, ip
 80049f0:	fb03 8a19 	mls	sl, r3, r9, r8
 80049f4:	f1a4 0e30 	sub.w	lr, r4, #48	; 0x30
 80049f8:	f1be 0f09 	cmp.w	lr, #9
 80049fc:	d816      	bhi.n	8004a2c <_strtol_l.constprop.0+0xa4>
 80049fe:	4674      	mov	r4, lr
 8004a00:	42a3      	cmp	r3, r4
 8004a02:	dd24      	ble.n	8004a4e <_strtol_l.constprop.0+0xc6>
 8004a04:	f1bc 0f00 	cmp.w	ip, #0
 8004a08:	db1e      	blt.n	8004a48 <_strtol_l.constprop.0+0xc0>
 8004a0a:	45b1      	cmp	r9, r6
 8004a0c:	d31c      	bcc.n	8004a48 <_strtol_l.constprop.0+0xc0>
 8004a0e:	d101      	bne.n	8004a14 <_strtol_l.constprop.0+0x8c>
 8004a10:	45a2      	cmp	sl, r4
 8004a12:	db19      	blt.n	8004a48 <_strtol_l.constprop.0+0xc0>
 8004a14:	fb06 4603 	mla	r6, r6, r3, r4
 8004a18:	f04f 0c01 	mov.w	ip, #1
 8004a1c:	f815 4b01 	ldrb.w	r4, [r5], #1
 8004a20:	e7e8      	b.n	80049f4 <_strtol_l.constprop.0+0x6c>
 8004a22:	2c2b      	cmp	r4, #43	; 0x2b
 8004a24:	bf04      	itt	eq
 8004a26:	782c      	ldrbeq	r4, [r5, #0]
 8004a28:	1cb5      	addeq	r5, r6, #2
 8004a2a:	e7ca      	b.n	80049c2 <_strtol_l.constprop.0+0x3a>
 8004a2c:	f1a4 0e41 	sub.w	lr, r4, #65	; 0x41
 8004a30:	f1be 0f19 	cmp.w	lr, #25
 8004a34:	d801      	bhi.n	8004a3a <_strtol_l.constprop.0+0xb2>
 8004a36:	3c37      	subs	r4, #55	; 0x37
 8004a38:	e7e2      	b.n	8004a00 <_strtol_l.constprop.0+0x78>
 8004a3a:	f1a4 0e61 	sub.w	lr, r4, #97	; 0x61
 8004a3e:	f1be 0f19 	cmp.w	lr, #25
 8004a42:	d804      	bhi.n	8004a4e <_strtol_l.constprop.0+0xc6>
 8004a44:	3c57      	subs	r4, #87	; 0x57
 8004a46:	e7db      	b.n	8004a00 <_strtol_l.constprop.0+0x78>
 8004a48:	f04f 3cff 	mov.w	ip, #4294967295
 8004a4c:	e7e6      	b.n	8004a1c <_strtol_l.constprop.0+0x94>
 8004a4e:	f1bc 0f00 	cmp.w	ip, #0
 8004a52:	da05      	bge.n	8004a60 <_strtol_l.constprop.0+0xd8>
 8004a54:	2322      	movs	r3, #34	; 0x22
 8004a56:	6003      	str	r3, [r0, #0]
 8004a58:	4646      	mov	r6, r8
 8004a5a:	b942      	cbnz	r2, 8004a6e <_strtol_l.constprop.0+0xe6>
 8004a5c:	4630      	mov	r0, r6
 8004a5e:	e79e      	b.n	800499e <_strtol_l.constprop.0+0x16>
 8004a60:	b107      	cbz	r7, 8004a64 <_strtol_l.constprop.0+0xdc>
 8004a62:	4276      	negs	r6, r6
 8004a64:	2a00      	cmp	r2, #0
 8004a66:	d0f9      	beq.n	8004a5c <_strtol_l.constprop.0+0xd4>
 8004a68:	f1bc 0f00 	cmp.w	ip, #0
 8004a6c:	d000      	beq.n	8004a70 <_strtol_l.constprop.0+0xe8>
 8004a6e:	1e69      	subs	r1, r5, #1
 8004a70:	6011      	str	r1, [r2, #0]
 8004a72:	e7f3      	b.n	8004a5c <_strtol_l.constprop.0+0xd4>
 8004a74:	2430      	movs	r4, #48	; 0x30
 8004a76:	2b00      	cmp	r3, #0
 8004a78:	d1b1      	bne.n	80049de <_strtol_l.constprop.0+0x56>
 8004a7a:	2308      	movs	r3, #8
 8004a7c:	e7af      	b.n	80049de <_strtol_l.constprop.0+0x56>
 8004a7e:	2c30      	cmp	r4, #48	; 0x30
 8004a80:	d0a5      	beq.n	80049ce <_strtol_l.constprop.0+0x46>
 8004a82:	230a      	movs	r3, #10
 8004a84:	e7ab      	b.n	80049de <_strtol_l.constprop.0+0x56>
 8004a86:	bf00      	nop
 8004a88:	08004d2e 	.word	0x08004d2e

08004a8c <strtol>:
 8004a8c:	4613      	mov	r3, r2
 8004a8e:	460a      	mov	r2, r1
 8004a90:	4601      	mov	r1, r0
 8004a92:	4802      	ldr	r0, [pc, #8]	; (8004a9c <strtol+0x10>)
 8004a94:	6800      	ldr	r0, [r0, #0]
 8004a96:	f7ff bf77 	b.w	8004988 <_strtol_l.constprop.0>
 8004a9a:	bf00      	nop
 8004a9c:	20000010 	.word	0x20000010

08004aa0 <__utoa>:
 8004aa0:	b5f0      	push	{r4, r5, r6, r7, lr}
 8004aa2:	4c1f      	ldr	r4, [pc, #124]	; (8004b20 <__utoa+0x80>)
 8004aa4:	b08b      	sub	sp, #44	; 0x2c
 8004aa6:	4605      	mov	r5, r0
 8004aa8:	460b      	mov	r3, r1
 8004aaa:	466e      	mov	r6, sp
 8004aac:	f104 0c20 	add.w	ip, r4, #32
 8004ab0:	6820      	ldr	r0, [r4, #0]
 8004ab2:	6861      	ldr	r1, [r4, #4]
 8004ab4:	4637      	mov	r7, r6
 8004ab6:	c703      	stmia	r7!, {r0, r1}
 8004ab8:	3408      	adds	r4, #8
 8004aba:	4564      	cmp	r4, ip
 8004abc:	463e      	mov	r6, r7
 8004abe:	d1f7      	bne.n	8004ab0 <__utoa+0x10>
 8004ac0:	7921      	ldrb	r1, [r4, #4]
 8004ac2:	7139      	strb	r1, [r7, #4]
 8004ac4:	1e91      	subs	r1, r2, #2
 8004ac6:	6820      	ldr	r0, [r4, #0]
 8004ac8:	6038      	str	r0, [r7, #0]
 8004aca:	2922      	cmp	r1, #34	; 0x22
 8004acc:	f04f 0100 	mov.w	r1, #0
 8004ad0:	d904      	bls.n	8004adc <__utoa+0x3c>
 8004ad2:	7019      	strb	r1, [r3, #0]
 8004ad4:	460b      	mov	r3, r1
 8004ad6:	4618      	mov	r0, r3
 8004ad8:	b00b      	add	sp, #44	; 0x2c
 8004ada:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8004adc:	1e58      	subs	r0, r3, #1
 8004ade:	4684      	mov	ip, r0
 8004ae0:	fbb5 f7f2 	udiv	r7, r5, r2
 8004ae4:	fb02 5617 	mls	r6, r2, r7, r5
 8004ae8:	3628      	adds	r6, #40	; 0x28
 8004aea:	446e      	add	r6, sp
 8004aec:	460c      	mov	r4, r1
 8004aee:	f816 6c28 	ldrb.w	r6, [r6, #-40]
 8004af2:	f80c 6f01 	strb.w	r6, [ip, #1]!
 8004af6:	462e      	mov	r6, r5
 8004af8:	42b2      	cmp	r2, r6
 8004afa:	f101 0101 	add.w	r1, r1, #1
 8004afe:	463d      	mov	r5, r7
 8004b00:	d9ee      	bls.n	8004ae0 <__utoa+0x40>
 8004b02:	2200      	movs	r2, #0
 8004b04:	545a      	strb	r2, [r3, r1]
 8004b06:	1919      	adds	r1, r3, r4
 8004b08:	1aa5      	subs	r5, r4, r2
 8004b0a:	42aa      	cmp	r2, r5
 8004b0c:	dae3      	bge.n	8004ad6 <__utoa+0x36>
 8004b0e:	f810 5f01 	ldrb.w	r5, [r0, #1]!
 8004b12:	780e      	ldrb	r6, [r1, #0]
 8004b14:	7006      	strb	r6, [r0, #0]
 8004b16:	3201      	adds	r2, #1
 8004b18:	f801 5901 	strb.w	r5, [r1], #-1
 8004b1c:	e7f4      	b.n	8004b08 <__utoa+0x68>
 8004b1e:	bf00      	nop
 8004b20:	08004d08 	.word	0x08004d08

08004b24 <__malloc_lock>:
 8004b24:	4801      	ldr	r0, [pc, #4]	; (8004b2c <__malloc_lock+0x8>)
 8004b26:	f7ff be99 	b.w	800485c <__retarget_lock_acquire_recursive>
 8004b2a:	bf00      	nop
 8004b2c:	200040fc 	.word	0x200040fc

08004b30 <__malloc_unlock>:
 8004b30:	4801      	ldr	r0, [pc, #4]	; (8004b38 <__malloc_unlock+0x8>)
 8004b32:	f7ff be94 	b.w	800485e <__retarget_lock_release_recursive>
 8004b36:	bf00      	nop
 8004b38:	200040fc 	.word	0x200040fc

08004b3c <_free_r>:
 8004b3c:	b537      	push	{r0, r1, r2, r4, r5, lr}
 8004b3e:	2900      	cmp	r1, #0
 8004b40:	d044      	beq.n	8004bcc <_free_r+0x90>
 8004b42:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8004b46:	9001      	str	r0, [sp, #4]
 8004b48:	2b00      	cmp	r3, #0
 8004b4a:	f1a1 0404 	sub.w	r4, r1, #4
 8004b4e:	bfb8      	it	lt
 8004b50:	18e4      	addlt	r4, r4, r3
 8004b52:	f7ff ffe7 	bl	8004b24 <__malloc_lock>
 8004b56:	4a1e      	ldr	r2, [pc, #120]	; (8004bd0 <_free_r+0x94>)
 8004b58:	9801      	ldr	r0, [sp, #4]
 8004b5a:	6813      	ldr	r3, [r2, #0]
 8004b5c:	b933      	cbnz	r3, 8004b6c <_free_r+0x30>
 8004b5e:	6063      	str	r3, [r4, #4]
 8004b60:	6014      	str	r4, [r2, #0]
 8004b62:	b003      	add	sp, #12
 8004b64:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 8004b68:	f7ff bfe2 	b.w	8004b30 <__malloc_unlock>
 8004b6c:	42a3      	cmp	r3, r4
 8004b6e:	d908      	bls.n	8004b82 <_free_r+0x46>
 8004b70:	6825      	ldr	r5, [r4, #0]
 8004b72:	1961      	adds	r1, r4, r5
 8004b74:	428b      	cmp	r3, r1
 8004b76:	bf01      	itttt	eq
 8004b78:	6819      	ldreq	r1, [r3, #0]
 8004b7a:	685b      	ldreq	r3, [r3, #4]
 8004b7c:	1949      	addeq	r1, r1, r5
 8004b7e:	6021      	streq	r1, [r4, #0]
 8004b80:	e7ed      	b.n	8004b5e <_free_r+0x22>
 8004b82:	461a      	mov	r2, r3
 8004b84:	685b      	ldr	r3, [r3, #4]
 8004b86:	b10b      	cbz	r3, 8004b8c <_free_r+0x50>
 8004b88:	42a3      	cmp	r3, r4
 8004b8a:	d9fa      	bls.n	8004b82 <_free_r+0x46>
 8004b8c:	6811      	ldr	r1, [r2, #0]
 8004b8e:	1855      	adds	r5, r2, r1
 8004b90:	42a5      	cmp	r5, r4
 8004b92:	d10b      	bne.n	8004bac <_free_r+0x70>
 8004b94:	6824      	ldr	r4, [r4, #0]
 8004b96:	4421      	add	r1, r4
 8004b98:	1854      	adds	r4, r2, r1
 8004b9a:	42a3      	cmp	r3, r4
 8004b9c:	6011      	str	r1, [r2, #0]
 8004b9e:	d1e0      	bne.n	8004b62 <_free_r+0x26>
 8004ba0:	681c      	ldr	r4, [r3, #0]
 8004ba2:	685b      	ldr	r3, [r3, #4]
 8004ba4:	6053      	str	r3, [r2, #4]
 8004ba6:	4421      	add	r1, r4
 8004ba8:	6011      	str	r1, [r2, #0]
 8004baa:	e7da      	b.n	8004b62 <_free_r+0x26>
 8004bac:	d902      	bls.n	8004bb4 <_free_r+0x78>
 8004bae:	230c      	movs	r3, #12
 8004bb0:	6003      	str	r3, [r0, #0]
 8004bb2:	e7d6      	b.n	8004b62 <_free_r+0x26>
 8004bb4:	6825      	ldr	r5, [r4, #0]
 8004bb6:	1961      	adds	r1, r4, r5
 8004bb8:	428b      	cmp	r3, r1
 8004bba:	bf04      	itt	eq
 8004bbc:	6819      	ldreq	r1, [r3, #0]
 8004bbe:	685b      	ldreq	r3, [r3, #4]
 8004bc0:	6063      	str	r3, [r4, #4]
 8004bc2:	bf04      	itt	eq
 8004bc4:	1949      	addeq	r1, r1, r5
 8004bc6:	6021      	streq	r1, [r4, #0]
 8004bc8:	6054      	str	r4, [r2, #4]
 8004bca:	e7ca      	b.n	8004b62 <_free_r+0x26>
 8004bcc:	b003      	add	sp, #12
 8004bce:	bd30      	pop	{r4, r5, pc}
 8004bd0:	20004100 	.word	0x20004100

08004bd4 <_init>:
 8004bd4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8004bd6:	bf00      	nop
 8004bd8:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8004bda:	bc08      	pop	{r3}
 8004bdc:	469e      	mov	lr, r3
 8004bde:	4770      	bx	lr

08004be0 <_fini>:
 8004be0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8004be2:	bf00      	nop
 8004be4:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8004be6:	bc08      	pop	{r3}
 8004be8:	469e      	mov	lr, r3
 8004bea:	4770      	bx	lr
